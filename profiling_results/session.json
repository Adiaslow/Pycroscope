{
  "session_id": "a3e9d417-7707-4c65-b482-5047a98de4bc",
  "config": {
    "line_profiling": true,
    "memory_profiling": true,
    "call_profiling": true,
    "sampling_profiling": false,
    "output_dir": "profiling_results",
    "session_name": null,
    "save_raw_data": true,
    "sampling_interval": 0.01,
    "memory_precision": 3,
    "max_call_depth": 50,
    "generate_reports": true,
    "create_visualizations": true,
    "analyze_patterns": true,
    "profiler_prefix": "pycroscope",
    "use_thread_isolation": true,
    "cleanup_on_exit": true,
    "extra_config": {}
  },
  "start_time": "2025-07-26T15:02:14.227348",
  "end_time": "2025-07-26T15:02:32.173031",
  "duration": 17.945683,
  "status": "completed",
  "results": {
    "line": {
      "profiler_type": "line",
      "data": {
        "line_stats": {
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:373": {
            "hits": 2,
            "time": 0.000385,
            "time_per_hit": 0.0001925,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 373,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:375": {
            "hits": 2,
            "time": 7.6e-05,
            "time_per_hit": 3.8e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 375,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:376": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 376,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:379": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 379,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:380": {
            "hits": 2,
            "time": 0.000263,
            "time_per_hit": 0.0001315,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 380,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:381": {
            "hits": 2,
            "time": 4.2e-05,
            "time_per_hit": 2.1e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 381,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:382": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 382,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:383": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 383,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:384": {
            "hits": 2,
            "time": 0.000421,
            "time_per_hit": 0.0002105,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 384,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:395": {
            "hits": 2,
            "time": 3.5e-05,
            "time_per_hit": 1.75e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 395,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:116": {
            "hits": 2,
            "time": 0.000131,
            "time_per_hit": 6.55e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 116,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:117": {
            "hits": 2,
            "time": 1e-06,
            "time_per_hit": 5e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 117,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:118": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 118,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:119": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 119,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:120": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 120,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:121": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 121,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:124": {
            "hits": 2,
            "time": 1e-06,
            "time_per_hit": 5e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 124,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:125": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 125,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:126": {
            "hits": 2,
            "time": 0.000166,
            "time_per_hit": 8.3e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 126,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:129": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 129,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:87": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 87,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:88": {
            "hits": 8,
            "time": 1e-05,
            "time_per_hit": 1.25e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 88,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:89": {
            "hits": 6,
            "time": 5e-06,
            "time_per_hit": 8.333333333333334e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 89,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:90": {
            "hits": 5,
            "time": 2e-06,
            "time_per_hit": 4e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 90,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:92": {
            "hits": 1,
            "time": 6e-06,
            "time_per_hit": 6e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 92,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:95": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 95,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:101": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 101,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:104": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 104,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:105": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 105,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:106": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 106,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:107": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 107,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:111": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 111,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:315": {
            "hits": 2,
            "time": 7e-05,
            "time_per_hit": 3.5e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 315,
            "function": "gettempdir"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:304": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 304,
            "function": "_gettempdir"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:311": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 311,
            "function": "_gettempdir"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:233": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 233,
            "function": "_get_candidate_names"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:240": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 240,
            "function": "_get_candidate_names"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:133": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 133,
            "function": "RLock"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:135": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 135,
            "function": "RLock"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:840": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 840,
            "function": "_newname"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1361": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1361,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1362": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1362,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1363": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1363,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1365": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1365,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1368": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1368,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1369": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1369,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1370": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1370,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1372": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1372,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1404": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1404,
            "function": "_make_invoke_excepthook"
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py:124": {
            "hits": 1,
            "time": 4e-05,
            "time_per_hit": 4e-05,
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py",
            "line_number": 124,
            "function": "register_trace_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:41": {
            "hits": 1,
            "time": 0.001995,
            "time_per_hit": 0.001995,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 41,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:43": {
            "hits": 1,
            "time": 5e-06,
            "time_per_hit": 5e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 43,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:44": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 44,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:45": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 45,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:48": {
            "hits": 1,
            "time": 17.810692,
            "time_per_hit": 17.810692,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 48,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:50": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 50,
            "function": "run_sample_workload"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:187": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 187,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:188": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 188,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:189": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 189,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:190": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 190,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:191": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 191,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:193": {
            "hits": 2,
            "time": 4.8e-05,
            "time_per_hit": 2.4e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 193,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:194": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 194,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:197": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 197,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:199": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 199,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:201": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 201,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:203": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 203,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:205": {
            "hits": 2,
            "time": 4e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 205,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:168": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 168,
            "function": "_type_convert"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:170": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 170,
            "function": "_type_convert"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:172": {
            "hits": 2,
            "time": 4e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 172,
            "function": "_type_convert"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:1162": {
            "hits": 6,
            "time": 1e-05,
            "time_per_hit": 1.6666666666666669e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 1162,
            "function": "_is_dunder"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:212": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 212,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:214": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 214,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:217": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 217,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:218": {
            "hits": 1,
            "time": 14.366304,
            "time_per_hit": 14.366304,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 218,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:219": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 219,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:220": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 220,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:223": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 223,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:224": {
            "hits": 1,
            "time": 1.60409,
            "time_per_hit": 1.60409,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 224,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:225": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 225,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:226": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 226,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:229": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 229,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:230": {
            "hits": 1,
            "time": 0.342408,
            "time_per_hit": 0.342408,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 230,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:231": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 231,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:232": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 232,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:235": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 235,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:236": {
            "hits": 1,
            "time": 0.000131,
            "time_per_hit": 0.000131,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 236,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:237": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 237,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:238": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 238,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:241": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 241,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:242": {
            "hits": 1,
            "time": 0.058795,
            "time_per_hit": 0.058795,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 242,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:243": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 243,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:244": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 244,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:247": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 247,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:248": {
            "hits": 1,
            "time": 1.427694,
            "time_per_hit": 1.427694,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 248,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:249": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 249,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:251": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 251,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:252": {
            "hits": 1,
            "time": 0.000117,
            "time_per_hit": 0.000117,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 252,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:253": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 253,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:255": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 255,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:257": {
            "hits": 1,
            "time": 4e-06,
            "time_per_hit": 4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 257,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:44": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 44,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:47": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 47,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:48": {
            "hits": 1,
            "time": 0.021824,
            "time_per_hit": 0.021824,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 48,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:49": {
            "hits": 1,
            "time": 0.02287,
            "time_per_hit": 0.02287,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 49,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:51": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 51,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:52": {
            "hits": 201,
            "time": 0.000175,
            "time_per_hit": 8.706467661691542e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 52,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:53": {
            "hits": 40200,
            "time": 0.031369,
            "time_per_hit": 7.803233830845772e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 53,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:54": {
            "hits": 8040000,
            "time": 6.172073,
            "time_per_hit": 7.676707711442787e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 54,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:55": {
            "hits": 8000000,
            "time": 6.134855,
            "time_per_hit": 7.66856875e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 55,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:58": {
            "hits": 10001,
            "time": 0.008029,
            "time_per_hit": 8.028197180281971e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 58,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:59": {
            "hits": 10000,
            "time": 0.009012,
            "time_per_hit": 9.011999999999999e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 59,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:61": {
            "hits": 1,
            "time": 1.1e-05,
            "time_per_hit": 1.1e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 61,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:66": {
            "hits": 1,
            "time": 8e-06,
            "time_per_hit": 8e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 66,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:69": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 69,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:70": {
            "hits": 50001,
            "time": 0.039087,
            "time_per_hit": 7.817243655126897e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 70,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:71": {
            "hits": 100000,
            "time": 0.077968,
            "time_per_hit": 7.7968e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 71,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:72": {
            "hits": 50000,
            "time": 0.045199,
            "time_per_hit": 9.0398e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 72,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:73": {
            "hits": 50000,
            "time": 0.03678,
            "time_per_hit": 7.356e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 73,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:74": {
            "hits": 50000,
            "time": 0.64016,
            "time_per_hit": 1.28032e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 74,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:75": {
            "hits": 50000,
            "time": 0.059834,
            "time_per_hit": 1.19668e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 75,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:76": {
            "hits": 50000,
            "time": 0.040132,
            "time_per_hit": 8.0264e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 76,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:77": {
            "hits": 50000,
            "time": 0.042566,
            "time_per_hit": 8.5132e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 77,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:78": {
            "hits": 50000,
            "time": 0.169902,
            "time_per_hit": 3.3980399999999997e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 78,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:84": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 84,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:85": {
            "hits": 50001,
            "time": 0.071867,
            "time_per_hit": 1.4373112537749244e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 85,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:86": {
            "hits": 50000,
            "time": 0.071141,
            "time_per_hit": 1.4228199999999999e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 86,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:87": {
            "hits": 50000,
            "time": 0.072027,
            "time_per_hit": 1.4405399999999998e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 87,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:88": {
            "hits": 10,
            "time": 6e-06,
            "time_per_hit": 6e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 88,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:89": {
            "hits": 50000,
            "time": 0.069358,
            "time_per_hit": 1.38716e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 89,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:92": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 92,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:93": {
            "hits": 101,
            "time": 9.7e-05,
            "time_per_hit": 9.603960396039604e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 93,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:94": {
            "hits": 100,
            "time": 0.060523,
            "time_per_hit": 0.00060523,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 94,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:95": {
            "hits": 100,
            "time": 8.8e-05,
            "time_per_hit": 8.799999999999999e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 95,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:96": {
            "hits": 100,
            "time": 8.8e-05,
            "time_per_hit": 8.799999999999999e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 96,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:97": {
            "hits": 90,
            "time": 0.000438,
            "time_per_hit": 4.866666666666667e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 97,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:99": {
            "hits": 1,
            "time": 8e-06,
            "time_per_hit": 8e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 99,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:104": {
            "hits": 1,
            "time": 5e-06,
            "time_per_hit": 5e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 104,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:107": {
            "hits": 1,
            "time": 0.000642,
            "time_per_hit": 0.000642,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 107,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:109": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 109,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:111": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 111,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:112": {
            "hits": 11,
            "time": 1.2e-05,
            "time_per_hit": 1.090909090909091e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 112,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:113": {
            "hits": 10,
            "time": 0.000226,
            "time_per_hit": 2.26e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 113,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:114": {
            "hits": 10,
            "time": 8e-06,
            "time_per_hit": 8e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 114,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:115": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 115,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:116": {
            "hits": 10,
            "time": 0.00538,
            "time_per_hit": 0.0005380000000000001,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 116,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:117": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 117,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:120": {
            "hits": 20,
            "time": 0.001848,
            "time_per_hit": 9.24e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 120,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:121": {
            "hits": 10,
            "time": 0.330351,
            "time_per_hit": 0.0330351,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 121,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:123": {
            "hits": 10,
            "time": 1.4e-05,
            "time_per_hit": 1.4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 123,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:126": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 126,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:127": {
            "hits": 11,
            "time": 1.4e-05,
            "time_per_hit": 1.2727272727272728e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 127,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:128": {
            "hits": 20,
            "time": 0.000257,
            "time_per_hit": 1.285e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 128,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:129": {
            "hits": 10,
            "time": 0.002461,
            "time_per_hit": 0.0002461,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 129,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:132": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 132,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:133": {
            "hits": 11,
            "time": 9e-06,
            "time_per_hit": 8.181818181818182e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 133,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:134": {
            "hits": 10,
            "time": 9e-06,
            "time_per_hit": 9.000000000000001e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 134,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:136": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 136,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:140": {
            "hits": 11,
            "time": 3.9e-05,
            "time_per_hit": 3.5454545454545454e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 140,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:141": {
            "hits": 10,
            "time": 0.000544,
            "time_per_hit": 5.44e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 141,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:142": {
            "hits": 1,
            "time": 4.5e-05,
            "time_per_hit": 4.5e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 142,
            "function": "file_io_operations"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:165": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 165,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:166": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 166,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:167": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 167,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:168": {
            "hits": 10,
            "time": 7e-06,
            "time_per_hit": 7e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 168,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:169": {
            "hits": 10,
            "time": 0.000421,
            "time_per_hit": 4.21e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 169,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:179": {
            "hits": 10180,
            "time": 0.316288,
            "time_per_hit": 3.1069548133595286e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 179,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:180": {
            "hits": 10170,
            "time": 0.009677,
            "time_per_hit": 9.515240904621436e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 180,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:275": {
            "hits": 10,
            "time": 1.3e-05,
            "time_per_hit": 1.2999999999999998e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 275,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:278": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 278,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:334": {
            "hits": 10,
            "time": 1.1e-05,
            "time_per_hit": 1.1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 334,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:414": {
            "hits": 10,
            "time": 1.1e-05,
            "time_per_hit": 1.1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 414,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:443": {
            "hits": 10,
            "time": 1.4e-05,
            "time_per_hit": 1.4e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 443,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:293": {
            "hits": 30,
            "time": 0.002317,
            "time_per_hit": 7.723333333333333e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 293,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:294": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 294,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:295": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 295,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:296": {
            "hits": 20,
            "time": 1.9e-05,
            "time_per_hit": 9.5e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 296,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:333": {
            "hits": 10,
            "time": 9e-06,
            "time_per_hit": 9.000000000000001e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 333,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:334": {
            "hits": 10,
            "time": 8e-06,
            "time_per_hit": 8e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 334,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:343": {
            "hits": 10,
            "time": 8e-06,
            "time_per_hit": 8e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 343,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:344": {
            "hits": 10,
            "time": 7e-06,
            "time_per_hit": 7e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 344,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:345": {
            "hits": 10,
            "time": 6e-06,
            "time_per_hit": 6e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 345,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:346": {
            "hits": 10,
            "time": 0.001924,
            "time_per_hit": 0.0001924,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 346,
            "function": "loads"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:147": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 147,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:149": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 149,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:154": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 154,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:159": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 159,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:164": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 164,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:169": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 169,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:172": {
            "hits": 1,
            "time": 5.9e-05,
            "time_per_hit": 5.9e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 172,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:177": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 177,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:180": {
            "hits": 1,
            "time": 0.005865,
            "time_per_hit": 0.005865,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 180,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:183": {
            "hits": 1,
            "time": 0.005577,
            "time_per_hit": 0.005577,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 183,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:186": {
            "hits": 1,
            "time": 0.005401,
            "time_per_hit": 0.005401,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 186,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:189": {
            "hits": 1,
            "time": 2.6e-05,
            "time_per_hit": 2.6e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 189,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:190": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 190,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:191": {
            "hits": 1,
            "time": 6.9e-05,
            "time_per_hit": 6.9e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 191,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:192": {
            "hits": 1,
            "time": 6.2e-05,
            "time_per_hit": 6.2e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 192,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:195": {
            "hits": 2,
            "time": 0.041534,
            "time_per_hit": 0.020767,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 195,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:196": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 196,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:198": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 198,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:200": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 200,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:201": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 201,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:202": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 202,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:203": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 203,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:204": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 204,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:205": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 205,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:206": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 206,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:27": {
            "hits": 242785,
            "time": 0.186491,
            "time_per_hit": 7.681322981238544e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 27,
            "function": "fibonacci_recursive"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:28": {
            "hits": 121393,
            "time": 0.139553,
            "time_per_hit": 1.14959676422858e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 28,
            "function": "fibonacci_recursive"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:29": {
            "hits": 121392,
            "time": 0.444928,
            "time_per_hit": 3.665216818241729e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 29,
            "function": "fibonacci_recursive"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:34": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 34,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:36": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 36,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:37": {
            "hits": 25,
            "time": 2.1e-05,
            "time_per_hit": 8.4e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 37,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:38": {
            "hits": 24,
            "time": 1.8e-05,
            "time_per_hit": 7.5e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 38,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:39": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 39,
            "function": "fibonacci_iterative"
          }
        },
        "function_profiles": {
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:mkdtemp": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "mkdtemp",
            "total_time": 0.0012300000000000002,
            "total_hits": 20,
            "line_details": [
              {
                "line_number": 373,
                "hits": 2,
                "time_us": 385.0,
                "per_hit_us": 192.5,
                "line_content": "prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)"
              },
              {
                "line_number": 375,
                "hits": 2,
                "time_us": 76.0,
                "per_hit_us": 38.0,
                "line_content": "names = _get_candidate_names()"
              },
              {
                "line_number": 376,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if output_type is bytes:"
              },
              {
                "line_number": 379,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "for seq in range(TMP_MAX):"
              },
              {
                "line_number": 380,
                "hits": 2,
                "time_us": 263.0,
                "per_hit_us": 131.5,
                "line_content": "name = next(names)"
              },
              {
                "line_number": 381,
                "hits": 2,
                "time_us": 42.0,
                "per_hit_us": 21.0,
                "line_content": "file = _os.path.join(dir, prefix + name + suffix)"
              },
              {
                "line_number": 382,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "_sys.audit(\"tempfile.mkdtemp\", file)"
              },
              {
                "line_number": 383,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "try:"
              },
              {
                "line_number": 384,
                "hits": 2,
                "time_us": 421.0,
                "per_hit_us": 210.5,
                "line_content": "_os.mkdir(file, 0o700)"
              },
              {
                "line_number": 395,
                "hits": 2,
                "time_us": 35.0,
                "per_hit_us": 17.5,
                "line_content": "return _os.path.abspath(file)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_sanitize_params": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_sanitize_params",
            "total_time": 0.000309,
            "total_hits": 18,
            "line_details": [
              {
                "line_number": 116,
                "hits": 2,
                "time_us": 131.0,
                "per_hit_us": 65.5,
                "line_content": "output_type = _infer_return_type(prefix, suffix, dir)"
              },
              {
                "line_number": 117,
                "hits": 2,
                "time_us": 1.0,
                "per_hit_us": 0.5,
                "line_content": "if suffix is None:"
              },
              {
                "line_number": 118,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "suffix = output_type()"
              },
              {
                "line_number": 119,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if prefix is None:"
              },
              {
                "line_number": 120,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if output_type is str:"
              },
              {
                "line_number": 121,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "prefix = template"
              },
              {
                "line_number": 124,
                "hits": 2,
                "time_us": 1.0,
                "per_hit_us": 0.5,
                "line_content": "if dir is None:"
              },
              {
                "line_number": 125,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if output_type is str:"
              },
              {
                "line_number": 126,
                "hits": 2,
                "time_us": 166.0,
                "per_hit_us": 83.0,
                "line_content": "dir = gettempdir()"
              },
              {
                "line_number": 129,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "return prefix, suffix, dir, output_type"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_infer_return_type": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_infer_return_type",
            "total_time": 3.6e-05,
            "total_hits": 30,
            "line_details": [
              {
                "line_number": 87,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "return_type = None"
              },
              {
                "line_number": 88,
                "hits": 8,
                "time_us": 10.0,
                "per_hit_us": 1.25,
                "line_content": "for arg in args:"
              },
              {
                "line_number": 89,
                "hits": 6,
                "time_us": 5.0,
                "per_hit_us": 0.8333333333333334,
                "line_content": "if arg is None:"
              },
              {
                "line_number": 90,
                "hits": 5,
                "time_us": 2.0,
                "per_hit_us": 0.4,
                "line_content": "continue"
              },
              {
                "line_number": 92,
                "hits": 1,
                "time_us": 6.0,
                "per_hit_us": 6.0,
                "line_content": "if isinstance(arg, _os.PathLike):"
              },
              {
                "line_number": 95,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if isinstance(arg, bytes):"
              },
              {
                "line_number": 101,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if return_type is bytes:"
              },
              {
                "line_number": 104,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return_type = str"
              },
              {
                "line_number": 105,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if return_type is None:"
              },
              {
                "line_number": 106,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "if tempdir is None or isinstance(tempdir, str):"
              },
              {
                "line_number": 107,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "return str  # tempfile APIs return a str by default."
              },
              {
                "line_number": 111,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return return_type"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:gettempdir": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "gettempdir",
            "total_time": 7e-05,
            "total_hits": 2,
            "line_details": [
              {
                "line_number": 315,
                "hits": 2,
                "time_us": 70.0,
                "per_hit_us": 35.0,
                "line_content": "return _os.fsdecode(_gettempdir())"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_gettempdir": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_gettempdir",
            "total_time": 4.9999999999999996e-06,
            "total_hits": 4,
            "line_details": [
              {
                "line_number": 304,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if tempdir is None:"
              },
              {
                "line_number": 311,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "return tempdir"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_get_candidate_names": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_get_candidate_names",
            "total_time": 2e-06,
            "total_hits": 2,
            "line_details": [
              {
                "line_number": 233,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if _name_sequence is None:"
              },
              {
                "line_number": 240,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return _name_sequence"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:RLock": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "RLock",
            "total_time": 2e-06,
            "total_hits": 2,
            "line_details": [
              {
                "line_number": 133,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if _CRLock is None:"
              },
              {
                "line_number": 135,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return _CRLock(*args, **kwargs)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:_newname": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "_newname",
            "total_time": 3e-06,
            "total_hits": 1,
            "line_details": [
              {
                "line_number": 840,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "return name_template % _counter()"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:_make_invoke_excepthook": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "_make_invoke_excepthook",
            "total_time": 3e-06,
            "total_hits": 9,
            "line_details": [
              {
                "line_number": 1361,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "old_excepthook = excepthook"
              },
              {
                "line_number": 1362,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "old_sys_excepthook = _sys.excepthook"
              },
              {
                "line_number": 1363,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "if old_excepthook is None:"
              },
              {
                "line_number": 1365,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "if old_sys_excepthook is None:"
              },
              {
                "line_number": 1368,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "sys_exc_info = _sys.exc_info"
              },
              {
                "line_number": 1369,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "local_print = print"
              },
              {
                "line_number": 1370,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "local_sys = _sys"
              },
              {
                "line_number": 1372,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def invoke_excepthook(thread):"
              },
              {
                "line_number": 1404,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return invoke_excepthook"
              }
            ]
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py:register_trace_function": {
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py",
            "function": "register_trace_function",
            "total_time": 4e-05,
            "total_hits": 1,
            "line_details": [
              {
                "line_number": 124,
                "hits": 1,
                "time_us": 40.0,
                "per_hit_us": 40.0,
                "line_content": "_trace_multiplexer.register_profiler(profiler_name, trace_func)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:run_sample_workload": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "function": "run_sample_workload",
            "total_time": 17.812699,
            "total_hits": 6,
            "line_details": [
              {
                "line_number": 41,
                "hits": 1,
                "time_us": 1995.0,
                "per_hit_us": 1995.0,
                "line_content": "from sample_workload import mixed_workload"
              },
              {
                "line_number": 43,
                "hits": 1,
                "time_us": 5.0,
                "per_hit_us": 5.0,
                "line_content": "print(\"\ud83c\udfaf Executing workload to be profiled...\")"
              },
              {
                "line_number": 44,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "print(\"   (Replace this section with your own code)\")"
              },
              {
                "line_number": 45,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "print()"
              },
              {
                "line_number": 48,
                "hits": 1,
                "time_us": 17810692.0,
                "per_hit_us": 17810692.0,
                "line_content": "results = mixed_workload()"
              },
              {
                "line_number": 50,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "return results"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:_type_check": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "function": "_type_check",
            "total_time": 7.3e-05,
            "total_hits": 24,
            "line_details": [
              {
                "line_number": 187,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "invalid_generic_forms = (Generic, Protocol)"
              },
              {
                "line_number": 188,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if not allow_special_forms:"
              },
              {
                "line_number": 189,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "invalid_generic_forms += (ClassVar,)"
              },
              {
                "line_number": 190,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if is_argument:"
              },
              {
                "line_number": 191,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "invalid_generic_forms += (Final,)"
              },
              {
                "line_number": 193,
                "hits": 2,
                "time_us": 48.0,
                "per_hit_us": 24.0,
                "line_content": "arg = _type_convert(arg, module=module, allow_special_forms=allow_special_forms)"
              },
              {
                "line_number": 194,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if (isinstance(arg, _GenericAlias) and"
              },
              {
                "line_number": 197,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if arg in (Any, LiteralString, NoReturn, Never, Self, TypeAlias):"
              },
              {
                "line_number": 199,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if allow_special_forms and arg in (ClassVar, Final):"
              },
              {
                "line_number": 201,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "if isinstance(arg, _SpecialForm) or arg in (Generic, Protocol):"
              },
              {
                "line_number": 203,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if type(arg) is tuple:"
              },
              {
                "line_number": 205,
                "hits": 2,
                "time_us": 4.0,
                "per_hit_us": 2.0,
                "line_content": "return arg"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:_type_convert": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "function": "_type_convert",
            "total_time": 8.999999999999999e-06,
            "total_hits": 6,
            "line_details": [
              {
                "line_number": 168,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if arg is None:"
              },
              {
                "line_number": 170,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "if isinstance(arg, str):"
              },
              {
                "line_number": 172,
                "hits": 2,
                "time_us": 4.0,
                "per_hit_us": 2.0,
                "line_content": "return arg"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:_is_dunder": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "function": "_is_dunder",
            "total_time": 1e-05,
            "total_hits": 6,
            "line_details": [
              {
                "line_number": 1162,
                "hits": 6,
                "time_us": 10.0,
                "per_hit_us": 1.6666666666666667,
                "line_content": "return attr.startswith('__') and attr.endswith('__')"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:mixed_workload": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "mixed_workload",
            "total_time": 17.799575999999995,
            "total_hits": 30,
            "line_details": [
              {
                "line_number": 212,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "print(\"\ud83d\ude80 Running mixed workload demonstration...\")"
              },
              {
                "line_number": 214,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results = {}"
              },
              {
                "line_number": 217,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 218,
                "hits": 1,
                "time_us": 14366304.0,
                "per_hit_us": 14366304.0,
                "line_content": "cpu_result = cpu_intensive_calculation()"
              },
              {
                "line_number": 219,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "results[\"cpu_time\"] = time.time() - start_time"
              },
              {
                "line_number": 220,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"cpu_result_sample\"] = cpu_result"
              },
              {
                "line_number": 223,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 224,
                "hits": 1,
                "time_us": 1604090.0,
                "per_hit_us": 1604090.0,
                "line_content": "memory_data = memory_intensive_operations()"
              },
              {
                "line_number": 225,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"memory_time\"] = time.time() - start_time"
              },
              {
                "line_number": 226,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"memory_objects_created\"] = len(memory_data)"
              },
              {
                "line_number": 229,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 230,
                "hits": 1,
                "time_us": 342408.0,
                "per_hit_us": 342408.0,
                "line_content": "io_result = file_io_operations()"
              },
              {
                "line_number": 231,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "results[\"io_time\"] = time.time() - start_time"
              },
              {
                "line_number": 232,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"io_operations\"] = io_result"
              },
              {
                "line_number": 235,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 236,
                "hits": 1,
                "time_us": 131.0,
                "per_hit_us": 131.0,
                "line_content": "call_result = nested_function_calls()"
              },
              {
                "line_number": 237,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"call_time\"] = time.time() - start_time"
              },
              {
                "line_number": 238,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"call_result\"] = call_result"
              },
              {
                "line_number": 241,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 242,
                "hits": 1,
                "time_us": 58795.0,
                "per_hit_us": 58795.0,
                "line_content": "processing_result = data_processing_pipeline()"
              },
              {
                "line_number": 243,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"processing_time\"] = time.time() - start_time"
              },
              {
                "line_number": 244,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"processing_stats\"] = processing_result"
              },
              {
                "line_number": 247,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 248,
                "hits": 1,
                "time_us": 1427694.0,
                "per_hit_us": 1427694.0,
                "line_content": "fib_recursive = fibonacci_recursive(25)  # Small enough to not take forever"
              },
              {
                "line_number": 249,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"fib_recursive_time\"] = time.time() - start_time"
              },
              {
                "line_number": 251,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 252,
                "hits": 1,
                "time_us": 117.0,
                "per_hit_us": 117.0,
                "line_content": "fib_iterative = fibonacci_iterative(25)"
              },
              {
                "line_number": 253,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"fib_iterative_time\"] = time.time() - start_time"
              },
              {
                "line_number": 255,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"fib_results_match\"] = fib_recursive == fib_iterative"
              },
              {
                "line_number": 257,
                "hits": 1,
                "time_us": 4.0,
                "per_hit_us": 4.0,
                "line_content": "return results"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:cpu_intensive_calculation": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "cpu_intensive_calculation",
            "total_time": 12.400222000000001,
            "total_hits": 16100408,
            "line_details": [
              {
                "line_number": 44,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "print(\"\ud83d\udd25 Running CPU-intensive calculations...\")"
              },
              {
                "line_number": 47,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "size = 200"
              },
              {
                "line_number": 48,
                "hits": 1,
                "time_us": 21824.0,
                "per_hit_us": 21824.0,
                "line_content": "matrix_a = [[random.random() for _ in range(size)] for _ in range(size)]"
              },
              {
                "line_number": 49,
                "hits": 1,
                "time_us": 22870.0,
                "per_hit_us": 22870.0,
                "line_content": "matrix_b = [[random.random() for _ in range(size)] for _ in range(size)]"
              },
              {
                "line_number": 51,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "result = 0.0"
              },
              {
                "line_number": 52,
                "hits": 201,
                "time_us": 175.0,
                "per_hit_us": 0.8706467661691543,
                "line_content": "for i in range(size):"
              },
              {
                "line_number": 53,
                "hits": 40200,
                "time_us": 31369.0,
                "per_hit_us": 0.7803233830845772,
                "line_content": "for j in range(size):"
              },
              {
                "line_number": 54,
                "hits": 8040000,
                "time_us": 6172073.0,
                "per_hit_us": 0.7676707711442786,
                "line_content": "for k in range(size):"
              },
              {
                "line_number": 55,
                "hits": 8000000,
                "time_us": 6134855.0,
                "per_hit_us": 0.766856875,
                "line_content": "result += matrix_a[i][k] * matrix_b[k][j]"
              },
              {
                "line_number": 58,
                "hits": 10001,
                "time_us": 8029.0,
                "per_hit_us": 0.8028197180281972,
                "line_content": "for i in range(10000):"
              },
              {
                "line_number": 59,
                "hits": 10000,
                "time_us": 9012.0,
                "per_hit_us": 0.9012,
                "line_content": "result += math.sin(i) * math.cos(i) * math.sqrt(i + 1)"
              },
              {
                "line_number": 61,
                "hits": 1,
                "time_us": 11.0,
                "per_hit_us": 11.0,
                "line_content": "return result"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:memory_intensive_operations": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "memory_intensive_operations",
            "total_time": 1.49728,
            "total_hits": 700508,
            "line_details": [
              {
                "line_number": 66,
                "hits": 1,
                "time_us": 8.0,
                "per_hit_us": 8.0,
                "line_content": "print(\"\ud83d\udcbe Running memory-intensive operations...\")"
              },
              {
                "line_number": 69,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "large_list = []"
              },
              {
                "line_number": 70,
                "hits": 50001,
                "time_us": 39087.0,
                "per_hit_us": 0.7817243655126898,
                "line_content": "for i in range(50000):"
              },
              {
                "line_number": 71,
                "hits": 100000,
                "time_us": 77968.0,
                "per_hit_us": 0.7796799999999999,
                "line_content": "large_list.append("
              },
              {
                "line_number": 72,
                "hits": 50000,
                "time_us": 45199.0,
                "per_hit_us": 0.90398,
                "line_content": "{"
              },
              {
                "line_number": 73,
                "hits": 50000,
                "time_us": 36780.0,
                "per_hit_us": 0.7356,
                "line_content": "\"id\": i,"
              },
              {
                "line_number": 74,
                "hits": 50000,
                "time_us": 640160.0,
                "per_hit_us": 12.8032,
                "line_content": "\"data\": [random.random() for _ in range(20)],"
              },
              {
                "line_number": 75,
                "hits": 50000,
                "time_us": 59834.0,
                "per_hit_us": 1.19668,
                "line_content": "\"metadata\": {"
              },
              {
                "line_number": 76,
                "hits": 50000,
                "time_us": 40132.0,
                "per_hit_us": 0.80264,
                "line_content": "\"timestamp\": time.time(),"
              },
              {
                "line_number": 77,
                "hits": 50000,
                "time_us": 42566.0,
                "per_hit_us": 0.8513200000000001,
                "line_content": "\"category\": f\"category_{i % 10}\","
              },
              {
                "line_number": 78,
                "hits": 50000,
                "time_us": 169902.0,
                "per_hit_us": 3.39804,
                "line_content": "\"tags\": [f\"tag_{j}\" for j in range(i % 5 + 1)],"
              },
              {
                "line_number": 84,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "lookup_dict = {}"
              },
              {
                "line_number": 85,
                "hits": 50001,
                "time_us": 71867.0,
                "per_hit_us": 1.4373112537749246,
                "line_content": "for item in large_list:"
              },
              {
                "line_number": 86,
                "hits": 50000,
                "time_us": 71141.0,
                "per_hit_us": 1.42282,
                "line_content": "category = item[\"metadata\"][\"category\"]"
              },
              {
                "line_number": 87,
                "hits": 50000,
                "time_us": 72027.0,
                "per_hit_us": 1.44054,
                "line_content": "if category not in lookup_dict:"
              },
              {
                "line_number": 88,
                "hits": 10,
                "time_us": 6.0,
                "per_hit_us": 0.6,
                "line_content": "lookup_dict[category] = []"
              },
              {
                "line_number": 89,
                "hits": 50000,
                "time_us": 69358.0,
                "per_hit_us": 1.3871600000000002,
                "line_content": "lookup_dict[category].append(item)"
              },
              {
                "line_number": 92,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "temp_lists = []"
              },
              {
                "line_number": 93,
                "hits": 101,
                "time_us": 97.0,
                "per_hit_us": 0.9603960396039604,
                "line_content": "for i in range(100):"
              },
              {
                "line_number": 94,
                "hits": 100,
                "time_us": 60523.0,
                "per_hit_us": 605.23,
                "line_content": "temp_list = [random.random() for _ in range(1000)]"
              },
              {
                "line_number": 95,
                "hits": 100,
                "time_us": 88.0,
                "per_hit_us": 0.88,
                "line_content": "temp_lists.append(temp_list)"
              },
              {
                "line_number": 96,
                "hits": 100,
                "time_us": 88.0,
                "per_hit_us": 0.88,
                "line_content": "if len(temp_lists) > 10:"
              },
              {
                "line_number": 97,
                "hits": 90,
                "time_us": 438.0,
                "per_hit_us": 4.866666666666667,
                "line_content": "temp_lists.pop(0)  # Remove oldest"
              },
              {
                "line_number": 99,
                "hits": 1,
                "time_us": 8.0,
                "per_hit_us": 8.0,
                "line_content": "return large_list"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:file_io_operations": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "file_io_operations",
            "total_time": 0.34188899999999994,
            "total_hits": 192,
            "line_details": [
              {
                "line_number": 104,
                "hits": 1,
                "time_us": 5.0,
                "per_hit_us": 5.0,
                "line_content": "print(\"\ud83d\udcc1 Running file I/O operations...\")"
              },
              {
                "line_number": 107,
                "hits": 1,
                "time_us": 642.0,
                "per_hit_us": 642.0,
                "line_content": "temp_dir = tempfile.mkdtemp()"
              },
              {
                "line_number": 109,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "try:"
              },
              {
                "line_number": 111,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "file_data = {}"
              },
              {
                "line_number": 112,
                "hits": 11,
                "time_us": 12.0,
                "per_hit_us": 1.090909090909091,
                "line_content": "for i in range(10):"
              },
              {
                "line_number": 113,
                "hits": 10,
                "time_us": 226.0,
                "per_hit_us": 22.6,
                "line_content": "filename = os.path.join(temp_dir, f\"test_file_{i}.json\")"
              },
              {
                "line_number": 114,
                "hits": 10,
                "time_us": 8.0,
                "per_hit_us": 0.8,
                "line_content": "data = {"
              },
              {
                "line_number": 115,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "\"file_id\": i,"
              },
              {
                "line_number": 116,
                "hits": 10,
                "time_us": 5380.0,
                "per_hit_us": 538.0,
                "line_content": "\"content\": [random.random() for _ in range(1000)],"
              },
              {
                "line_number": 117,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "\"metadata\": {\"created\": time.time()},"
              },
              {
                "line_number": 120,
                "hits": 20,
                "time_us": 1848.0,
                "per_hit_us": 92.4,
                "line_content": "with open(filename, \"w\") as f:"
              },
              {
                "line_number": 121,
                "hits": 10,
                "time_us": 330351.0,
                "per_hit_us": 33035.1,
                "line_content": "json.dump(data, f)"
              },
              {
                "line_number": 123,
                "hits": 10,
                "time_us": 14.0,
                "per_hit_us": 1.4,
                "line_content": "file_data[filename] = data"
              },
              {
                "line_number": 126,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "read_data = {}"
              },
              {
                "line_number": 127,
                "hits": 11,
                "time_us": 14.0,
                "per_hit_us": 1.2727272727272727,
                "line_content": "for filename in file_data:"
              },
              {
                "line_number": 128,
                "hits": 20,
                "time_us": 257.0,
                "per_hit_us": 12.85,
                "line_content": "with open(filename, \"r\") as f:"
              },
              {
                "line_number": 129,
                "hits": 10,
                "time_us": 2461.0,
                "per_hit_us": 246.1,
                "line_content": "read_data[filename] = json.load(f)"
              },
              {
                "line_number": 132,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "total_values = 0"
              },
              {
                "line_number": 133,
                "hits": 11,
                "time_us": 9.0,
                "per_hit_us": 0.8181818181818181,
                "line_content": "for data in read_data.values():"
              },
              {
                "line_number": 134,
                "hits": 10,
                "time_us": 9.0,
                "per_hit_us": 0.9,
                "line_content": "total_values += len(data[\"content\"])"
              },
              {
                "line_number": 136,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return {\"files_processed\": len(read_data), \"total_values\": total_values}"
              },
              {
                "line_number": 140,
                "hits": 11,
                "time_us": 39.0,
                "per_hit_us": 3.5454545454545454,
                "line_content": "for filename in os.listdir(temp_dir):"
              },
              {
                "line_number": 141,
                "hits": 10,
                "time_us": 544.0,
                "per_hit_us": 54.4,
                "line_content": "os.remove(os.path.join(temp_dir, filename))"
              },
              {
                "line_number": 142,
                "hits": 1,
                "time_us": 45.0,
                "per_hit_us": 45.0,
                "line_content": "os.rmdir(temp_dir)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:dump": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "dump",
            "total_time": 0.326423,
            "total_hits": 20400,
            "line_details": [
              {
                "line_number": 165,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "if (not skipkeys and ensure_ascii and"
              },
              {
                "line_number": 166,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "check_circular and allow_nan and"
              },
              {
                "line_number": 167,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "cls is None and indent is None and separators is None and"
              },
              {
                "line_number": 168,
                "hits": 10,
                "time_us": 7.0,
                "per_hit_us": 0.7,
                "line_content": "default is None and not sort_keys and not kw):"
              },
              {
                "line_number": 169,
                "hits": 10,
                "time_us": 421.0,
                "per_hit_us": 42.1,
                "line_content": "iterable = _default_encoder.iterencode(obj)"
              },
              {
                "line_number": 179,
                "hits": 10180,
                "time_us": 316288.0,
                "per_hit_us": 31.069548133595287,
                "line_content": "for chunk in iterable:"
              },
              {
                "line_number": 180,
                "hits": 10170,
                "time_us": 9677.0,
                "per_hit_us": 0.9515240904621436,
                "line_content": "fp.write(chunk)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:_make_iterencode": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_make_iterencode",
            "total_time": 5.9e-05,
            "total_hits": 50,
            "line_details": [
              {
                "line_number": 275,
                "hits": 10,
                "time_us": 13.0,
                "per_hit_us": 1.3,
                "line_content": "if _indent is not None and not isinstance(_indent, str):"
              },
              {
                "line_number": 278,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "def _iterencode_list(lst, _current_indent_level):"
              },
              {
                "line_number": 334,
                "hits": 10,
                "time_us": 11.0,
                "per_hit_us": 1.1,
                "line_content": "def _iterencode_dict(dct, _current_indent_level):"
              },
              {
                "line_number": 414,
                "hits": 10,
                "time_us": 11.0,
                "per_hit_us": 1.1,
                "line_content": "def _iterencode(o, _current_indent_level):"
              },
              {
                "line_number": 443,
                "hits": 10,
                "time_us": 14.0,
                "per_hit_us": 1.4,
                "line_content": "return _iterencode"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:load": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "load",
            "total_time": 0.002356,
            "total_hits": 70,
            "line_details": [
              {
                "line_number": 293,
                "hits": 30,
                "time_us": 2317.0,
                "per_hit_us": 77.23333333333333,
                "line_content": "return loads(fp.read(),"
              },
              {
                "line_number": 294,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "cls=cls, object_hook=object_hook,"
              },
              {
                "line_number": 295,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "parse_float=parse_float, parse_int=parse_int,"
              },
              {
                "line_number": 296,
                "hits": 20,
                "time_us": 19.0,
                "per_hit_us": 0.95,
                "line_content": "parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:loads": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "loads",
            "total_time": 0.0019619999999999998,
            "total_hits": 60,
            "line_details": [
              {
                "line_number": 333,
                "hits": 10,
                "time_us": 9.0,
                "per_hit_us": 0.9,
                "line_content": "if isinstance(s, str):"
              },
              {
                "line_number": 334,
                "hits": 10,
                "time_us": 8.0,
                "per_hit_us": 0.8,
                "line_content": "if s.startswith('\\ufeff'):"
              },
              {
                "line_number": 343,
                "hits": 10,
                "time_us": 8.0,
                "per_hit_us": 0.8,
                "line_content": "if (cls is None and object_hook is None and"
              },
              {
                "line_number": 344,
                "hits": 10,
                "time_us": 7.0,
                "per_hit_us": 0.7,
                "line_content": "parse_int is None and parse_float is None and"
              },
              {
                "line_number": 345,
                "hits": 10,
                "time_us": 6.0,
                "per_hit_us": 0.6,
                "line_content": "parse_constant is None and object_pairs_hook is None and not kw):"
              },
              {
                "line_number": 346,
                "hits": 10,
                "time_us": 1924.0,
                "per_hit_us": 192.4,
                "line_content": "return _default_decoder.decode(s)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:nested_function_calls": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "nested_function_calls",
            "total_time": 6.7e-05,
            "total_hits": 7,
            "line_details": [
              {
                "line_number": 147,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "print(\"\ud83c\udf33 Running nested function calls...\")"
              },
              {
                "line_number": 149,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_1(n: int) -> int:"
              },
              {
                "line_number": 154,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_2(n: int) -> int:"
              },
              {
                "line_number": 159,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_3(n: int) -> int:"
              },
              {
                "line_number": 164,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_4(n: int) -> int:"
              },
              {
                "line_number": 169,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_5(n: int) -> int:"
              },
              {
                "line_number": 172,
                "hits": 1,
                "time_us": 59.0,
                "per_hit_us": 59.0,
                "line_content": "return level_1(8)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:data_processing_pipeline": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "data_processing_pipeline",
            "total_time": 0.05854400000000001,
            "total_hits": 19,
            "line_details": [
              {
                "line_number": 177,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "print(\"\u2699\ufe0f  Running data processing pipeline...\")"
              },
              {
                "line_number": 180,
                "hits": 1,
                "time_us": 5865.0,
                "per_hit_us": 5865.0,
                "line_content": "raw_data = [random.random() * 1000 for _ in range(10000)]"
              },
              {
                "line_number": 183,
                "hits": 1,
                "time_us": 5577.0,
                "per_hit_us": 5577.0,
                "line_content": "filtered_data = [x for x in raw_data if x > 100]"
              },
              {
                "line_number": 186,
                "hits": 1,
                "time_us": 5401.0,
                "per_hit_us": 5401.0,
                "line_content": "transformed_data = [math.log(x) if x > 1 else 0 for x in filtered_data]"
              },
              {
                "line_number": 189,
                "hits": 1,
                "time_us": 26.0,
                "per_hit_us": 26.0,
                "line_content": "sum_data = sum(transformed_data)"
              },
              {
                "line_number": 190,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "avg_data = sum_data / len(transformed_data) if transformed_data else 0"
              },
              {
                "line_number": 191,
                "hits": 1,
                "time_us": 69.0,
                "per_hit_us": 69.0,
                "line_content": "max_data = max(transformed_data) if transformed_data else 0"
              },
              {
                "line_number": 192,
                "hits": 1,
                "time_us": 62.0,
                "per_hit_us": 62.0,
                "line_content": "min_data = min(transformed_data) if transformed_data else 0"
              },
              {
                "line_number": 195,
                "hits": 2,
                "time_us": 41534.0,
                "per_hit_us": 20767.0,
                "line_content": "variance = sum((x - avg_data) ** 2 for x in transformed_data) / len("
              },
              {
                "line_number": 196,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "transformed_data"
              },
              {
                "line_number": 198,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "std_dev = math.sqrt(variance)"
              },
              {
                "line_number": 200,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "return {"
              },
              {
                "line_number": 201,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"count\": len(transformed_data),"
              },
              {
                "line_number": 202,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "\"sum\": sum_data,"
              },
              {
                "line_number": 203,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "\"average\": avg_data,"
              },
              {
                "line_number": 204,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "\"maximum\": max_data,"
              },
              {
                "line_number": 205,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "\"minimum\": min_data,"
              },
              {
                "line_number": 206,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "\"std_dev\": std_dev,"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:fibonacci_recursive": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "fibonacci_recursive",
            "total_time": 0.770972,
            "total_hits": 485570,
            "line_details": [
              {
                "line_number": 27,
                "hits": 242785,
                "time_us": 186491.0,
                "per_hit_us": 0.7681322981238544,
                "line_content": "if n <= 1:"
              },
              {
                "line_number": 28,
                "hits": 121393,
                "time_us": 139553.0,
                "per_hit_us": 1.14959676422858,
                "line_content": "return n"
              },
              {
                "line_number": 29,
                "hits": 121392,
                "time_us": 444928.0,
                "per_hit_us": 3.6652168182417295,
                "line_content": "return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:fibonacci_iterative": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "fibonacci_iterative",
            "total_time": 4.3e-05,
            "total_hits": 52,
            "line_details": [
              {
                "line_number": 34,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if n <= 1:"
              },
              {
                "line_number": 36,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "a, b = 0, 1"
              },
              {
                "line_number": 37,
                "hits": 25,
                "time_us": 21.0,
                "per_hit_us": 0.84,
                "line_content": "for _ in range(2, n + 1):"
              },
              {
                "line_number": 38,
                "hits": 24,
                "time_us": 18.0,
                "per_hit_us": 0.75,
                "line_content": "a, b = b, a + b"
              },
              {
                "line_number": 39,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return b"
              }
            ]
          }
        },
        "total_lines": 217,
        "total_hits": 17307497,
        "total_time": 51.01388399999999,
        "stats_output": "Timer unit: 1e-09 s\n\nTotal time: 0.770972 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: fibonacci_recursive at line 25\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    25                                           def fibonacci_recursive(n: int) -> int:\n    26                                               \"\"\"Recursive fibonacci - creates deep call stack for call profiling.\"\"\"\n    27    242785  186491000.0    768.1     24.2      if n <= 1:\n    28    121393  139553000.0   1149.6     18.1          return n\n    29    121392  444928000.0   3665.2     57.7      return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\nTotal time: 4.3e-05 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: fibonacci_iterative at line 32\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    32                                           def fibonacci_iterative(n: int) -> int:\n    33                                               \"\"\"Iterative fibonacci - more efficient, shows different call pattern.\"\"\"\n    34         1       1000.0   1000.0      2.3      if n <= 1:\n    35                                                   return n\n    36         1       2000.0   2000.0      4.7      a, b = 0, 1\n    37        25      21000.0    840.0     48.8      for _ in range(2, n + 1):\n    38        24      18000.0    750.0     41.9          a, b = b, a + b\n    39         1       1000.0   1000.0      2.3      return b\n\nTotal time: 12.4002 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: cpu_intensive_calculation at line 42\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    42                                           def cpu_intensive_calculation() -> float:\n    43                                               \"\"\"CPU-bound task - good for sampling profiler hotspot detection.\"\"\"\n    44         1       2000.0   2000.0      0.0      print(\"\ud83d\udd25 Running CPU-intensive calculations...\")\n    45                                           \n    46                                               # Matrix multiplication simulation\n    47         1       1000.0   1000.0      0.0      size = 200\n    48         1   21824000.0 2.18e+07      0.2      matrix_a = [[random.random() for _ in range(size)] for _ in range(size)]\n    49         1   22870000.0 2.29e+07      0.2      matrix_b = [[random.random() for _ in range(size)] for _ in range(size)]\n    50                                           \n    51         1       1000.0   1000.0      0.0      result = 0.0\n    52       201     175000.0    870.6      0.0      for i in range(size):\n    53     40200   31369000.0    780.3      0.3          for j in range(size):\n    54   8040000 6172073000.0    767.7     49.8              for k in range(size):\n    55   8000000 6134855000.0    766.9     49.5                  result += matrix_a[i][k] * matrix_b[k][j]\n    56                                           \n    57                                               # Mathematical computations\n    58     10001    8029000.0    802.8      0.1      for i in range(10000):\n    59     10000    9012000.0    901.2      0.1          result += math.sin(i) * math.cos(i) * math.sqrt(i + 1)\n    60                                           \n    61         1      11000.0  11000.0      0.0      return result\n\nTotal time: 1.49728 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: memory_intensive_operations at line 64\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    64                                           def memory_intensive_operations() -> List[Dict[str, Any]]:\n    65                                               \"\"\"Memory allocation patterns - good for memory profiler.\"\"\"\n    66         1       8000.0   8000.0      0.0      print(\"\ud83d\udcbe Running memory-intensive operations...\")\n    67                                           \n    68                                               # Large list allocation\n    69         1       1000.0   1000.0      0.0      large_list = []\n    70     50001   39087000.0    781.7      2.6      for i in range(50000):\n    71    100000   77968000.0    779.7      5.2          large_list.append(\n    72     50000   45199000.0    904.0      3.0              {\n    73     50000   36780000.0    735.6      2.5                  \"id\": i,\n    74     50000  640160000.0  12803.2     42.8                  \"data\": [random.random() for _ in range(20)],\n    75     50000   59834000.0   1196.7      4.0                  \"metadata\": {\n    76     50000   40132000.0    802.6      2.7                      \"timestamp\": time.time(),\n    77     50000   42566000.0    851.3      2.8                      \"category\": f\"category_{i % 10}\",\n    78     50000  169902000.0   3398.0     11.3                      \"tags\": [f\"tag_{j}\" for j in range(i % 5 + 1)],\n    79                                                           },\n    80                                                       }\n    81                                                   )\n    82                                           \n    83                                               # Dictionary operations\n    84         1       1000.0   1000.0      0.0      lookup_dict = {}\n    85     50001   71867000.0   1437.3      4.8      for item in large_list:\n    86     50000   71141000.0   1422.8      4.8          category = item[\"metadata\"][\"category\"]\n    87     50000   72027000.0   1440.5      4.8          if category not in lookup_dict:\n    88        10       6000.0    600.0      0.0              lookup_dict[category] = []\n    89     50000   69358000.0   1387.2      4.6          lookup_dict[category].append(item)\n    90                                           \n    91                                               # Memory churn - allocate and deallocate\n    92         1       1000.0   1000.0      0.0      temp_lists = []\n    93       101      97000.0    960.4      0.0      for i in range(100):\n    94       100   60523000.0 605230.0      4.0          temp_list = [random.random() for _ in range(1000)]\n    95       100      88000.0    880.0      0.0          temp_lists.append(temp_list)\n    96       100      88000.0    880.0      0.0          if len(temp_lists) > 10:\n    97        90     438000.0   4866.7      0.0              temp_lists.pop(0)  # Remove oldest\n    98                                           \n    99         1       8000.0   8000.0      0.0      return large_list\n\nTotal time: 0.341889 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: file_io_operations at line 102\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   102                                           def file_io_operations() -> Dict[str, Any]:\n   103                                               \"\"\"File I/O operations - shows I/O patterns.\"\"\"\n   104         1       5000.0   5000.0      0.0      print(\"\ud83d\udcc1 Running file I/O operations...\")\n   105                                           \n   106                                               # Create temporary files for I/O testing\n   107         1     642000.0 642000.0      0.2      temp_dir = tempfile.mkdtemp()\n   108                                           \n   109         1       1000.0   1000.0      0.0      try:\n   110                                                   # Write multiple files\n   111         1       1000.0   1000.0      0.0          file_data = {}\n   112        11      12000.0   1090.9      0.0          for i in range(10):\n   113        10     226000.0  22600.0      0.1              filename = os.path.join(temp_dir, f\"test_file_{i}.json\")\n   114        10       8000.0    800.0      0.0              data = {\n   115        10      10000.0   1000.0      0.0                  \"file_id\": i,\n   116        10    5380000.0 538000.0      1.6                  \"content\": [random.random() for _ in range(1000)],\n   117        10      10000.0   1000.0      0.0                  \"metadata\": {\"created\": time.time()},\n   118                                                       }\n   119                                           \n   120        20    1848000.0  92400.0      0.5              with open(filename, \"w\") as f:\n   121        10  330351000.0  3.3e+07     96.6                  json.dump(data, f)\n   122                                           \n   123        10      14000.0   1400.0      0.0              file_data[filename] = data\n   124                                           \n   125                                                   # Read files back\n   126         1       1000.0   1000.0      0.0          read_data = {}\n   127        11      14000.0   1272.7      0.0          for filename in file_data:\n   128        20     257000.0  12850.0      0.1              with open(filename, \"r\") as f:\n   129        10    2461000.0 246100.0      0.7                  read_data[filename] = json.load(f)\n   130                                           \n   131                                                   # Process data\n   132         1       1000.0   1000.0      0.0          total_values = 0\n   133        11       9000.0    818.2      0.0          for data in read_data.values():\n   134        10       9000.0    900.0      0.0              total_values += len(data[\"content\"])\n   135                                           \n   136         1       1000.0   1000.0      0.0          return {\"files_processed\": len(read_data), \"total_values\": total_values}\n   137                                           \n   138                                               finally:\n   139                                                   # Cleanup\n   140        11      39000.0   3545.5      0.0          for filename in os.listdir(temp_dir):\n   141        10     544000.0  54400.0      0.2              os.remove(os.path.join(temp_dir, filename))\n   142         1      45000.0  45000.0      0.0          os.rmdir(temp_dir)\n\nTotal time: 6.7e-05 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: nested_function_calls at line 145\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   145                                           def nested_function_calls() -> int:\n   146                                               \"\"\"Complex function call hierarchy - good for call profiler.\"\"\"\n   147         1       3000.0   3000.0      4.5      print(\"\ud83c\udf33 Running nested function calls...\")\n   148                                           \n   149         1       1000.0   1000.0      1.5      def level_1(n: int) -> int:\n   150                                                   if n <= 0:\n   151                                                       return 1\n   152                                                   return level_2(n - 1) + level_3(n - 1)\n   153                                           \n   154         1       1000.0   1000.0      1.5      def level_2(n: int) -> int:\n   155                                                   if n <= 0:\n   156                                                       return 2\n   157                                                   return level_4(n - 1) * 2\n   158                                           \n   159         1       1000.0   1000.0      1.5      def level_3(n: int) -> int:\n   160                                                   if n <= 0:\n   161                                                       return 3\n   162                                                   return level_4(n - 1) + level_5(n - 1)\n   163                                           \n   164         1       1000.0   1000.0      1.5      def level_4(n: int) -> int:\n   165                                                   if n <= 0:\n   166                                                       return 4\n   167                                                   return level_5(n - 1) + 1\n   168                                           \n   169         1       1000.0   1000.0      1.5      def level_5(n: int) -> int:\n   170                                                   return 5 + (n * 2 if n > 0 else 0)\n   171                                           \n   172         1      59000.0  59000.0     88.1      return level_1(8)\n\nTotal time: 0.058544 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: data_processing_pipeline at line 175\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   175                                           def data_processing_pipeline() -> Dict[str, float]:\n   176                                               \"\"\"Data processing with multiple stages - shows line-by-line execution.\"\"\"\n   177         1       3000.0   3000.0      0.0      print(\"\u2699\ufe0f  Running data processing pipeline...\")\n   178                                           \n   179                                               # Stage 1: Generate raw data\n   180         1    5865000.0 5.86e+06     10.0      raw_data = [random.random() * 1000 for _ in range(10000)]\n   181                                           \n   182                                               # Stage 2: Filter data\n   183         1    5577000.0 5.58e+06      9.5      filtered_data = [x for x in raw_data if x > 100]\n   184                                           \n   185                                               # Stage 3: Transform data\n   186         1    5401000.0  5.4e+06      9.2      transformed_data = [math.log(x) if x > 1 else 0 for x in filtered_data]\n   187                                           \n   188                                               # Stage 4: Aggregate data\n   189         1      26000.0  26000.0      0.0      sum_data = sum(transformed_data)\n   190         1       1000.0   1000.0      0.0      avg_data = sum_data / len(transformed_data) if transformed_data else 0\n   191         1      69000.0  69000.0      0.1      max_data = max(transformed_data) if transformed_data else 0\n   192         1      62000.0  62000.0      0.1      min_data = min(transformed_data) if transformed_data else 0\n   193                                           \n   194                                               # Stage 5: Statistical calculations\n   195         2   41534000.0 2.08e+07     70.9      variance = sum((x - avg_data) ** 2 for x in transformed_data) / len(\n   196         1       1000.0   1000.0      0.0          transformed_data\n   197                                               )\n   198         1       2000.0   2000.0      0.0      std_dev = math.sqrt(variance)\n   199                                           \n   200         1       2000.0   2000.0      0.0      return {\n   201         1       1000.0   1000.0      0.0          \"count\": len(transformed_data),\n   202         1          0.0      0.0      0.0          \"sum\": sum_data,\n   203         1          0.0      0.0      0.0          \"average\": avg_data,\n   204         1          0.0      0.0      0.0          \"maximum\": max_data,\n   205         1          0.0      0.0      0.0          \"minimum\": min_data,\n   206         1          0.0      0.0      0.0          \"std_dev\": std_dev,\n   207                                               }\n\nTotal time: 17.7996 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: mixed_workload at line 210\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   210                                           def mixed_workload() -> Dict[str, Any]:\n   211                                               \"\"\"Combined workload showing all patterns together.\"\"\"\n   212         1       3000.0   3000.0      0.0      print(\"\ud83d\ude80 Running mixed workload demonstration...\")\n   213                                           \n   214         1       1000.0   1000.0      0.0      results = {}\n   215                                           \n   216                                               # CPU work\n   217         1       1000.0   1000.0      0.0      start_time = time.time()\n   218         1     1.44e+10 1.44e+10     80.7      cpu_result = cpu_intensive_calculation()\n   219         1       3000.0   3000.0      0.0      results[\"cpu_time\"] = time.time() - start_time\n   220         1       1000.0   1000.0      0.0      results[\"cpu_result_sample\"] = cpu_result\n   221                                           \n   222                                               # Memory work\n   223         1       1000.0   1000.0      0.0      start_time = time.time()\n   224         1 1604090000.0  1.6e+09      9.0      memory_data = memory_intensive_operations()\n   225         1       2000.0   2000.0      0.0      results[\"memory_time\"] = time.time() - start_time\n   226         1       1000.0   1000.0      0.0      results[\"memory_objects_created\"] = len(memory_data)\n   227                                           \n   228                                               # I/O work\n   229         1       1000.0   1000.0      0.0      start_time = time.time()\n   230         1  342408000.0 3.42e+08      1.9      io_result = file_io_operations()\n   231         1       3000.0   3000.0      0.0      results[\"io_time\"] = time.time() - start_time\n   232         1       1000.0   1000.0      0.0      results[\"io_operations\"] = io_result\n   233                                           \n   234                                               # Function calls\n   235         1       1000.0   1000.0      0.0      start_time = time.time()\n   236         1     131000.0 131000.0      0.0      call_result = nested_function_calls()\n   237         1       2000.0   2000.0      0.0      results[\"call_time\"] = time.time() - start_time\n   238         1       1000.0   1000.0      0.0      results[\"call_result\"] = call_result\n   239                                           \n   240                                               # Data processing\n   241         1       1000.0   1000.0      0.0      start_time = time.time()\n   242         1   58795000.0 5.88e+07      0.3      processing_result = data_processing_pipeline()\n   243         1       2000.0   2000.0      0.0      results[\"processing_time\"] = time.time() - start_time\n   244         1       1000.0   1000.0      0.0      results[\"processing_stats\"] = processing_result\n   245                                           \n   246                                               # Fibonacci comparison\n   247         1       1000.0   1000.0      0.0      start_time = time.time()\n   248         1 1427694000.0 1.43e+09      8.0      fib_recursive = fibonacci_recursive(25)  # Small enough to not take forever\n   249         1       2000.0   2000.0      0.0      results[\"fib_recursive_time\"] = time.time() - start_time\n   250                                           \n   251         1       1000.0   1000.0      0.0      start_time = time.time()\n   252         1     117000.0 117000.0      0.0      fib_iterative = fibonacci_iterative(25)\n   253         1       1000.0   1000.0      0.0      results[\"fib_iterative_time\"] = time.time() - start_time\n   254                                           \n   255         1       2000.0   2000.0      0.0      results[\"fib_results_match\"] = fib_recursive == fib_iterative\n   256                                           \n   257         1       4000.0   4000.0      0.0      return results\n\nTotal time: 17.8127 s\nFile: /Users/Adam/Pycroscope/docs/examples/usage_example.py\nFunction: run_sample_workload at line 26\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    26                                           def run_sample_workload():\n    27                                               \"\"\"\n    28                                               REPLACE THIS SECTION WITH YOUR OWN CODE\n    29                                           \n    30                                               This function runs our sample workload script.\n    31                                               Users should replace this with their own code to profile.\n    32                                           \n    33                                               Examples of what you might put here:\n    34                                               - Import and call your own functions\n    35                                               - Run your data processing pipeline\n    36                                               - Execute your machine learning training\n    37                                               - Run your web scraping script\n    38                                               - Call your API processing logic\n    39                                               \"\"\"\n    40                                               # Import the sample workload (replace this with your own imports)\n    41         1    1995000.0    2e+06      0.0      from sample_workload import mixed_workload\n    42                                           \n    43         1       5000.0   5000.0      0.0      print(\"\ud83c\udfaf Executing workload to be profiled...\")\n    44         1       2000.0   2000.0      0.0      print(\"   (Replace this section with your own code)\")\n    45         1       2000.0   2000.0      0.0      print()\n    46                                           \n    47                                               # Execute the workload (replace this with your own function calls)\n    48         1     1.78e+10 1.78e+10    100.0      results = mixed_workload()\n    49                                           \n    50         1       3000.0   3000.0      0.0      return results\n\nTotal time: 4e-05 s\nFile: /Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py\nFunction: register_trace_function at line 122\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   122                                           def register_trace_function(profiler_name: str, trace_func: Callable):\n   123                                               \"\"\"Register a trace function with the global multiplexer.\"\"\"\n   124         1      40000.0  40000.0    100.0      _trace_multiplexer.register_profiler(profiler_name, trace_func)\n\nTotal time: 0 s\nFile: /Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py\nFunction: unregister_trace_function at line 127\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   127                                           def unregister_trace_function(profiler_name: str):\n   128                                               \"\"\"Unregister a trace function from the global multiplexer.\"\"\"\n   129                                               _trace_multiplexer.unregister_profiler(profiler_name)\n\nTotal time: 0.326423 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py\nFunction: dump at line 120\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   120                                           def dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True,\n   121                                                   allow_nan=True, cls=None, indent=None, separators=None,\n   122                                                   default=None, sort_keys=False, **kw):\n   123                                               \"\"\"Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n   124                                               ``.write()``-supporting file-like object).\n   125                                           \n   126                                               If ``skipkeys`` is true then ``dict`` keys that are not basic types\n   127                                               (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n   128                                               instead of raising a ``TypeError``.\n   129                                           \n   130                                               If ``ensure_ascii`` is false, then the strings written to ``fp`` can\n   131                                               contain non-ASCII characters if they appear in strings contained in\n   132                                               ``obj``. Otherwise, all such characters are escaped in JSON strings.\n   133                                           \n   134                                               If ``check_circular`` is false, then the circular reference check\n   135                                               for container types will be skipped and a circular reference will\n   136                                               result in an ``RecursionError`` (or worse).\n   137                                           \n   138                                               If ``allow_nan`` is false, then it will be a ``ValueError`` to\n   139                                               serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)\n   140                                               in strict compliance of the JSON specification, instead of using the\n   141                                               JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n   142                                           \n   143                                               If ``indent`` is a non-negative integer, then JSON array elements and\n   144                                               object members will be pretty-printed with that indent level. An indent\n   145                                               level of 0 will only insert newlines. ``None`` is the most compact\n   146                                               representation.\n   147                                           \n   148                                               If specified, ``separators`` should be an ``(item_separator, key_separator)``\n   149                                               tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n   150                                               ``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n   151                                               you should specify ``(',', ':')`` to eliminate whitespace.\n   152                                           \n   153                                               ``default(obj)`` is a function that should return a serializable version\n   154                                               of obj or raise TypeError. The default simply raises TypeError.\n   155                                           \n   156                                               If *sort_keys* is true (default: ``False``), then the output of\n   157                                               dictionaries will be sorted by key.\n   158                                           \n   159                                               To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n   160                                               ``.default()`` method to serialize additional types), specify it with\n   161                                               the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n   162                                           \n   163                                               \"\"\"\n   164                                               # cached encoder\n   165        10      10000.0   1000.0      0.0      if (not skipkeys and ensure_ascii and\n   166        10      10000.0   1000.0      0.0          check_circular and allow_nan and\n   167        10      10000.0   1000.0      0.0          cls is None and indent is None and separators is None and\n   168        10       7000.0    700.0      0.0          default is None and not sort_keys and not kw):\n   169        10     421000.0  42100.0      0.1          iterable = _default_encoder.iterencode(obj)\n   170                                               else:\n   171                                                   if cls is None:\n   172                                                       cls = JSONEncoder\n   173                                                   iterable = cls(skipkeys=skipkeys, ensure_ascii=ensure_ascii,\n   174                                                       check_circular=check_circular, allow_nan=allow_nan, indent=indent,\n   175                                                       separators=separators,\n   176                                                       default=default, sort_keys=sort_keys, **kw).iterencode(obj)\n   177                                               # could accelerate with writelines in some versions of Python, at\n   178                                               # a debuggability cost\n   179     10180  316288000.0  31069.5     96.9      for chunk in iterable:\n   180     10170    9677000.0    951.5      3.0          fp.write(chunk)\n\nTotal time: 0.002356 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py\nFunction: load at line 274\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   274                                           def load(fp, *, cls=None, object_hook=None, parse_float=None,\n   275                                                   parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n   276                                               \"\"\"Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n   277                                               a JSON document) to a Python object.\n   278                                           \n   279                                               ``object_hook`` is an optional function that will be called with the\n   280                                               result of any object literal decode (a ``dict``). The return value of\n   281                                               ``object_hook`` will be used instead of the ``dict``. This feature\n   282                                               can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n   283                                           \n   284                                               ``object_pairs_hook`` is an optional function that will be called with the\n   285                                               result of any object literal decoded with an ordered list of pairs.  The\n   286                                               return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n   287                                               This feature can be used to implement custom decoders.  If ``object_hook``\n   288                                               is also defined, the ``object_pairs_hook`` takes priority.\n   289                                           \n   290                                               To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n   291                                               kwarg; otherwise ``JSONDecoder`` is used.\n   292                                               \"\"\"\n   293        30    2317000.0  77233.3     98.3      return loads(fp.read(),\n   294        10      10000.0   1000.0      0.4          cls=cls, object_hook=object_hook,\n   295        10      10000.0   1000.0      0.4          parse_float=parse_float, parse_int=parse_int,\n   296        20      19000.0    950.0      0.8          parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)\n\nTotal time: 0.001962 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py\nFunction: loads at line 299\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   299                                           def loads(s, *, cls=None, object_hook=None, parse_float=None,\n   300                                                   parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n   301                                               \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n   302                                               containing a JSON document) to a Python object.\n   303                                           \n   304                                               ``object_hook`` is an optional function that will be called with the\n   305                                               result of any object literal decode (a ``dict``). The return value of\n   306                                               ``object_hook`` will be used instead of the ``dict``. This feature\n   307                                               can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n   308                                           \n   309                                               ``object_pairs_hook`` is an optional function that will be called with the\n   310                                               result of any object literal decoded with an ordered list of pairs.  The\n   311                                               return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n   312                                               This feature can be used to implement custom decoders.  If ``object_hook``\n   313                                               is also defined, the ``object_pairs_hook`` takes priority.\n   314                                           \n   315                                               ``parse_float``, if specified, will be called with the string\n   316                                               of every JSON float to be decoded. By default this is equivalent to\n   317                                               float(num_str). This can be used to use another datatype or parser\n   318                                               for JSON floats (e.g. decimal.Decimal).\n   319                                           \n   320                                               ``parse_int``, if specified, will be called with the string\n   321                                               of every JSON int to be decoded. By default this is equivalent to\n   322                                               int(num_str). This can be used to use another datatype or parser\n   323                                               for JSON integers (e.g. float).\n   324                                           \n   325                                               ``parse_constant``, if specified, will be called with one of the\n   326                                               following strings: -Infinity, Infinity, NaN.\n   327                                               This can be used to raise an exception if invalid JSON numbers\n   328                                               are encountered.\n   329                                           \n   330                                               To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n   331                                               kwarg; otherwise ``JSONDecoder`` is used.\n   332                                               \"\"\"\n   333        10       9000.0    900.0      0.5      if isinstance(s, str):\n   334        10       8000.0    800.0      0.4          if s.startswith('\\ufeff'):\n   335                                                       raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n   336                                                                             s, 0)\n   337                                               else:\n   338                                                   if not isinstance(s, (bytes, bytearray)):\n   339                                                       raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n   340                                                                       f'not {s.__class__.__name__}')\n   341                                                   s = s.decode(detect_encoding(s), 'surrogatepass')\n   342                                           \n   343        10       8000.0    800.0      0.4      if (cls is None and object_hook is None and\n   344        10       7000.0    700.0      0.4              parse_int is None and parse_float is None and\n   345        10       6000.0    600.0      0.3              parse_constant is None and object_pairs_hook is None and not kw):\n   346        10    1924000.0 192400.0     98.1          return _default_decoder.decode(s)\n   347                                               if cls is None:\n   348                                                   cls = JSONDecoder\n   349                                               if object_hook is not None:\n   350                                                   kw['object_hook'] = object_hook\n   351                                               if object_pairs_hook is not None:\n   352                                                   kw['object_pairs_hook'] = object_pairs_hook\n   353                                               if parse_float is not None:\n   354                                                   kw['parse_float'] = parse_float\n   355                                               if parse_int is not None:\n   356                                                   kw['parse_int'] = parse_int\n   357                                               if parse_constant is not None:\n   358                                                   kw['parse_constant'] = parse_constant\n   359                                               return cls(**kw).decode(s)\n\nTotal time: 5.9e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py\nFunction: _make_iterencode at line 260\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   260                                           def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n   261                                                   _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot,\n   262                                                   ## HACK: hand-optimized bytecode; turn globals into locals\n   263                                                   ValueError=ValueError,\n   264                                                   dict=dict,\n   265                                                   float=float,\n   266                                                   id=id,\n   267                                                   int=int,\n   268                                                   isinstance=isinstance,\n   269                                                   list=list,\n   270                                                   str=str,\n   271                                                   tuple=tuple,\n   272                                                   _intstr=int.__repr__,\n   273                                               ):\n   274                                           \n   275        10      13000.0   1300.0     22.0      if _indent is not None and not isinstance(_indent, str):\n   276                                                   _indent = ' ' * _indent\n   277                                           \n   278        10      10000.0   1000.0     16.9      def _iterencode_list(lst, _current_indent_level):\n   279                                                   if not lst:\n   280                                                       yield '[]'\n   281                                                       return\n   282                                                   if markers is not None:\n   283                                                       markerid = id(lst)\n   284                                                       if markerid in markers:\n   285                                                           raise ValueError(\"Circular reference detected\")\n   286                                                       markers[markerid] = lst\n   287                                                   buf = '['\n   288                                                   if _indent is not None:\n   289                                                       _current_indent_level += 1\n   290                                                       newline_indent = '\\n' + _indent * _current_indent_level\n   291                                                       separator = _item_separator + newline_indent\n   292                                                       buf += newline_indent\n   293                                                   else:\n   294                                                       newline_indent = None\n   295                                                       separator = _item_separator\n   296                                                   first = True\n   297                                                   for value in lst:\n   298                                                       if first:\n   299                                                           first = False\n   300                                                       else:\n   301                                                           buf = separator\n   302                                                       if isinstance(value, str):\n   303                                                           yield buf + _encoder(value)\n   304                                                       elif value is None:\n   305                                                           yield buf + 'null'\n   306                                                       elif value is True:\n   307                                                           yield buf + 'true'\n   308                                                       elif value is False:\n   309                                                           yield buf + 'false'\n   310                                                       elif isinstance(value, int):\n   311                                                           # Subclasses of int/float may override __repr__, but we still\n   312                                                           # want to encode them as integers/floats in JSON. One example\n   313                                                           # within the standard library is IntEnum.\n   314                                                           yield buf + _intstr(value)\n   315                                                       elif isinstance(value, float):\n   316                                                           # see comment above for int\n   317                                                           yield buf + _floatstr(value)\n   318                                                       else:\n   319                                                           yield buf\n   320                                                           if isinstance(value, (list, tuple)):\n   321                                                               chunks = _iterencode_list(value, _current_indent_level)\n   322                                                           elif isinstance(value, dict):\n   323                                                               chunks = _iterencode_dict(value, _current_indent_level)\n   324                                                           else:\n   325                                                               chunks = _iterencode(value, _current_indent_level)\n   326                                                           yield from chunks\n   327                                                   if newline_indent is not None:\n   328                                                       _current_indent_level -= 1\n   329                                                       yield '\\n' + _indent * _current_indent_level\n   330                                                   yield ']'\n   331                                                   if markers is not None:\n   332                                                       del markers[markerid]\n   333                                           \n   334        10      11000.0   1100.0     18.6      def _iterencode_dict(dct, _current_indent_level):\n   335                                                   if not dct:\n   336                                                       yield '{}'\n   337                                                       return\n   338                                                   if markers is not None:\n   339                                                       markerid = id(dct)\n   340                                                       if markerid in markers:\n   341                                                           raise ValueError(\"Circular reference detected\")\n   342                                                       markers[markerid] = dct\n   343                                                   yield '{'\n   344                                                   if _indent is not None:\n   345                                                       _current_indent_level += 1\n   346                                                       newline_indent = '\\n' + _indent * _current_indent_level\n   347                                                       item_separator = _item_separator + newline_indent\n   348                                                       yield newline_indent\n   349                                                   else:\n   350                                                       newline_indent = None\n   351                                                       item_separator = _item_separator\n   352                                                   first = True\n   353                                                   if _sort_keys:\n   354                                                       items = sorted(dct.items())\n   355                                                   else:\n   356                                                       items = dct.items()\n   357                                                   for key, value in items:\n   358                                                       if isinstance(key, str):\n   359                                                           pass\n   360                                                       # JavaScript is weakly typed for these, so it makes sense to\n   361                                                       # also allow them.  Many encoders seem to do something like this.\n   362                                                       elif isinstance(key, float):\n   363                                                           # see comment for int/float in _make_iterencode\n   364                                                           key = _floatstr(key)\n   365                                                       elif key is True:\n   366                                                           key = 'true'\n   367                                                       elif key is False:\n   368                                                           key = 'false'\n   369                                                       elif key is None:\n   370                                                           key = 'null'\n   371                                                       elif isinstance(key, int):\n   372                                                           # see comment for int/float in _make_iterencode\n   373                                                           key = _intstr(key)\n   374                                                       elif _skipkeys:\n   375                                                           continue\n   376                                                       else:\n   377                                                           raise TypeError(f'keys must be str, int, float, bool or None, '\n   378                                                                           f'not {key.__class__.__name__}')\n   379                                                       if first:\n   380                                                           first = False\n   381                                                       else:\n   382                                                           yield item_separator\n   383                                                       yield _encoder(key)\n   384                                                       yield _key_separator\n   385                                                       if isinstance(value, str):\n   386                                                           yield _encoder(value)\n   387                                                       elif value is None:\n   388                                                           yield 'null'\n   389                                                       elif value is True:\n   390                                                           yield 'true'\n   391                                                       elif value is False:\n   392                                                           yield 'false'\n   393                                                       elif isinstance(value, int):\n   394                                                           # see comment for int/float in _make_iterencode\n   395                                                           yield _intstr(value)\n   396                                                       elif isinstance(value, float):\n   397                                                           # see comment for int/float in _make_iterencode\n   398                                                           yield _floatstr(value)\n   399                                                       else:\n   400                                                           if isinstance(value, (list, tuple)):\n   401                                                               chunks = _iterencode_list(value, _current_indent_level)\n   402                                                           elif isinstance(value, dict):\n   403                                                               chunks = _iterencode_dict(value, _current_indent_level)\n   404                                                           else:\n   405                                                               chunks = _iterencode(value, _current_indent_level)\n   406                                                           yield from chunks\n   407                                                   if newline_indent is not None:\n   408                                                       _current_indent_level -= 1\n   409                                                       yield '\\n' + _indent * _current_indent_level\n   410                                                   yield '}'\n   411                                                   if markers is not None:\n   412                                                       del markers[markerid]\n   413                                           \n   414        10      11000.0   1100.0     18.6      def _iterencode(o, _current_indent_level):\n   415                                                   if isinstance(o, str):\n   416                                                       yield _encoder(o)\n   417                                                   elif o is None:\n   418                                                       yield 'null'\n   419                                                   elif o is True:\n   420                                                       yield 'true'\n   421                                                   elif o is False:\n   422                                                       yield 'false'\n   423                                                   elif isinstance(o, int):\n   424                                                       # see comment for int/float in _make_iterencode\n   425                                                       yield _intstr(o)\n   426                                                   elif isinstance(o, float):\n   427                                                       # see comment for int/float in _make_iterencode\n   428                                                       yield _floatstr(o)\n   429                                                   elif isinstance(o, (list, tuple)):\n   430                                                       yield from _iterencode_list(o, _current_indent_level)\n   431                                                   elif isinstance(o, dict):\n   432                                                       yield from _iterencode_dict(o, _current_indent_level)\n   433                                                   else:\n   434                                                       if markers is not None:\n   435                                                           markerid = id(o)\n   436                                                           if markerid in markers:\n   437                                                               raise ValueError(\"Circular reference detected\")\n   438                                                           markers[markerid] = o\n   439                                                       o = _default(o)\n   440                                                       yield from _iterencode(o, _current_indent_level)\n   441                                                       if markers is not None:\n   442                                                           del markers[markerid]\n   443        10      14000.0   1400.0     23.7      return _iterencode\n\nTotal time: 2.5e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/random.py\nFunction: Random.choices at line 454\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   454                                               def choices(self, population, weights=None, *, cum_weights=None, k=1):\n   455                                                   \"\"\"Return a k sized list of population elements chosen with replacement.\n   456                                           \n   457                                                   If the relative weights or cumulative weights are not specified,\n   458                                                   the selections are made with equal probability.\n   459                                           \n   460                                                   \"\"\"\n   461         2       3000.0   1500.0     12.0          random = self.random\n   462         2       1000.0    500.0      4.0          n = len(population)\n   463         2       1000.0    500.0      4.0          if cum_weights is None:\n   464         2       1000.0    500.0      4.0              if weights is None:\n   465         2       1000.0    500.0      4.0                  floor = _floor\n   466         2       2000.0   1000.0      8.0                  n += 0.0    # convert to float for a small speed improvement\n   467         2      16000.0   8000.0     64.0                  return [population[floor(random() * n)] for i in _repeat(None, k)]\n   468                                                       try:\n   469                                                           cum_weights = list(_accumulate(weights))\n   470                                                       except TypeError:\n   471                                                           if not isinstance(weights, int):\n   472                                                               raise\n   473                                                           k = weights\n   474                                                           raise TypeError(\n   475                                                               f'The number of choices must be a keyword argument: {k=}'\n   476                                                           ) from None\n   477                                                   elif weights is not None:\n   478                                                       raise TypeError('Cannot specify both weights and cumulative weights')\n   479                                                   if len(cum_weights) != n:\n   480                                                       raise ValueError('The number of weights does not match the population')\n   481                                                   total = cum_weights[-1] + 0.0   # convert to float\n   482                                                   if total <= 0.0:\n   483                                                       raise ValueError('Total of weights must be greater than zero')\n   484                                                   if not _isfinite(total):\n   485                                                       raise ValueError('Total of weights must be finite')\n   486                                                   bisect = _bisect\n   487                                                   hi = n - 1\n   488                                                   return [population[bisect(cum_weights, random() * total, 0, hi)]\n   489                                                           for i in _repeat(None, k)]\n\nTotal time: 3.6e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _infer_return_type at line 85\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    85                                           def _infer_return_type(*args):\n    86                                               \"\"\"Look at the type of all args and divine their implied return type.\"\"\"\n    87         2       3000.0   1500.0      8.3      return_type = None\n    88         8      10000.0   1250.0     27.8      for arg in args:\n    89         6       5000.0    833.3     13.9          if arg is None:\n    90         5       2000.0    400.0      5.6              continue\n    91                                           \n    92         1       6000.0   6000.0     16.7          if isinstance(arg, _os.PathLike):\n    93                                                       arg = _os.fspath(arg)\n    94                                           \n    95         1       1000.0   1000.0      2.8          if isinstance(arg, bytes):\n    96                                                       if return_type is str:\n    97                                                           raise TypeError(\"Can't mix bytes and non-bytes in \"\n    98                                                                           \"path components.\")\n    99                                                       return_type = bytes\n   100                                                   else:\n   101         1       1000.0   1000.0      2.8              if return_type is bytes:\n   102                                                           raise TypeError(\"Can't mix bytes and non-bytes in \"\n   103                                                                           \"path components.\")\n   104         1       1000.0   1000.0      2.8              return_type = str\n   105         2       2000.0   1000.0      5.6      if return_type is None:\n   106         1       2000.0   2000.0      5.6          if tempdir is None or isinstance(tempdir, str):\n   107         1       2000.0   2000.0      5.6              return str  # tempfile APIs return a str by default.\n   108                                                   else:\n   109                                                       # we could check for bytes but it'll fail later on anyway\n   110                                                       return bytes\n   111         1       1000.0   1000.0      2.8      return return_type\n\nTotal time: 0.000309 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _sanitize_params at line 114\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   114                                           def _sanitize_params(prefix, suffix, dir):\n   115                                               \"\"\"Common parameter processing for most APIs in this module.\"\"\"\n   116         2     131000.0  65500.0     42.4      output_type = _infer_return_type(prefix, suffix, dir)\n   117         2       1000.0    500.0      0.3      if suffix is None:\n   118         2       2000.0   1000.0      0.6          suffix = output_type()\n   119         2       2000.0   1000.0      0.6      if prefix is None:\n   120         1       1000.0   1000.0      0.3          if output_type is str:\n   121         1       1000.0   1000.0      0.3              prefix = template\n   122                                                   else:\n   123                                                       prefix = _os.fsencode(template)\n   124         2       1000.0    500.0      0.3      if dir is None:\n   125         2       2000.0   1000.0      0.6          if output_type is str:\n   126         2     166000.0  83000.0     53.7              dir = gettempdir()\n   127                                                   else:\n   128                                                       dir = gettempdirb()\n   129         2       2000.0   1000.0      0.6      return prefix, suffix, dir, output_type\n\nTotal time: 2e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _get_candidate_names at line 229\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   229                                           def _get_candidate_names():\n   230                                               \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\n   231                                           \n   232                                               global _name_sequence\n   233         1       1000.0   1000.0     50.0      if _name_sequence is None:\n   234                                                   _once_lock.acquire()\n   235                                                   try:\n   236                                                       if _name_sequence is None:\n   237                                                           _name_sequence = _RandomNameSequence()\n   238                                                   finally:\n   239                                                       _once_lock.release()\n   240         1       1000.0   1000.0     50.0      return _name_sequence\n\nTotal time: 5e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _gettempdir at line 301\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   301                                           def _gettempdir():\n   302                                               \"\"\"Private accessor for tempfile.tempdir.\"\"\"\n   303                                               global tempdir\n   304         2       2000.0   1000.0     40.0      if tempdir is None:\n   305                                                   _once_lock.acquire()\n   306                                                   try:\n   307                                                       if tempdir is None:\n   308                                                           tempdir = _get_default_tempdir()\n   309                                                   finally:\n   310                                                       _once_lock.release()\n   311         2       3000.0   1500.0     60.0      return tempdir\n\nTotal time: 7e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: gettempdir at line 313\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   313                                           def gettempdir():\n   314                                               \"\"\"Returns tempfile.tempdir as str.\"\"\"\n   315         2      70000.0  35000.0    100.0      return _os.fsdecode(_gettempdir())\n\nTotal time: 0.00123 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: mkdtemp at line 360\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   360                                           def mkdtemp(suffix=None, prefix=None, dir=None):\n   361                                               \"\"\"User-callable function to create and return a unique temporary\n   362                                               directory.  The return value is the pathname of the directory.\n   363                                           \n   364                                               Arguments are as for mkstemp, except that the 'text' argument is\n   365                                               not accepted.\n   366                                           \n   367                                               The directory is readable, writable, and searchable only by the\n   368                                               creating user.\n   369                                           \n   370                                               Caller is responsible for deleting the directory when done with it.\n   371                                               \"\"\"\n   372                                           \n   373         2     385000.0 192500.0     31.3      prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n   374                                           \n   375         2      76000.0  38000.0      6.2      names = _get_candidate_names()\n   376         2       2000.0   1000.0      0.2      if output_type is bytes:\n   377                                                   names = map(_os.fsencode, names)\n   378                                           \n   379         2       2000.0   1000.0      0.2      for seq in range(TMP_MAX):\n   380         2     263000.0 131500.0     21.4          name = next(names)\n   381         2      42000.0  21000.0      3.4          file = _os.path.join(dir, prefix + name + suffix)\n   382         2       2000.0   1000.0      0.2          _sys.audit(\"tempfile.mkdtemp\", file)\n   383         2       2000.0   1000.0      0.2          try:\n   384         2     421000.0 210500.0     34.2              _os.mkdir(file, 0o700)\n   385                                                   except FileExistsError:\n   386                                                       continue    # try again\n   387                                                   except PermissionError:\n   388                                                       # This exception is thrown when a directory with the chosen name\n   389                                                       # already exists on windows.\n   390                                                       if (_os.name == 'nt' and _os.path.isdir(dir) and\n   391                                                           _os.access(dir, _os.W_OK)):\n   392                                                           continue\n   393                                                       else:\n   394                                                           raise\n   395         2      35000.0  17500.0      2.8          return _os.path.abspath(file)\n   396                                           \n   397                                               raise FileExistsError(_errno.EEXIST,\n   398                                                                     \"No usable temporary directory name found\")\n\nTotal time: 2e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py\nFunction: RLock at line 124\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   124                                           def RLock(*args, **kwargs):\n   125                                               \"\"\"Factory function that returns a new reentrant lock.\n   126                                           \n   127                                               A reentrant lock must be released by the thread that acquired it. Once a\n   128                                               thread has acquired a reentrant lock, the same thread may acquire it again\n   129                                               without blocking; the thread must release it once for each time it has\n   130                                               acquired it.\n   131                                           \n   132                                               \"\"\"\n   133         1       1000.0   1000.0     50.0      if _CRLock is None:\n   134                                                   return _PyRLock(*args, **kwargs)\n   135         1       1000.0   1000.0     50.0      return _CRLock(*args, **kwargs)\n\nTotal time: 3e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py\nFunction: _newname at line 839\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   839                                           def _newname(name_template):\n   840         1       3000.0   3000.0    100.0      return name_template % _counter()\n\nTotal time: 3e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py\nFunction: _make_invoke_excepthook at line 1356\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  1356                                           def _make_invoke_excepthook():\n  1357                                               # Create a local namespace to ensure that variables remain alive\n  1358                                               # when _invoke_excepthook() is called, even if it is called late during\n  1359                                               # Python shutdown. It is mostly needed for daemon threads.\n  1360                                           \n  1361         1          0.0      0.0      0.0      old_excepthook = excepthook\n  1362         1          0.0      0.0      0.0      old_sys_excepthook = _sys.excepthook\n  1363         1          0.0      0.0      0.0      if old_excepthook is None:\n  1364                                                   raise RuntimeError(\"threading.excepthook is None\")\n  1365         1          0.0      0.0      0.0      if old_sys_excepthook is None:\n  1366                                                   raise RuntimeError(\"sys.excepthook is None\")\n  1367                                           \n  1368         1          0.0      0.0      0.0      sys_exc_info = _sys.exc_info\n  1369         1          0.0      0.0      0.0      local_print = print\n  1370         1       1000.0   1000.0     33.3      local_sys = _sys\n  1371                                           \n  1372         1       1000.0   1000.0     33.3      def invoke_excepthook(thread):\n  1373                                                   global excepthook\n  1374                                                   try:\n  1375                                                       hook = excepthook\n  1376                                                       if hook is None:\n  1377                                                           hook = old_excepthook\n  1378                                           \n  1379                                                       args = ExceptHookArgs([*sys_exc_info(), thread])\n  1380                                           \n  1381                                                       hook(args)\n  1382                                                   except Exception as exc:\n  1383                                                       exc.__suppress_context__ = True\n  1384                                                       del exc\n  1385                                           \n  1386                                                       if local_sys is not None and local_sys.stderr is not None:\n  1387                                                           stderr = local_sys.stderr\n  1388                                                       else:\n  1389                                                           stderr = thread._stderr\n  1390                                           \n  1391                                                       local_print(\"Exception in threading.excepthook:\",\n  1392                                                                   file=stderr, flush=True)\n  1393                                           \n  1394                                                       if local_sys is not None and local_sys.excepthook is not None:\n  1395                                                           sys_excepthook = local_sys.excepthook\n  1396                                                       else:\n  1397                                                           sys_excepthook = old_sys_excepthook\n  1398                                           \n  1399                                                       sys_excepthook(*sys_exc_info())\n  1400                                                   finally:\n  1401                                                       # Break reference cycle (exception stored in a variable)\n  1402                                                       args = None\n  1403                                           \n  1404         1       1000.0   1000.0     33.3      return invoke_excepthook\n\nTotal time: 9e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py\nFunction: _type_convert at line 166\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   166                                           def _type_convert(arg, module=None, *, allow_special_forms=False):\n   167                                               \"\"\"For converting None to type(None), and strings to ForwardRef.\"\"\"\n   168         2       2000.0   1000.0     22.2      if arg is None:\n   169                                                   return type(None)\n   170         2       3000.0   1500.0     33.3      if isinstance(arg, str):\n   171                                                   return ForwardRef(arg, module=module, is_class=allow_special_forms)\n   172         2       4000.0   2000.0     44.4      return arg\n\nTotal time: 7.3e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py\nFunction: _type_check at line 175\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   175                                           def _type_check(arg, msg, is_argument=True, module=None, *, allow_special_forms=False):\n   176                                               \"\"\"Check that the argument is a type, and return it (internal helper).\n   177                                           \n   178                                               As a special case, accept None and return type(None) instead. Also wrap strings\n   179                                               into ForwardRef instances. Consider several corner cases, for example plain\n   180                                               special forms like Union are not valid, while Union[int, str] is OK, etc.\n   181                                               The msg argument is a human-readable error message, e.g.::\n   182                                           \n   183                                                   \"Union[arg, ...]: arg should be a type.\"\n   184                                           \n   185                                               We append the repr() of the actual value (truncated to 100 chars).\n   186                                               \"\"\"\n   187         2       2000.0   1000.0      2.7      invalid_generic_forms = (Generic, Protocol)\n   188         2       2000.0   1000.0      2.7      if not allow_special_forms:\n   189         2       2000.0   1000.0      2.7          invalid_generic_forms += (ClassVar,)\n   190         2       2000.0   1000.0      2.7          if is_argument:\n   191         2       2000.0   1000.0      2.7              invalid_generic_forms += (Final,)\n   192                                           \n   193         2      48000.0  24000.0     65.8      arg = _type_convert(arg, module=module, allow_special_forms=allow_special_forms)\n   194         2       2000.0   1000.0      2.7      if (isinstance(arg, _GenericAlias) and\n   195                                                       arg.__origin__ in invalid_generic_forms):\n   196                                                   raise TypeError(f\"{arg} is not valid as type argument\")\n   197         2       2000.0   1000.0      2.7      if arg in (Any, LiteralString, NoReturn, Never, Self, TypeAlias):\n   198                                                   return arg\n   199         2       2000.0   1000.0      2.7      if allow_special_forms and arg in (ClassVar, Final):\n   200                                                   return arg\n   201         2       3000.0   1500.0      4.1      if isinstance(arg, _SpecialForm) or arg in (Generic, Protocol):\n   202                                                   raise TypeError(f\"Plain {arg} is not valid as type argument\")\n   203         2       2000.0   1000.0      2.7      if type(arg) is tuple:\n   204                                                   raise TypeError(f\"{msg} Got {arg!r:.100}.\")\n   205         2       4000.0   2000.0      5.5      return arg\n\nTotal time: 1e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py\nFunction: _is_dunder at line 1161\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  1161                                           def _is_dunder(attr):\n  1162         6      10000.0   1666.7    100.0      return attr.startswith('__') and attr.endswith('__')\n\n",
        "duration": 17.815719958016416,
        "metadata": {
          "profiler": "line_profiler",
          "status": "completed",
          "functions_profiled": 26,
          "lines_profiled": 217,
          "note": "Automatic tracing of all executed code"
        }
      },
      "start_time": "2025-07-26T15:02:14.228368",
      "end_time": "2025-07-26T15:02:32.043948",
      "duration": 17.81558,
      "success": true,
      "error_message": null
    },
    "memory": {
      "profiler_type": "memory",
      "data": {
        "samples": [
          {
            "timestamp": 1753567334.2305138,
            "rss_mb": 105.953125,
            "vms_mb": 401324.9375,
            "percent": 0.32334327697753906
          },
          {
            "timestamp": 1753567334.230867,
            "rss_mb": 106.015625,
            "vms_mb": 401341.0,
            "percent": 0.3235340118408203
          },
          {
            "timestamp": 1753567334.2497,
            "rss_mb": 107.25,
            "vms_mb": 401342.0,
            "percent": 0.327301025390625
          },
          {
            "timestamp": 1753567334.268555,
            "rss_mb": 108.625,
            "vms_mb": 401343.0,
            "percent": 0.3314971923828125
          },
          {
            "timestamp": 1753567334.287414,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.306238,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.325056,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.3438878,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.3627079,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.381535,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.400352,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.419173,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.4379861,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.456795,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.475604,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.494445,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.513317,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.532185,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.551054,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.569911,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.588758,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.60763,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.625782,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.644503,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.663371,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.682213,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.701055,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.7174542,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.7362938,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.75512,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.773948,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.7927659,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.811146,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.829965,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.848775,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.86758,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.8858502,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.903841,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.9226618,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.941477,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.960282,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.97909,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567334.9979,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33354759216308594
          },
          {
            "timestamp": 1753567335.016709,
            "rss_mb": 109.296875,
            "vms_mb": 401343.0,
            "percent": 0.33359527587890625
          },
          {
            "timestamp": 1753567335.03552,
            "rss_mb": 109.3125,
            "vms_mb": 401343.0,
            "percent": 0.33359527587890625
          },
          {
            "timestamp": 1753567335.0543292,
            "rss_mb": 109.3125,
            "vms_mb": 401343.0,
            "percent": 0.33359527587890625
          },
          {
            "timestamp": 1753567335.073136,
            "rss_mb": 109.3125,
            "vms_mb": 401343.0,
            "percent": 0.33359527587890625
          },
          {
            "timestamp": 1753567335.091938,
            "rss_mb": 109.3125,
            "vms_mb": 401343.0,
            "percent": 0.33359527587890625
          },
          {
            "timestamp": 1753567335.110744,
            "rss_mb": 109.3125,
            "vms_mb": 401343.0,
            "percent": 0.33359527587890625
          },
          {
            "timestamp": 1753567335.129554,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.1483562,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.166573,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.185396,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.204211,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.221484,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.240296,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.2591019,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.2779038,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.2967072,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.315517,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.334322,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.353129,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.371935,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.390746,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.4095528,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.428364,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.447171,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.465973,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.484788,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.501099,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.5199099,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.537834,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.5566442,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.5754519,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.5942552,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.613055,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.63186,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.650698,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.6695628,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.68841,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.707238,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.726065,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.744969,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.763789,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.782602,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.801423,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.820234,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.839039,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.857845,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.8766541,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.8954618,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.913592,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.9324028,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.95121,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.970017,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567335.988412,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.00722,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.026028,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.044839,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.063645,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.082456,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.101258,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.1200671,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.138869,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.1576698,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.176472,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.1952798,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.214085,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.232888,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.251689,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.2705011,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.2893062,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.308115,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.326916,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.34572,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.3645282,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.3833358,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.402144,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.4209468,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.439754,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.458561,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.477369,
            "rss_mb": 109.328125,
            "vms_mb": 401343.0,
            "percent": 0.33364295959472656
          },
          {
            "timestamp": 1753567336.496174,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.5149848,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.533793,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.552598,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.5714052,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.590213,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.6090171,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.627826,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.646634,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.665469,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.6843,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.702796,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.721608,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.740413,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.759226,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.777844,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.796677,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.815495,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.834301,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.853111,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.8719249,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.890732,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.9095402,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.9283578,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.947173,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.965984,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567336.984784,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.003146,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.0219479,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.0407512,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.059561,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.0783732,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.097196,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.116003,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.133572,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.152385,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.171196,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.19001,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.208816,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.227627,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.2464352,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.2652428,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.284052,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.302857,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.321676,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.3404958,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.359314,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.378129,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.396935,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.415751,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.434568,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.4533818,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.472186,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.490991,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3336906433105469
          },
          {
            "timestamp": 1753567337.509804,
            "rss_mb": 109.34375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.5286121,
            "rss_mb": 109.359375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.5474188,
            "rss_mb": 109.359375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.5662239,
            "rss_mb": 109.359375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.585036,
            "rss_mb": 109.359375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.603847,
            "rss_mb": 109.359375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.6226509,
            "rss_mb": 109.359375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.6414561,
            "rss_mb": 109.359375,
            "vms_mb": 401343.0,
            "percent": 0.3337383270263672
          },
          {
            "timestamp": 1753567337.660287,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.677249,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.696095,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.714905,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.7337348,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.7525592,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.771368,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.790176,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.808984,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.8277912,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.8465972,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.865406,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.884215,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.903023,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.921833,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.940641,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.959441,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.978249,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567337.997057,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.015865,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.034672,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.053489,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.0723011,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.091108,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.109911,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.128719,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.146579,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.165395,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.184196,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.202791,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.221604,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.2404091,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.259207,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.278015,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.29682,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.315627,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.334435,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.3532412,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.3720489,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.390856,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.409663,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.426835,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.445645,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.464451,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.48326,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.502066,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.520868,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.539675,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.558399,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.577215,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.596019,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.6148238,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.633632,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.652448,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.671287,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.690112,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.708925,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.727746,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.7465549,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.7653692,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.7841861,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.803008,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.821811,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.84062,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.8594291,
            "rss_mb": 109.390625,
            "vms_mb": 401344.0,
            "percent": 0.3338336944580078
          },
          {
            "timestamp": 1753567338.878237,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567338.897044,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567338.91585,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567338.934653,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567338.9534621,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567338.972268,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567338.991076,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567339.00988,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.3338813781738281
          },
          {
            "timestamp": 1753567339.028688,
            "rss_mb": 109.40625,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.047504,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.066307,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.085144,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.103961,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.122771,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.141578,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.1603851,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.179203,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.198011,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.21682,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.23563,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.254435,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.273238,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.292045,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.310852,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.329655,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.3484669,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.367272,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.386081,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.404887,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.423693,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.442506,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.461312,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.4801211,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.498933,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.5177422,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.5365472,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.555351,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.574162,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.592979,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.611804,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.6306078,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.649437,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.668289,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.686508,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.705334,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.724146,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.7429519,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.7611158,
            "rss_mb": 109.421875,
            "vms_mb": 401344.0,
            "percent": 0.33392906188964844
          },
          {
            "timestamp": 1753567339.779333,
            "rss_mb": 109.46875,
            "vms_mb": 401345.0,
            "percent": 0.3340721130371094
          },
          {
            "timestamp": 1753567339.7981498,
            "rss_mb": 109.46875,
            "vms_mb": 401345.0,
            "percent": 0.3340721130371094
          },
          {
            "timestamp": 1753567339.816968,
            "rss_mb": 109.46875,
            "vms_mb": 401345.0,
            "percent": 0.3340721130371094
          },
          {
            "timestamp": 1753567339.835776,
            "rss_mb": 109.46875,
            "vms_mb": 401345.0,
            "percent": 0.3340721130371094
          },
          {
            "timestamp": 1753567339.854589,
            "rss_mb": 109.46875,
            "vms_mb": 401345.0,
            "percent": 0.3340721130371094
          },
          {
            "timestamp": 1753567339.8734112,
            "rss_mb": 109.46875,
            "vms_mb": 401345.0,
            "percent": 0.3340721130371094
          },
          {
            "timestamp": 1753567339.892231,
            "rss_mb": 109.46875,
            "vms_mb": 401345.0,
            "percent": 0.3340721130371094
          },
          {
            "timestamp": 1753567339.911051,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567339.9298592,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567339.948666,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567339.967475,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567339.9862862,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.0051048,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.023914,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.042721,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.0615308,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.0803368,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.099145,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.117952,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.13676,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.1555562,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.174366,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.193182,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.211112,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.2299268,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.248734,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.267539,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.286346,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.3051531,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.32396,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.342762,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.3615701,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.380377,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.399183,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.4179919,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.436797,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.455612,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.47442,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.493227,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.512036,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.530844,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.549645,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.568453,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.5872588,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.6060789,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.624898,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.6437,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.662528,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.681355,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.7001688,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.718994,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.737812,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.7566211,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.775431,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.794237,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.813045,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.8318489,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.850656,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.869462,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.888273,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.907079,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.92432,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.943132,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.961935,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.9807382,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567340.999351,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.018168,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.036973,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.055786,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.074594,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.0934021,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.112214,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.131021,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.149827,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.168631,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.187434,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.206238,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.225047,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.243849,
            "rss_mb": 109.484375,
            "vms_mb": 401345.0,
            "percent": 0.3341197967529297
          },
          {
            "timestamp": 1753567341.262658,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.281461,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.300262,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.319068,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.337876,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.356687,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.3754911,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.394304,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.413111,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.4309618,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.4497721,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.468577,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.4873831,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.50619,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.525003,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.543811,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.56262,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.581422,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.600225,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.617339,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.636152,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.654954,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.6737878,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.692356,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.7110898,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.729908,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.748715,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.767524,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.784805,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.803624,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.8224351,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.841242,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.860063,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.8788831,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.897693,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.916499,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.935301,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.9541068,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.972919,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567341.991731,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.010535,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.029342,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.048147,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.066955,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.085762,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.104566,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.123373,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.142171,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.160984,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.1798122,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.198623,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.2174258,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.2360792,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.2548878,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.27371,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.33416748046875
          },
          {
            "timestamp": 1753567342.292523,
            "rss_mb": 109.5,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.311326,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.330134,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.348941,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.367745,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.38655,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.4053571,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.423587,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.4423969,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.4612029,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.480005,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.498815,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.517626,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.536439,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.555253,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.57406,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.5928671,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.611677,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.6304939,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.6493208,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.6681988,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.686198,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.705013,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.723823,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.7426271,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.7610738,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.7798982,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.798731,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.817543,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.836349,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.855156,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.873966,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.892779,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.911586,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.930391,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.949193,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.968004,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567342.986807,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.00561,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.024412,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.043222,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.06203,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.080837,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.099644,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.118454,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.13726,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.156068,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.174874,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.193702,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.2125142,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.231321,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.250127,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.2689412,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.287755,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.306562,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.325366,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.34417,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.362977,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.381784,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.4005902,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.419397,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.438205,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.457012,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.475817,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.4946282,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.513437,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.532243,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.551049,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.569856,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.588653,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.607455,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.626258,
            "rss_mb": 109.515625,
            "vms_mb": 401345.0,
            "percent": 0.3342151641845703
          },
          {
            "timestamp": 1753567343.645078,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.663904,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.682731,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.7006521,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.719475,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.7382998,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.7571142,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.7759209,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.7947361,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.3342628479003906
          },
          {
            "timestamp": 1753567343.813542,
            "rss_mb": 109.53125,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.8323488,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.851146,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.869954,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.8887591,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.907573,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.9264388,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.945243,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.964054,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567343.982864,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.00167,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.0204759,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.039285,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.0580878,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.0769,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.0957062,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.114509,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.1333141,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.152121,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.170916,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.1897202,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.2085261,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.227333,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.246135,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.264941,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.283749,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.302557,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.3213599,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.3401668,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.3589702,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.3777769,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.396584,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.415392,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.434199,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.453005,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.471811,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.490617,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.50942,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.5282261,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.547029,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.565836,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.584641,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.603447,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.621705,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.640516,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.659339,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.677303,
            "rss_mb": 109.546875,
            "vms_mb": 401345.0,
            "percent": 0.33431053161621094
          },
          {
            "timestamp": 1753567344.6961339,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.7149591,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.7337759,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.752584,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.7713861,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.790196,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.809004,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.827817,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.846632,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.865442,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.8842509,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.9030569,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.921866,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.9406688,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.959478,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.978282,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567344.9970849,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.015889,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.0347,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.0535061,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.072313,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.091124,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.1099231,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.12873,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.1475358,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.166343,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.185148,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.203962,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.222768,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.24158,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.2603872,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.279194,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.2980008,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.3168068,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.335614,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.354424,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.373229,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.392035,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.410841,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.429648,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.4484532,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.467262,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.4860659,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.504887,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.523704,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.5425081,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.561313,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.5801191,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.598926,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.617731,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.636543,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.65538,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.674219,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.693038,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.711854,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.730668,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.74949,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.768299,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.7861161,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.8049212,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.8237288,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.84254,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.861349,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.8801541,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.8989608,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.91777,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.936569,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.9553752,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.974182,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567345.9929888,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567346.011816,
            "rss_mb": 109.5625,
            "vms_mb": 401345.0,
            "percent": 0.33435821533203125
          },
          {
            "timestamp": 1753567346.030635,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.04945,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.068265,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.087073,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.105885,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.124695,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.143502,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.1623108,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.181111,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.1999218,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.218737,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.237548,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.256354,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.2751591,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.293967,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.312775,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.331583,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.3503869,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.369196,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.3880022,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.406809,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.425614,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.444421,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.4632242,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.482031,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.500842,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.5196512,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.5384629,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.557269,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.576071,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.594878,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.613682,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.6324842,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.651306,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.6680288,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.68685,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.705676,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.7244859,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.743298,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.76211,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.780917,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.7997289,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.81854,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.8373508,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.856163,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.8749719,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.893784,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.9125912,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.931395,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.950201,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.9690082,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567346.987817,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567347.006619,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567347.025418,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567347.044229,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567347.0630322,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.33440589904785156
          },
          {
            "timestamp": 1753567347.081841,
            "rss_mb": 109.578125,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.100648,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.119454,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.138266,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.1570728,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.175882,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.194697,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.213509,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.2323148,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.251122,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.269927,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.288739,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.3075578,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.3263721,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.345176,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.363982,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.382784,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.401588,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.4203908,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.439198,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.458008,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.4768178,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.495618,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.514422,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.53323,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.5520341,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.570841,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.58965,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.60846,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.6272671,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.64609,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.664924,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.683753,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.70259,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.721408,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.740246,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.7590559,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.777867,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.796134,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.814944,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.83375,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.852557,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.8713632,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.890173,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.908978,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.9277902,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.946595,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.965399,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567347.984206,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.003009,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.0218198,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.040628,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.059433,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.0782452,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.097051,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.1158552,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.1346612,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.1534941,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.172317,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.191124,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.209926,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.227704,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.246519,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.265339,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.2841542,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.3029509,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.3217611,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.3405828,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.3594072,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.376661,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.395506,
            "rss_mb": 109.59375,
            "vms_mb": 401345.0,
            "percent": 0.3344535827636719
          },
          {
            "timestamp": 1753567348.4143481,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.433214,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.45207,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.470913,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.489768,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.508597,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.527437,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.543926,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.5627499,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.581606,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.599784,
            "rss_mb": 109.609375,
            "vms_mb": 401345.0,
            "percent": 0.3345012664794922
          },
          {
            "timestamp": 1753567348.6184561,
            "rss_mb": 109.6875,
            "vms_mb": 401345.0,
            "percent": 0.33473968505859375
          },
          {
            "timestamp": 1753567348.635039,
            "rss_mb": 109.6875,
            "vms_mb": 401345.0,
            "percent": 0.33473968505859375
          },
          {
            "timestamp": 1753567348.653923,
            "rss_mb": 110.8125,
            "vms_mb": 401347.0,
            "percent": 0.33817291259765625
          },
          {
            "timestamp": 1753567348.6794062,
            "rss_mb": 111.546875,
            "vms_mb": 401347.0,
            "percent": 0.34041404724121094
          },
          {
            "timestamp": 1753567348.698276,
            "rss_mb": 112.84375,
            "vms_mb": 401349.0,
            "percent": 0.3443717956542969
          },
          {
            "timestamp": 1753567348.7171168,
            "rss_mb": 114.03125,
            "vms_mb": 401350.0,
            "percent": 0.3479957580566406
          },
          {
            "timestamp": 1753567348.733984,
            "rss_mb": 115.078125,
            "vms_mb": 401351.0,
            "percent": 0.35119056701660156
          },
          {
            "timestamp": 1753567348.752706,
            "rss_mb": 116.28125,
            "vms_mb": 401352.0,
            "percent": 0.3548622131347656
          },
          {
            "timestamp": 1753567348.7715368,
            "rss_mb": 117.625,
            "vms_mb": 401353.0,
            "percent": 0.3589630126953125
          },
          {
            "timestamp": 1753567348.7903519,
            "rss_mb": 118.9375,
            "vms_mb": 401355.0,
            "percent": 0.36296844482421875
          },
          {
            "timestamp": 1753567348.80916,
            "rss_mb": 120.234375,
            "vms_mb": 401356.0,
            "percent": 0.3669261932373047
          },
          {
            "timestamp": 1753567348.827977,
            "rss_mb": 121.546875,
            "vms_mb": 401357.0,
            "percent": 0.37093162536621094
          },
          {
            "timestamp": 1753567348.846165,
            "rss_mb": 122.84375,
            "vms_mb": 401359.0,
            "percent": 0.3748893737792969
          },
          {
            "timestamp": 1753567348.864987,
            "rss_mb": 124.171875,
            "vms_mb": 401360.0,
            "percent": 0.37899017333984375
          },
          {
            "timestamp": 1753567348.883811,
            "rss_mb": 125.546875,
            "vms_mb": 401361.0,
            "percent": 0.38313865661621094
          },
          {
            "timestamp": 1753567348.902632,
            "rss_mb": 126.875,
            "vms_mb": 401363.0,
            "percent": 0.3871917724609375
          },
          {
            "timestamp": 1753567348.921449,
            "rss_mb": 128.1875,
            "vms_mb": 401364.0,
            "percent": 0.39119720458984375
          },
          {
            "timestamp": 1753567348.938435,
            "rss_mb": 129.4375,
            "vms_mb": 401365.0,
            "percent": 0.39501190185546875
          },
          {
            "timestamp": 1753567348.9572449,
            "rss_mb": 130.75,
            "vms_mb": 401367.0,
            "percent": 0.399017333984375
          },
          {
            "timestamp": 1753567348.97608,
            "rss_mb": 132.03125,
            "vms_mb": 401368.0,
            "percent": 0.4029273986816406
          },
          {
            "timestamp": 1753567348.994944,
            "rss_mb": 133.34375,
            "vms_mb": 401369.0,
            "percent": 0.4069328308105469
          },
          {
            "timestamp": 1753567349.013786,
            "rss_mb": 134.65625,
            "vms_mb": 401370.0,
            "percent": 0.4109382629394531
          },
          {
            "timestamp": 1753567349.0326111,
            "rss_mb": 135.9375,
            "vms_mb": 401372.0,
            "percent": 0.41484832763671875
          },
          {
            "timestamp": 1753567349.0514328,
            "rss_mb": 137.265625,
            "vms_mb": 401373.0,
            "percent": 0.4189014434814453
          },
          {
            "timestamp": 1753567349.069366,
            "rss_mb": 138.5,
            "vms_mb": 401374.0,
            "percent": 0.42266845703125
          },
          {
            "timestamp": 1753567349.0875762,
            "rss_mb": 139.75,
            "vms_mb": 401376.0,
            "percent": 0.426483154296875
          },
          {
            "timestamp": 1753567349.1064022,
            "rss_mb": 141.0625,
            "vms_mb": 401377.0,
            "percent": 0.43048858642578125
          },
          {
            "timestamp": 1753567349.125217,
            "rss_mb": 142.421875,
            "vms_mb": 401378.0,
            "percent": 0.43463706970214844
          },
          {
            "timestamp": 1753567349.144025,
            "rss_mb": 143.734375,
            "vms_mb": 401380.0,
            "percent": 0.4386425018310547
          },
          {
            "timestamp": 1753567349.162851,
            "rss_mb": 145.078125,
            "vms_mb": 401381.0,
            "percent": 0.44274330139160156
          },
          {
            "timestamp": 1753567349.181658,
            "rss_mb": 146.4375,
            "vms_mb": 401382.0,
            "percent": 0.44689178466796875
          },
          {
            "timestamp": 1753567349.200466,
            "rss_mb": 147.78125,
            "vms_mb": 401384.0,
            "percent": 0.4509925842285156
          },
          {
            "timestamp": 1753567349.230839,
            "rss_mb": 148.453125,
            "vms_mb": 401384.0,
            "percent": 0.45304298400878906
          },
          {
            "timestamp": 1753567349.249672,
            "rss_mb": 149.765625,
            "vms_mb": 401386.0,
            "percent": 0.4570484161376953
          },
          {
            "timestamp": 1753567349.268503,
            "rss_mb": 151.09375,
            "vms_mb": 401387.0,
            "percent": 0.4611015319824219
          },
          {
            "timestamp": 1753567349.287317,
            "rss_mb": 152.40625,
            "vms_mb": 401388.0,
            "percent": 0.4651069641113281
          },
          {
            "timestamp": 1753567349.30613,
            "rss_mb": 153.71875,
            "vms_mb": 401390.0,
            "percent": 0.4691123962402344
          },
          {
            "timestamp": 1753567349.324943,
            "rss_mb": 155.0,
            "vms_mb": 401391.0,
            "percent": 0.4730224609375
          },
          {
            "timestamp": 1753567349.343767,
            "rss_mb": 156.234375,
            "vms_mb": 401392.0,
            "percent": 0.4767894744873047
          },
          {
            "timestamp": 1753567349.362609,
            "rss_mb": 157.546875,
            "vms_mb": 401393.0,
            "percent": 0.48079490661621094
          },
          {
            "timestamp": 1753567349.381459,
            "rss_mb": 158.828125,
            "vms_mb": 401395.0,
            "percent": 0.48470497131347656
          },
          {
            "timestamp": 1753567349.4002821,
            "rss_mb": 160.125,
            "vms_mb": 401396.0,
            "percent": 0.4886627197265625
          },
          {
            "timestamp": 1753567349.418224,
            "rss_mb": 161.375,
            "vms_mb": 401397.0,
            "percent": 0.4924774169921875
          },
          {
            "timestamp": 1753567349.437027,
            "rss_mb": 162.6875,
            "vms_mb": 401398.0,
            "percent": 0.49648284912109375
          },
          {
            "timestamp": 1753567349.455848,
            "rss_mb": 164.0,
            "vms_mb": 401400.0,
            "percent": 0.50048828125
          },
          {
            "timestamp": 1753567349.4746711,
            "rss_mb": 165.3125,
            "vms_mb": 401401.0,
            "percent": 0.5044937133789062
          },
          {
            "timestamp": 1753567349.4934888,
            "rss_mb": 166.6875,
            "vms_mb": 401402.0,
            "percent": 0.5086898803710938
          },
          {
            "timestamp": 1753567349.512311,
            "rss_mb": 168.03125,
            "vms_mb": 401404.0,
            "percent": 0.5127906799316406
          },
          {
            "timestamp": 1753567349.531123,
            "rss_mb": 169.359375,
            "vms_mb": 401405.0,
            "percent": 0.5168437957763672
          },
          {
            "timestamp": 1753567349.549935,
            "rss_mb": 170.65625,
            "vms_mb": 401406.0,
            "percent": 0.5208492279052734
          },
          {
            "timestamp": 1753567349.568764,
            "rss_mb": 171.9375,
            "vms_mb": 401408.0,
            "percent": 0.5247116088867188
          },
          {
            "timestamp": 1753567349.587442,
            "rss_mb": 173.25,
            "vms_mb": 401409.0,
            "percent": 0.528717041015625
          },
          {
            "timestamp": 1753567349.606266,
            "rss_mb": 174.578125,
            "vms_mb": 401410.0,
            "percent": 0.5327701568603516
          },
          {
            "timestamp": 1753567349.623039,
            "rss_mb": 175.671875,
            "vms_mb": 401411.0,
            "percent": 0.5361080169677734
          },
          {
            "timestamp": 1753567349.6386912,
            "rss_mb": 176.765625,
            "vms_mb": 401413.0,
            "percent": 0.5394458770751953
          },
          {
            "timestamp": 1753567349.657519,
            "rss_mb": 177.9375,
            "vms_mb": 401414.0,
            "percent": 0.5430221557617188
          },
          {
            "timestamp": 1753567349.675627,
            "rss_mb": 179.1875,
            "vms_mb": 401415.0,
            "percent": 0.5468368530273438
          },
          {
            "timestamp": 1753567349.693436,
            "rss_mb": 180.421875,
            "vms_mb": 401416.0,
            "percent": 0.5506038665771484
          },
          {
            "timestamp": 1753567349.7122738,
            "rss_mb": 181.671875,
            "vms_mb": 401417.0,
            "percent": 0.5544662475585938
          },
          {
            "timestamp": 1753567349.731095,
            "rss_mb": 182.90625,
            "vms_mb": 401419.0,
            "percent": 0.5581855773925781
          },
          {
            "timestamp": 1753567349.749944,
            "rss_mb": 184.1875,
            "vms_mb": 401420.0,
            "percent": 0.5620956420898438
          },
          {
            "timestamp": 1753567349.7978408,
            "rss_mb": 185.328125,
            "vms_mb": 401421.0,
            "percent": 0.5655765533447266
          },
          {
            "timestamp": 1753567349.816685,
            "rss_mb": 186.421875,
            "vms_mb": 401423.0,
            "percent": 0.5689144134521484
          },
          {
            "timestamp": 1753567349.8355331,
            "rss_mb": 186.5625,
            "vms_mb": 401432.0,
            "percent": 0.5693435668945312
          },
          {
            "timestamp": 1753567349.862825,
            "rss_mb": 186.625,
            "vms_mb": 401434.0,
            "percent": 0.5695343017578125
          },
          {
            "timestamp": 1753567349.8819158,
            "rss_mb": 186.671875,
            "vms_mb": 401442.0,
            "percent": 0.5696773529052734
          },
          {
            "timestamp": 1753567349.900854,
            "rss_mb": 186.671875,
            "vms_mb": 401442.0,
            "percent": 0.5696773529052734
          },
          {
            "timestamp": 1753567349.9200408,
            "rss_mb": 186.671875,
            "vms_mb": 401442.0,
            "percent": 0.5696773529052734
          },
          {
            "timestamp": 1753567349.9392781,
            "rss_mb": 186.671875,
            "vms_mb": 401442.0,
            "percent": 0.5696773529052734
          },
          {
            "timestamp": 1753567349.956054,
            "rss_mb": 186.6875,
            "vms_mb": 401442.0,
            "percent": 0.5697250366210938
          },
          {
            "timestamp": 1753567349.975491,
            "rss_mb": 186.6875,
            "vms_mb": 401442.0,
            "percent": 0.5697250366210938
          },
          {
            "timestamp": 1753567349.995368,
            "rss_mb": 186.6875,
            "vms_mb": 401442.0,
            "percent": 0.5697250366210938
          },
          {
            "timestamp": 1753567350.015015,
            "rss_mb": 186.6875,
            "vms_mb": 401442.0,
            "percent": 0.5697250366210938
          },
          {
            "timestamp": 1753567350.0329359,
            "rss_mb": 186.6875,
            "vms_mb": 401442.0,
            "percent": 0.5697250366210938
          },
          {
            "timestamp": 1753567350.0518038,
            "rss_mb": 186.75,
            "vms_mb": 401442.0,
            "percent": 0.569915771484375
          },
          {
            "timestamp": 1753567350.070019,
            "rss_mb": 186.78125,
            "vms_mb": 401442.0,
            "percent": 0.5700111389160156
          },
          {
            "timestamp": 1753567350.088908,
            "rss_mb": 186.796875,
            "vms_mb": 401442.0,
            "percent": 0.5700588226318359
          },
          {
            "timestamp": 1753567350.1077602,
            "rss_mb": 186.953125,
            "vms_mb": 401442.0,
            "percent": 0.5705356597900391
          },
          {
            "timestamp": 1753567350.126587,
            "rss_mb": 187.03125,
            "vms_mb": 401442.0,
            "percent": 0.5707740783691406
          },
          {
            "timestamp": 1753567350.145406,
            "rss_mb": 187.1875,
            "vms_mb": 401442.0,
            "percent": 0.5712509155273438
          },
          {
            "timestamp": 1753567350.164224,
            "rss_mb": 187.359375,
            "vms_mb": 401442.0,
            "percent": 0.5717754364013672
          },
          {
            "timestamp": 1753567350.1830301,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.201836,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.214418,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.226989,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.239551,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.252109,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.2646909,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.277248,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.289835,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.302391,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.314934,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.327497,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.3400471,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.35264,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.364746,
            "rss_mb": 187.40625,
            "vms_mb": 401442.0,
            "percent": 0.5719184875488281
          },
          {
            "timestamp": 1753567350.377296,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.389837,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.4023921,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.4149508,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.427504,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.440062,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.4526389,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.465197,
            "rss_mb": 187.421875,
            "vms_mb": 401442.0,
            "percent": 0.5719661712646484
          },
          {
            "timestamp": 1753567350.477748,
            "rss_mb": 187.453125,
            "vms_mb": 401443.0,
            "percent": 0.5720615386962891
          },
          {
            "timestamp": 1753567350.490301,
            "rss_mb": 187.453125,
            "vms_mb": 401443.0,
            "percent": 0.5720615386962891
          },
          {
            "timestamp": 1753567350.502861,
            "rss_mb": 187.453125,
            "vms_mb": 401443.0,
            "percent": 0.5720615386962891
          },
          {
            "timestamp": 1753567350.5154078,
            "rss_mb": 187.484375,
            "vms_mb": 401443.0,
            "percent": 0.5721569061279297
          },
          {
            "timestamp": 1753567350.527949,
            "rss_mb": 187.484375,
            "vms_mb": 401443.0,
            "percent": 0.5721569061279297
          },
          {
            "timestamp": 1753567350.540527,
            "rss_mb": 187.484375,
            "vms_mb": 401443.0,
            "percent": 0.5721569061279297
          },
          {
            "timestamp": 1753567350.559357,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.570322,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.582876,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.595436,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.608015,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.620573,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.633136,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.6457112,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.658315,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.6708858,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.683464,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.6960099,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.708576,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.7211468,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.7337348,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.746289,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.758854,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.771405,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.7840269,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.796602,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.809162,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.821703,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.834259,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.8468192,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.8593931,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.872003,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.884584,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.897176,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.909751,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.9223812,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.935023,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.9475882,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.960185,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.972831,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.985433,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567350.9980211,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.0086179,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.021183,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.033826,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.0463932,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.0589492,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.0715442,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.084094,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.096652,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.109202,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.121761,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.134332,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.1469,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.159452,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.172004,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.184559,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.1962829,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.2088802,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.221442,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.23404,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.246606,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.259167,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.271731,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.2842932,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.296313,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.308884,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.321478,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.3340402,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.346601,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.359148,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.371731,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.384313,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.3968709,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.40944,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.422001,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.434567,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.447156,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.459705,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.472283,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.484871,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.497432,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.509984,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.5225348,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.535087,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.547651,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.560213,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.5728,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.585344,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.597909,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.610461,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.62302,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.6355689,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.6482291,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.660821,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.6720629,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.6846561,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.697226,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.709781,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.722364,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.7349272,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.74752,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.760074,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.772631,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.7851782,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.7977338,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.8102882,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.82287,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.835459,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.8480341,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.8605871,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.873158,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.885744,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.898296,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.910871,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.923436,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.936018,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.94858,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.961131,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.973678,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.9862468,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567351.9987981,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567352.0114298,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567352.023985,
            "rss_mb": 187.96875,
            "vms_mb": 401443.0,
            "percent": 0.5736351013183594
          },
          {
            "timestamp": 1753567352.04378,
            "rss_mb": 174.96875,
            "vms_mb": 401430.0,
            "percent": 0.5339622497558594
          },
          {
            "timestamp": 1753567352.059343,
            "rss_mb": 174.984375,
            "vms_mb": 401430.0,
            "percent": 0.5340099334716797
          },
          {
            "timestamp": 1753567352.075517,
            "rss_mb": 174.984375,
            "vms_mb": 401430.0,
            "percent": 0.5340099334716797
          },
          {
            "timestamp": 1753567352.088647,
            "rss_mb": 175.09375,
            "vms_mb": 401558.0,
            "percent": 0.5343437194824219
          },
          {
            "timestamp": 1753567352.101739,
            "rss_mb": 175.21875,
            "vms_mb": 401566.0,
            "percent": 0.5347251892089844
          },
          {
            "timestamp": 1753567352.120523,
            "rss_mb": 175.296875,
            "vms_mb": 401566.0,
            "percent": 0.5349636077880859
          },
          {
            "timestamp": 1753567352.1356301,
            "rss_mb": 175.375,
            "vms_mb": 401566.0,
            "percent": 0.5352020263671875
          },
          {
            "timestamp": 1753567352.148171,
            "rss_mb": 175.421875,
            "vms_mb": 401566.0,
            "percent": 0.5353450775146484
          },
          {
            "timestamp": 1753567352.1608572,
            "rss_mb": 175.8125,
            "vms_mb": 401566.0,
            "percent": 0.5365371704101562
          },
          {
            "timestamp": 1753567352.172029,
            "rss_mb": 175.8125,
            "vms_mb": 401549.9375,
            "percent": 0.5365371704101562
          }
        ],
        "peak_memory_mb": 187.96875,
        "avg_memory_mb": 125.3269911779324,
        "memory_delta_mb": 69.859375,
        "sample_count": 1006,
        "initial_memory_mb": 105.953125,
        "final_memory_mb": 175.8125,
        "duration": 17.941625999985263,
        "metadata": {
          "profiler": "psutil",
          "precision": 1,
          "status": "completed",
          "sampling_rate": "100 Hz"
        }
      },
      "start_time": "2025-07-26T15:02:14.230345",
      "end_time": "2025-07-26T15:02:32.171016",
      "duration": 17.940671,
      "success": true,
      "error_message": null
    },
    "call": {
      "profiler_type": "call",
      "data": {
        "total_calls": 318852,
        "total_time": 54.333764152863296,
        "stats": {
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_sample_workload)": {
            "ncalls": 1,
            "tottime": 17.81281833400135,
            "cumtime": 17.81281833400135,
            "percall": 17.81281833400135,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "function": "run_sample_workload",
            "line": 0,
            "callers": {},
            "callees": {
              "<frozen importlib._bootstrap>:0(_find_and_load)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": {
            "ncalls": 1,
            "tottime": 17.799707208003383,
            "cumtime": 17.799707208003383,
            "percall": 17.799707208003383,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "mixed_workload",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_sample_workload)": 1
            },
            "callees": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(cpu_intensive_calculation)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(memory_intensive_operations)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(nested_function_calls)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(data_processing_pipeline)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_iterative)": 1
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(cpu_intensive_calculation)": {
            "ncalls": 1,
            "tottime": 14.365795833000448,
            "cumtime": 14.365795833000448,
            "percall": 14.365795833000448,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "cpu_intensive_calculation",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {}
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(memory_intensive_operations)": {
            "ncalls": 1,
            "tottime": 1.6034470000013243,
            "cumtime": 1.6034470000013243,
            "percall": 1.6034470000013243,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "memory_intensive_operations",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {}
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": {
            "ncalls": 1,
            "tottime": 0.3419324160204269,
            "cumtime": 0.3419324160204269,
            "percall": 0.3419324160204269,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "file_io_operations",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:0(mkdtemp)": 1,
              "<frozen posixpath>:0(join)": 20,
              "<frozen codecs>:0(__init__)": 20,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(dump)": 10,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(load)": 10
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": {
            "ncalls": 242785,
            "tottime": 0.3361114514700603,
            "cumtime": 0.3361114514700603,
            "percall": 1.384399577692445e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "fibonacci_recursive",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": 242784
            },
            "callees": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": 242784
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(dump)": {
            "ncalls": 10,
            "tottime": 0.33022316807182506,
            "cumtime": 0.33022316807182506,
            "percall": 0.033022316807182504,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "dump",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": 10
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(iterencode)": 10,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode)": 10180
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode)": {
            "ncalls": 10180,
            "tottime": 0.2678500283800531,
            "cumtime": 0.2678500283800531,
            "percall": 2.631139767976946e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_iterencode",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(dump)": 10180
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 10180
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": {
            "ncalls": 10240,
            "tottime": 0.2153955228277482,
            "cumtime": 0.2153955228277482,
            "percall": 2.1034719026147286e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_iterencode_dict",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode)": 10180,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 60
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_list)": 10020,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 60,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(floatstr)": 10
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_list)": {
            "ncalls": 10020,
            "tottime": 0.16697013113298453,
            "cumtime": 0.16697013113298453,
            "percall": 1.6663685741814823e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_iterencode_list",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 10020
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(floatstr)": 10000
            }
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(stop)": {
            "ncalls": 1,
            "tottime": 0.12697262500296347,
            "cumtime": 0.12697262500296347,
            "percall": 0.12697262500296347,
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py",
            "function": "stop",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/orchestra.py:0(stop_profiling)": 1
            },
            "callees": {
              "<frozen importlib._bootstrap>:0(parent)": 1,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py:0(unregister_trace_function)": 1,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/base.py:0(_mark_end)": 1,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(print_stats)": 1,
              "<frozen genericpath>:0(exists)": 28,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(_extract_function_data)": 28,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/base.py:0(duration)": 2
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(print_stats)": {
            "ncalls": 1,
            "tottime": 0.11515754199353978,
            "cumtime": 0.11515754199353978,
            "percall": 0.11515754199353978,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "print_stats",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(stop)": 1
            },
            "callees": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": 1
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": {
            "ncalls": 1,
            "tottime": 0.1148844999843277,
            "cumtime": 0.1148844999843277,
            "percall": 0.1148844999843277,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "show_text",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(print_stats)": 1
            },
            "callees": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": 1,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": 28
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": {
            "ncalls": 28,
            "tottime": 0.09993445896543562,
            "cumtime": 0.09993445896543562,
            "percall": 0.0035690878201941295,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "show_func",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": 28
            },
            "callees": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(<genexpr>)": 1257,
              "<frozen genericpath>:0(exists)": 56,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(clearcache)": 28,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 28,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__hash__)": 28,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_column_widths)": 2
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": {
            "ncalls": 28,
            "tottime": 0.07376924698473886,
            "cumtime": 0.07376924698473886,
            "percall": 0.0026346159637406735,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "get_code_block",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": 28
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": 28,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": 28,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": 28
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": {
            "ncalls": 28,
            "tottime": 0.06694550183601677,
            "cumtime": 0.06694550183601677,
            "percall": 0.0023909107798577417,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py",
            "function": "getblock",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 28
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(__init__)": 28,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(generate_tokens)": 28,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": 4857,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(tokeneater)": 4857
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(data_processing_pipeline)": {
            "ncalls": 1,
            "tottime": 0.058558792021358386,
            "cumtime": 0.058558792021358386,
            "percall": 0.058558792021358386,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "data_processing_pipeline",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(<genexpr>)": 9024
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(floatstr)": {
            "ncalls": 10010,
            "tottime": 0.044034677965100855,
            "cumtime": 0.044034677965100855,
            "percall": 4.399068727782303e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "floatstr",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_list)": 10000,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 10
            },
            "callees": {}
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": {
            "ncalls": 3,
            "tottime": 0.029748707980616018,
            "cumtime": 0.029748707980616018,
            "percall": 0.009916235993538672,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py",
            "function": "from_config",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": 1,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_column_widths)": 2
            },
            "callees": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_default)": 3,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(find_and_read_config_file)": 2,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(iter_configs)": 1,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(get_headers)": 2,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(get_subtable)": 20,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(merge)": 2,
              "<string>:0(__init__)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__eq__)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__new__)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__init__)": 1
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(tokeneater)": {
            "ncalls": 4857,
            "tottime": 0.029624816466821358,
            "cumtime": 0.029624816466821358,
            "percall": 6.099406313943042e-06,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "tokeneater",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": 4857
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(tokeneater)": 4857
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(find_and_read_config_file)": {
            "ncalls": 2,
            "tottime": 0.026473416975932196,
            "cumtime": 0.026473416975932196,
            "percall": 0.013236708487966098,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py",
            "function": "find_and_read_config_file",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": 2
            },
            "callees": {
              "<frozen _collections_abc>:0(get)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(cwd)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(absolute)": 2,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(iter_configs)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(open)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(load)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__new__)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__init__)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(load)": {
            "ncalls": 2,
            "tottime": 0.02579137502470985,
            "cumtime": 0.02579137502470985,
            "percall": 0.012895687512354925,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "load",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(find_and_read_config_file)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": 2
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": {
            "ncalls": 2,
            "tottime": 0.025752040994120762,
            "cumtime": 0.025752040994120762,
            "percall": 0.012876020497060381,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "loads",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(load)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(__init__)": 4,
              "<string>:0(<lambda>)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(make_safe_parse_float)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 234,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(finalize_pending)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(create_dict_rule)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comment)": 104,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(key_value_rule)": 78
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": {
            "ncalls": 4885,
            "tottime": 0.024244483473012224,
            "cumtime": 0.024244483473012224,
            "percall": 4.9630467703198005e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py",
            "function": "_generate_tokens_from_c_tokenizer",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": 4857,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 28
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/collections/__init__.py:0(_make)": 4857
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(key_value_rule)": {
            "ncalls": 78,
            "tottime": 0.02125917302328162,
            "cumtime": 0.02125917302328162,
            "percall": 0.0002725535002984823,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "key_value_rule",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": 78
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(<genexpr>)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(is_)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(get_or_create_nest)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(set)": 36
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": {
            "ncalls": 82,
            "tottime": 0.018658463843166828,
            "cumtime": 0.018658463843166828,
            "percall": 0.00022754224198983937,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_key_value_pair",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(key_value_rule)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_inline_table)": 4
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 82
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(tokeneater)": {
            "ncalls": 4857,
            "tottime": 0.016938874643528834,
            "cumtime": 0.016938874643528834,
            "percall": 3.4875179418424613e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py",
            "function": "tokeneater",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(tokeneater)": 4857
            },
            "callees": {}
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_column_widths)": {
            "ncalls": 2,
            "tottime": 0.015071333007654175,
            "cumtime": 0.015071333007654175,
            "percall": 0.007535666503827088,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "get_column_widths",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": 2
            },
            "callees": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": 2,
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(get_subconfig)": 2
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(<genexpr>)": {
            "ncalls": 9024,
            "tottime": 0.014149492169963196,
            "cumtime": 0.014149492169963196,
            "percall": 1.567984504650177e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "<genexpr>",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(data_processing_pipeline)": 9024
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": {
            "ncalls": 34,
            "tottime": 0.013210963021265343,
            "cumtime": 0.013210963021265343,
            "percall": 0.0003885577359195689,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_array",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 34
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comments_and_array_ws)": 264,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 126
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": {
            "ncalls": 208,
            "tottime": 0.010854368971195072,
            "cumtime": 0.010854368971195072,
            "percall": 5.2184466207668615e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_value",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": 126
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": 34,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_one_line_basic_str)": 154,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_inline_table)": 4,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_re.py:0(match_to_number)": 6,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_literal_str)": 2
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/collections/__init__.py:0(_make)": {
            "ncalls": 4857,
            "tottime": 0.010650682117557153,
            "cumtime": 0.010650682117557153,
            "percall": 2.192851990437956e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/collections/__init__.py",
            "function": "_make",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": 4857
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_one_line_basic_str)": {
            "ncalls": 156,
            "tottime": 0.010185860854107887,
            "cumtime": 0.010185860854107887,
            "percall": 6.529397983402491e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_one_line_basic_str",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 154,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_part)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_basic_str)": 156
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_basic_str)": {
            "ncalls": 156,
            "tottime": 0.00977470792713575,
            "cumtime": 0.00977470792713575,
            "percall": 6.26583841483061e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_basic_str",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_one_line_basic_str)": 156
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": {
            "ncalls": 245,
            "tottime": 0.007989908976014704,
            "cumtime": 0.007989908976014704,
            "percall": 3.2611873371488584e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py",
            "function": "getlines",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 28,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getline)": 217
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(updatecache)": 35
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(updatecache)": {
            "ncalls": 35,
            "tottime": 0.007243040978210047,
            "cumtime": 0.007243040978210047,
            "percall": 0.00020694402794885848,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py",
            "function": "updatecache",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": 35
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(open)": 35,
              "<frozen codecs>:0(decode)": 198
            }
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(_extract_function_data)": {
            "ncalls": 28,
            "tottime": 0.00605212795198895,
            "cumtime": 0.00605212795198895,
            "percall": 0.00021614742685674822,
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py",
            "function": "_extract_function_data",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(stop)": 28
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getline)": 217,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(<lambda>)": 217
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(open)": {
            "ncalls": 35,
            "tottime": 0.004132497939281166,
            "cumtime": 0.004132497939281166,
            "percall": 0.0001180713696937476,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py",
            "function": "open",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(updatecache)": 35
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(detect_encoding)": 35,
              "<frozen codecs>:0(__init__)": 35
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comments_and_array_ws)": {
            "ncalls": 264,
            "tottime": 0.0039596248243469745,
            "cumtime": 0.0039596248243469745,
            "percall": 1.4998578880102176e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "skip_comments_and_array_ws",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": 264
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 382,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comment)": 382
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": {
            "ncalls": 1048,
            "tottime": 0.0039538977725896984,
            "cumtime": 0.0039538977725896984,
            "percall": 3.7728032181199413e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "skip_chars",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": 234,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(create_dict_rule)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_part)": 140,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": 176,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comments_and_array_ws)": 382,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_inline_table)": 8
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": {
            "ncalls": 108,
            "tottime": 0.003433457051869482,
            "cumtime": 0.003433457051869482,
            "percall": 3.17912689987915e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_key",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(create_dict_rule)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 82
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_part)": 142,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 176
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_default)": {
            "ncalls": 3,
            "tottime": 0.0024788320006337017,
            "cumtime": 0.0024788320006337017,
            "percall": 0.0008262773335445672,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py",
            "function": "from_default",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": 3
            },
            "callees": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(copy)": 3
            }
          },
          "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(copy)": {
            "ncalls": 3,
            "tottime": 0.002464958990458399,
            "cumtime": 0.002464958990458399,
            "percall": 0.0008216529968194664,
            "filename": "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py",
            "function": "copy",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/venv/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_default)": 3
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/copy.py:0(deepcopy)": 3,
              "<string>:0(__init__)": 3
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(create_dict_rule)": {
            "ncalls": 26,
            "tottime": 0.0023872939636930823,
            "cumtime": 0.0023872939636930823,
            "percall": 9.181899860358008e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "create_dict_rule",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": 26
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(is_)": 52,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(set)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(get_or_create_nest)": 26
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(load)": {
            "ncalls": 10,
            "tottime": 0.0023672899696975946,
            "cumtime": 0.0023672899696975946,
            "percall": 0.00023672899696975948,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "load",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": 10
            },
            "callees": {
              "<frozen codecs>:0(decode)": 10,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(loads)": 10
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getline)": {
            "ncalls": 217,
            "tottime": 0.002203789947088808,
            "cumtime": 0.002203789947088808,
            "percall": 1.0155714041883907e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py",
            "function": "getline",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(_extract_function_data)": 217
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": 217
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_part)": {
            "ncalls": 142,
            "tottime": 0.002101114165270701,
            "cumtime": 0.002101114165270701,
            "percall": 1.479657862866691e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_key_part",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": 142
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 140,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_one_line_basic_str)": 2
            }
          },
          "<frozen importlib._bootstrap>:0(_find_and_load)": {
            "ncalls": 1,
            "tottime": 0.001985707989661023,
            "cumtime": 0.001985707989661023,
            "percall": 0.001985707989661023,
            "filename": "<frozen importlib._bootstrap>",
            "function": "_find_and_load",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_sample_workload)": 1
            },
            "callees": {
              "<frozen importlib._bootstrap>:0(__init__)": 1,
              "<frozen importlib._bootstrap>:0(__enter__)": 1,
              "<frozen importlib._bootstrap>:0(_find_and_load_unlocked)": 1,
              "<frozen importlib._bootstrap>:0(__exit__)": 1,
              "<frozen importlib._bootstrap>:0(cb)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(loads)": {
            "ncalls": 10,
            "tottime": 0.001982417015824467,
            "cumtime": 0.001982417015824467,
            "percall": 0.0001982417015824467,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "loads",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(load)": 10
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/decoder.py:0(decode)": 10
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/decoder.py:0(decode)": {
            "ncalls": 10,
            "tottime": 0.0018660839705262333,
            "cumtime": 0.0018660839705262333,
            "percall": 0.00018660839705262334,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/decoder.py",
            "function": "decode",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(loads)": 10
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/decoder.py:0(raw_decode)": 10
            }
          }
        },
        "stats_summary": "Custom call profiler tracked 318852 function calls in 54.333764 seconds",
        "sort_key": "cumulative",
        "profiler_type": "custom_call_profiler"
      },
      "start_time": "2025-07-26T15:02:14.230882",
      "end_time": "2025-07-26T15:02:32.172661",
      "duration": 17.941779,
      "success": true,
      "error_message": null
    }
  }
}