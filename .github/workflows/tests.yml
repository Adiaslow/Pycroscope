name: Tests and Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC to catch any dependency issues
    - cron: "0 2 * * *"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time while maintaining good coverage
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better coverage analysis

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install any macOS-specific dependencies if needed
          brew update

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -e ".[dev]"

      - name: Verify installation
        run: |
          python -c "import pycroscope; print('Pycroscope installed successfully')"
          python -c "from pycroscope.core.config import ProfileConfig; print('Core modules accessible')"

      - name: Run unit tests with coverage
        run: |
          python tests/run_tests.py unit --cov-report=xml --cov-report=html --cov-fail-under=50

      - name: Run integration tests
        run: |
          python tests/run_tests.py integration

      - name: Run complete test suite with coverage
        run: |
          pytest --cov=src/pycroscope --cov-branch --cov-report=xml --cov-report=html --cov-fail-under=50 --verbose

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Adiaslow/Pycroscope
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

      - name: Upload coverage HTML report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/

  architecture-validation:
    name: Architecture and Design Principles
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"

      - name: Validate SOLID principles compliance
        run: |
          echo "Running architecture validation..."
          python tests/run_tests.py core
          echo "Core architecture tests passed - SOLID principles validated"

      - name: Validate exception handling (fail-fast)
        run: |
          echo "Validating fail-fast exception handling..."
                      python tests/run_tests.py unit --tb=short | grep -E "(exception|error)" || echo "No unexpected exception handling"

      - name: Validate dependency injection
        run: |
          echo "Validating dependency injection container..."
          python -c "
          from pycroscope.core.container import get_container
          container = get_container()
          print('DI container working correctly')
          "

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety bandit[toml]

      - name: Install project dependencies
        run: |
          python -m pip install -e ".[dev]"

      - name: Run safety check
        run: |
          safety check --json || true

      - name: Run bandit security scan
        run: |
          bandit -r src/pycroscope/ -f json || true

  code-quality:
    name: Code Quality & Style
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"

      - name: Run type checking with mypy
        run: |
          mypy src/pycroscope/ --ignore-missing-imports || true

      - name: Check code formatting with black
        run: |
          black --check src/pycroscope/ tests/ || true

      - name: Check import sorting with isort
        run: |
          isort --check-only src/pycroscope/ tests/ || true

  performance-check:
    name: Performance Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"

      - name: Run performance validation
        run: |
          echo "Running basic performance validation..."
          python -c "
          import time
          from pycroscope.application.services import ProfilingService

          service = ProfilingService()
          start = time.time()

          # Test that service initialization is fast
          assert time.time() - start < 1.0, 'Service initialization too slow'
          print('ProfilingService initialization performance OK')

          # Test that configuration creation is fast
          start = time.time()
          config = service.config_service.create_config()
          assert time.time() - start < 0.1, 'Config creation too slow'
          print('Configuration creation performance OK')
          "

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, architecture-validation, security, code-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Validate package installation
        run: |
          python -m pip install dist/*.whl
          python -c "import pycroscope; print('Package installs correctly')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
