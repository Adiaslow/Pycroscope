{
  "session_id": "81576787-41a6-45f2-baac-1e284e99c13f",
  "config": {
    "line_profiling": true,
    "memory_profiling": true,
    "call_profiling": true,
    "output_dir": "profiling_results",
    "session_name": null,
    "save_raw_data": true,
    "sampling_interval": 0.01,
    "memory_precision": 3,
    "max_call_depth": 50,
    "generate_reports": true,
    "create_visualizations": true,
    "analyze_patterns": true,
    "pattern_complexity_threshold": 10,
    "pattern_maintainability_threshold": 20.0,
    "pattern_severity_threshold": "medium",
    "pattern_confidence_threshold": 0.7,
    "detect_nested_loops": true,
    "detect_dead_code": true,
    "detect_complexity_issues": true,
    "detect_maintainability_issues": true,
    "max_function_lines": 50,
    "max_function_parameters": 5,
    "correlate_patterns_with_profiling": true,
    "prioritize_hotspot_patterns": true,
    "hotspot_correlation_threshold": 0.1,
    "profiler_prefix": "pycroscope",
    "use_thread_isolation": true,
    "cleanup_on_exit": true,
    "extra_config": {}
  },
  "start_time": "2025-07-27T12:25:21.363611",
  "end_time": "2025-07-27T12:25:42.999940",
  "duration": 21.636329,
  "status": "completed",
  "results": {
    "line": {
      "profiler_type": "line",
      "data": {
        "line_stats": {
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:373": {
            "hits": 2,
            "time": 0.000355,
            "time_per_hit": 0.0001775,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 373,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:375": {
            "hits": 2,
            "time": 6.9e-05,
            "time_per_hit": 3.45e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 375,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:376": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 376,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:379": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 379,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:380": {
            "hits": 2,
            "time": 0.000724,
            "time_per_hit": 0.000362,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 380,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:381": {
            "hits": 2,
            "time": 4.2e-05,
            "time_per_hit": 2.1e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 381,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:382": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 382,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:383": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 383,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:384": {
            "hits": 2,
            "time": 0.000523,
            "time_per_hit": 0.0002615,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 384,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:395": {
            "hits": 2,
            "time": 4.8e-05,
            "time_per_hit": 2.4e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 395,
            "function": "mkdtemp"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:116": {
            "hits": 2,
            "time": 0.000123,
            "time_per_hit": 6.15e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 116,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:117": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 117,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:118": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 118,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:119": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 119,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:120": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 120,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:121": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 121,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:124": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 124,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:125": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 125,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:126": {
            "hits": 2,
            "time": 9.4e-05,
            "time_per_hit": 4.7e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 126,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:129": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 129,
            "function": "_sanitize_params"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:87": {
            "hits": 2,
            "time": 6e-06,
            "time_per_hit": 3e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 87,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:88": {
            "hits": 8,
            "time": 9e-06,
            "time_per_hit": 1.125e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 88,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:89": {
            "hits": 6,
            "time": 5e-06,
            "time_per_hit": 8.333333333333334e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 89,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:90": {
            "hits": 5,
            "time": 5e-06,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 90,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:92": {
            "hits": 1,
            "time": 5e-06,
            "time_per_hit": 5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 92,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:95": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 95,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:101": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 101,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:104": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 104,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:105": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 105,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:106": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 106,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:107": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 107,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:111": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 111,
            "function": "_infer_return_type"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:315": {
            "hits": 2,
            "time": 6.6e-05,
            "time_per_hit": 3.3e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 315,
            "function": "gettempdir"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:304": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 304,
            "function": "_gettempdir"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:311": {
            "hits": 2,
            "time": 3e-06,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 311,
            "function": "_gettempdir"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:233": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 233,
            "function": "_get_candidate_names"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:240": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "line_number": 240,
            "function": "_get_candidate_names"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:133": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 133,
            "function": "RLock"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:135": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 135,
            "function": "RLock"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:840": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 840,
            "function": "_newname"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1361": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1361,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1362": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1362,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1363": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1363,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1365": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1365,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1368": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1368,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1369": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1369,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1370": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1370,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1372": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1372,
            "function": "_make_invoke_excepthook"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:1404": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "line_number": 1404,
            "function": "_make_invoke_excepthook"
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py:124": {
            "hits": 1,
            "time": 4.5e-05,
            "time_per_hit": 4.5e-05,
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py",
            "line_number": 124,
            "function": "register_trace_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:43": {
            "hits": 1,
            "time": 0.003491,
            "time_per_hit": 0.003491,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 43,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:45": {
            "hits": 1,
            "time": 9e-06,
            "time_per_hit": 9e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 45,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:46": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 46,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:47": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 47,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:50": {
            "hits": 1,
            "time": 21.452093,
            "time_per_hit": 21.452093,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 50,
            "function": "run_sample_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:52": {
            "hits": 1,
            "time": 8e-06,
            "time_per_hit": 8e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "line_number": 52,
            "function": "run_sample_workload"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:187": {
            "hits": 3,
            "time": 4e-06,
            "time_per_hit": 1.3333333333333332e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 187,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:188": {
            "hits": 3,
            "time": 3e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 188,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:189": {
            "hits": 3,
            "time": 3e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 189,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:190": {
            "hits": 3,
            "time": 3e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 190,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:191": {
            "hits": 3,
            "time": 3e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 191,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:193": {
            "hits": 3,
            "time": 8e-05,
            "time_per_hit": 2.666666666666667e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 193,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:194": {
            "hits": 3,
            "time": 3e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 194,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:197": {
            "hits": 3,
            "time": 4e-06,
            "time_per_hit": 1.3333333333333332e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 197,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:199": {
            "hits": 3,
            "time": 2e-06,
            "time_per_hit": 6.666666666666666e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 199,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:201": {
            "hits": 3,
            "time": 4e-06,
            "time_per_hit": 1.3333333333333332e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 201,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:203": {
            "hits": 3,
            "time": 3e-06,
            "time_per_hit": 1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 203,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:205": {
            "hits": 3,
            "time": 7e-06,
            "time_per_hit": 2.333333333333333e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 205,
            "function": "_type_check"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:168": {
            "hits": 3,
            "time": 9e-06,
            "time_per_hit": 3e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 168,
            "function": "_type_convert"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:170": {
            "hits": 3,
            "time": 4e-06,
            "time_per_hit": 1.3333333333333332e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 170,
            "function": "_type_convert"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:172": {
            "hits": 3,
            "time": 7e-06,
            "time_per_hit": 2.333333333333333e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 172,
            "function": "_type_convert"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:1162": {
            "hits": 12,
            "time": 1.9e-05,
            "time_per_hit": 1.5833333333333333e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "line_number": 1162,
            "function": "_is_dunder"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:339": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 339,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:341": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 341,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:344": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 344,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:345": {
            "hits": 1,
            "time": 17.407133,
            "time_per_hit": 17.407133,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 345,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:346": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 346,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:347": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 347,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:350": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 350,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:351": {
            "hits": 1,
            "time": 1.710393,
            "time_per_hit": 1.710393,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 351,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:352": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 352,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:353": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 353,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:356": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 356,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:357": {
            "hits": 1,
            "time": 0.400954,
            "time_per_hit": 0.400954,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 357,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:358": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 358,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:359": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 359,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:362": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 362,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:363": {
            "hits": 1,
            "time": 0.000156,
            "time_per_hit": 0.000156,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 363,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:364": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 364,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:365": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 365,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:368": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 368,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:369": {
            "hits": 1,
            "time": 0.070197,
            "time_per_hit": 0.070197,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 369,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:370": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 370,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:371": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 371,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:374": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 374,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:375": {
            "hits": 1,
            "time": 0.002455,
            "time_per_hit": 0.002455,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 375,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:376": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 376,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:377": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 377,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:380": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 380,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:381": {
            "hits": 1,
            "time": 1.847291,
            "time_per_hit": 1.847291,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 381,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:382": {
            "hits": 1,
            "time": 6e-06,
            "time_per_hit": 6e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 382,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:384": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 384,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:385": {
            "hits": 1,
            "time": 0.000261,
            "time_per_hit": 0.000261,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 385,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:386": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 386,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:388": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 388,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:390": {
            "hits": 1,
            "time": 4e-06,
            "time_per_hit": 4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 390,
            "function": "mixed_workload"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:134": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 134,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:137": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 137,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:138": {
            "hits": 1,
            "time": 0.023409,
            "time_per_hit": 0.023409,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 138,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:139": {
            "hits": 1,
            "time": 0.02445,
            "time_per_hit": 0.02445,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 139,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:141": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 141,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:142": {
            "hits": 201,
            "time": 0.000207,
            "time_per_hit": 1.0298507462686568e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 142,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:143": {
            "hits": 40200,
            "time": 0.036169,
            "time_per_hit": 8.99726368159204e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 143,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:144": {
            "hits": 8040000,
            "time": 7.269199,
            "time_per_hit": 9.041292288557215e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 144,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:145": {
            "hits": 8000000,
            "time": 7.47075,
            "time_per_hit": 9.3384375e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 145,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:148": {
            "hits": 10001,
            "time": 0.009516,
            "time_per_hit": 9.515048495150485e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 148,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:149": {
            "hits": 10000,
            "time": 0.010506,
            "time_per_hit": 1.0506e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 149,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:151": {
            "hits": 1,
            "time": 1.2e-05,
            "time_per_hit": 1.2e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 151,
            "function": "cpu_intensive_calculation"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:156": {
            "hits": 1,
            "time": 6e-06,
            "time_per_hit": 6e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 156,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:159": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 159,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:160": {
            "hits": 50001,
            "time": 0.046229,
            "time_per_hit": 9.245615087698246e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 160,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:161": {
            "hits": 100000,
            "time": 0.092517,
            "time_per_hit": 9.251700000000001e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 161,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:162": {
            "hits": 50000,
            "time": 0.070092,
            "time_per_hit": 1.4018400000000001e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 162,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:163": {
            "hits": 50000,
            "time": 0.043087,
            "time_per_hit": 8.6174e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 163,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:164": {
            "hits": 50000,
            "time": 0.689497,
            "time_per_hit": 1.3789940000000001e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 164,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:165": {
            "hits": 50000,
            "time": 0.058571,
            "time_per_hit": 1.17142e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 165,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:166": {
            "hits": 50000,
            "time": 0.049503,
            "time_per_hit": 9.9006e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 166,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:167": {
            "hits": 50000,
            "time": 0.05116,
            "time_per_hit": 1.0232e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 167,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:168": {
            "hits": 50000,
            "time": 0.242194,
            "time_per_hit": 4.84388e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 168,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:174": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 174,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:175": {
            "hits": 50001,
            "time": 0.046195,
            "time_per_hit": 9.238815223695526e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 175,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:176": {
            "hits": 50000,
            "time": 0.045062,
            "time_per_hit": 9.0124e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 176,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:177": {
            "hits": 50000,
            "time": 0.046196,
            "time_per_hit": 9.2392e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 177,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:178": {
            "hits": 10,
            "time": 8e-06,
            "time_per_hit": 8e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 178,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:179": {
            "hits": 50000,
            "time": 0.045679,
            "time_per_hit": 9.135799999999999e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 179,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:182": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 182,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:183": {
            "hits": 101,
            "time": 0.000113,
            "time_per_hit": 1.1188118811881188e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 183,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:184": {
            "hits": 100,
            "time": 0.065852,
            "time_per_hit": 0.0006585199999999999,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 184,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:185": {
            "hits": 100,
            "time": 0.000107,
            "time_per_hit": 1.07e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 185,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:186": {
            "hits": 100,
            "time": 0.000111,
            "time_per_hit": 1.11e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 186,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:187": {
            "hits": 90,
            "time": 0.000594,
            "time_per_hit": 6.6e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 187,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:189": {
            "hits": 1,
            "time": 8e-06,
            "time_per_hit": 8e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 189,
            "function": "memory_intensive_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:194": {
            "hits": 1,
            "time": 4e-06,
            "time_per_hit": 4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 194,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:197": {
            "hits": 1,
            "time": 0.001171,
            "time_per_hit": 0.001171,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 197,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:199": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 199,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:201": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 201,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:202": {
            "hits": 11,
            "time": 1.6e-05,
            "time_per_hit": 1.4545454545454544e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 202,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:203": {
            "hits": 10,
            "time": 0.000271,
            "time_per_hit": 2.7099999999999998e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 203,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:204": {
            "hits": 10,
            "time": 1.3e-05,
            "time_per_hit": 1.2999999999999998e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 204,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:205": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 205,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:206": {
            "hits": 10,
            "time": 0.006014,
            "time_per_hit": 0.0006014,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 206,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:207": {
            "hits": 10,
            "time": 2.2e-05,
            "time_per_hit": 2.2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 207,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:210": {
            "hits": 20,
            "time": 0.003171,
            "time_per_hit": 0.00015855,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 210,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:211": {
            "hits": 10,
            "time": 0.385205,
            "time_per_hit": 0.0385205,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 211,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:213": {
            "hits": 10,
            "time": 1.9e-05,
            "time_per_hit": 1.9e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 213,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:216": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 216,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:217": {
            "hits": 11,
            "time": 1.2e-05,
            "time_per_hit": 1.090909090909091e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 217,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:218": {
            "hits": 20,
            "time": 0.000387,
            "time_per_hit": 1.935e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 218,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:219": {
            "hits": 10,
            "time": 0.003221,
            "time_per_hit": 0.00032209999999999997,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 219,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:222": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 222,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:223": {
            "hits": 11,
            "time": 1.2e-05,
            "time_per_hit": 1.090909090909091e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 223,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:224": {
            "hits": 10,
            "time": 1.2e-05,
            "time_per_hit": 1.2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 224,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:226": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 226,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:230": {
            "hits": 11,
            "time": 3.9e-05,
            "time_per_hit": 3.5454545454545454e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 230,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:231": {
            "hits": 10,
            "time": 0.000694,
            "time_per_hit": 6.939999999999999e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 231,
            "function": "file_io_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:232": {
            "hits": 1,
            "time": 4.6e-05,
            "time_per_hit": 4.6e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 232,
            "function": "file_io_operations"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:165": {
            "hits": 10,
            "time": 1.2e-05,
            "time_per_hit": 1.2e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 165,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:166": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 166,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:167": {
            "hits": 10,
            "time": 9e-06,
            "time_per_hit": 9.000000000000001e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 167,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:168": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 168,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:169": {
            "hits": 10,
            "time": 0.000503,
            "time_per_hit": 5.0299999999999996e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 169,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:179": {
            "hits": 10180,
            "time": 0.367224,
            "time_per_hit": 3.607308447937132e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 179,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:180": {
            "hits": 10170,
            "time": 0.011923,
            "time_per_hit": 1.172369714847591e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 180,
            "function": "dump"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:275": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 275,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:278": {
            "hits": 10,
            "time": 1.3e-05,
            "time_per_hit": 1.2999999999999998e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 278,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:334": {
            "hits": 10,
            "time": 1.7e-05,
            "time_per_hit": 1.7e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 334,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:414": {
            "hits": 10,
            "time": 1.1e-05,
            "time_per_hit": 1.1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 414,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:443": {
            "hits": 10,
            "time": 1.8e-05,
            "time_per_hit": 1.8000000000000001e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "line_number": 443,
            "function": "_make_iterencode"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:293": {
            "hits": 30,
            "time": 0.002897,
            "time_per_hit": 9.656666666666666e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 293,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:294": {
            "hits": 10,
            "time": 1.5e-05,
            "time_per_hit": 1.5e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 294,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:295": {
            "hits": 10,
            "time": 9e-06,
            "time_per_hit": 9.000000000000001e-07,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 295,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:296": {
            "hits": 20,
            "time": 3.1e-05,
            "time_per_hit": 1.55e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 296,
            "function": "load"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:333": {
            "hits": 10,
            "time": 1.1e-05,
            "time_per_hit": 1.1e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 333,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:334": {
            "hits": 10,
            "time": 1.3e-05,
            "time_per_hit": 1.2999999999999998e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 334,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:343": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 343,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:344": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 344,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:345": {
            "hits": 10,
            "time": 1e-05,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 345,
            "function": "loads"
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:346": {
            "hits": 10,
            "time": 0.002202,
            "time_per_hit": 0.00022019999999999999,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "line_number": 346,
            "function": "loads"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:237": {
            "hits": 1,
            "time": 4e-06,
            "time_per_hit": 4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 237,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:239": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 239,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:244": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 244,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:249": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 249,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:254": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 254,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:259": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 259,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:262": {
            "hits": 1,
            "time": 6.9e-05,
            "time_per_hit": 6.9e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 262,
            "function": "nested_function_calls"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:267": {
            "hits": 1,
            "time": 4e-06,
            "time_per_hit": 4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 267,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:270": {
            "hits": 1,
            "time": 0.00654,
            "time_per_hit": 0.00654,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 270,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:273": {
            "hits": 1,
            "time": 0.006271,
            "time_per_hit": 0.006271,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 273,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:276": {
            "hits": 1,
            "time": 0.005531,
            "time_per_hit": 0.005531,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 276,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:279": {
            "hits": 1,
            "time": 3e-05,
            "time_per_hit": 3e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 279,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:280": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 280,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:281": {
            "hits": 1,
            "time": 7.1e-05,
            "time_per_hit": 7.1e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 281,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:282": {
            "hits": 1,
            "time": 6.6e-05,
            "time_per_hit": 6.6e-05,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 282,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:285": {
            "hits": 2,
            "time": 0.051401,
            "time_per_hit": 0.0257005,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 285,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:286": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 286,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:288": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 288,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:290": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 290,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:291": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 291,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:292": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 292,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:293": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 293,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:294": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 294,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:295": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 295,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:296": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 296,
            "function": "data_processing_pipeline"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:305": {
            "hits": 1,
            "time": 4e-06,
            "time_per_hit": 4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 305,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:308": {
            "hits": 1,
            "time": 4e-06,
            "time_per_hit": 4e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 308,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:309": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 309,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:310": {
            "hits": 1,
            "time": 0.000178,
            "time_per_hit": 0.000178,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 310,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:313": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 313,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:314": {
            "hits": 1,
            "time": 0.000666,
            "time_per_hit": 0.000666,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 314,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:315": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 315,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:318": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 318,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:319": {
            "hits": 1,
            "time": 0.000416,
            "time_per_hit": 0.000416,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 319,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:320": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 320,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:323": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 323,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:324": {
            "hits": 1,
            "time": 0.000991,
            "time_per_hit": 0.000991,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 324,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:325": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 325,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:327": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 327,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:328": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 328,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:329": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 329,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:330": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 330,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:331": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 331,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:332": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 332,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:333": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 333,
            "function": "demonstrate_anti_patterns"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:47": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 47,
            "function": "inefficient_nested_search"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:50": {
            "hits": 6,
            "time": 5e-06,
            "time_per_hit": 8.333333333333334e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 50,
            "function": "inefficient_nested_search"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:51": {
            "hits": 255,
            "time": 0.000231,
            "time_per_hit": 9.058823529411764e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 51,
            "function": "inefficient_nested_search"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:52": {
            "hits": 255,
            "time": 0.000234,
            "time_per_hit": 9.176470588235294e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 52,
            "function": "inefficient_nested_search"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:53": {
            "hits": 5,
            "time": 5e-06,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 53,
            "function": "inefficient_nested_search"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:54": {
            "hits": 5,
            "time": 5e-06,
            "time_per_hit": 1.0000000000000002e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 54,
            "function": "inefficient_nested_search"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:56": {
            "hits": 1,
            "time": 3e-06,
            "time_per_hit": 3e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 56,
            "function": "inefficient_nested_search"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:64": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 64,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:67": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 67,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:68": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 68,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:69": {
            "hits": 1,
            "time": 0.0,
            "time_per_hit": 0.0,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 69,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:70": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 70,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:71": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 71,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:72": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 72,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:73": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 73,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:74": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 74,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:75": {
            "hits": 7,
            "time": 7e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 75,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:76": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 76,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:77": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 77,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:78": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 78,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:79": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 79,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:80": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 80,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:81": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 81,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:99": {
            "hits": 11,
            "time": 8e-06,
            "time_per_hit": 7.272727272727272e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 99,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:100": {
            "hits": 110,
            "time": 0.000104,
            "time_per_hit": 9.454545454545454e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 100,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:101": {
            "hits": 100,
            "time": 8.9e-05,
            "time_per_hit": 8.9e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 101,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:102": {
            "hits": 2,
            "time": 2e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 102,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:104": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 104,
            "function": "overly_complex_function"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:113": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 113,
            "function": "inefficient_data_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:114": {
            "hits": 1,
            "time": 1e-06,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 114,
            "function": "inefficient_data_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:116": {
            "hits": 201,
            "time": 0.000166,
            "time_per_hit": 8.258706467661692e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 116,
            "function": "inefficient_data_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:117": {
            "hits": 200,
            "time": 0.000311,
            "time_per_hit": 1.5550000000000001e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 117,
            "function": "inefficient_data_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:118": {
            "hits": 200,
            "time": 0.000164,
            "time_per_hit": 8.2e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 118,
            "function": "inefficient_data_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:119": {
            "hits": 200,
            "time": 0.000179,
            "time_per_hit": 8.949999999999999e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 119,
            "function": "inefficient_data_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:121": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 121,
            "function": "inefficient_data_operations"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:27": {
            "hits": 242785,
            "time": 0.223865,
            "time_per_hit": 9.220709681405359e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 27,
            "function": "fibonacci_recursive"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:28": {
            "hits": 121393,
            "time": 0.165787,
            "time_per_hit": 1.3657047770464523e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 28,
            "function": "fibonacci_recursive"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:29": {
            "hits": 121392,
            "time": 0.59586,
            "time_per_hit": 4.908560695927244e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 29,
            "function": "fibonacci_recursive"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:34": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 34,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:36": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 36,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:37": {
            "hits": 25,
            "time": 2.5e-05,
            "time_per_hit": 1e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 37,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:38": {
            "hits": 24,
            "time": 2.3e-05,
            "time_per_hit": 9.583333333333334e-07,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 38,
            "function": "fibonacci_iterative"
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:39": {
            "hits": 1,
            "time": 2e-06,
            "time_per_hit": 2e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "line_number": 39,
            "function": "fibonacci_iterative"
          }
        },
        "function_profiles": {
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:mkdtemp": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "mkdtemp",
            "total_time": 0.00177,
            "total_hits": 20,
            "line_details": [
              {
                "line_number": 373,
                "hits": 2,
                "time_us": 355.0,
                "per_hit_us": 177.5,
                "line_content": "prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)"
              },
              {
                "line_number": 375,
                "hits": 2,
                "time_us": 69.0,
                "per_hit_us": 34.5,
                "line_content": "names = _get_candidate_names()"
              },
              {
                "line_number": 376,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if output_type is bytes:"
              },
              {
                "line_number": 379,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "for seq in range(TMP_MAX):"
              },
              {
                "line_number": 380,
                "hits": 2,
                "time_us": 724.0,
                "per_hit_us": 362.0,
                "line_content": "name = next(names)"
              },
              {
                "line_number": 381,
                "hits": 2,
                "time_us": 42.0,
                "per_hit_us": 21.0,
                "line_content": "file = _os.path.join(dir, prefix + name + suffix)"
              },
              {
                "line_number": 382,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "_sys.audit(\"tempfile.mkdtemp\", file)"
              },
              {
                "line_number": 383,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "try:"
              },
              {
                "line_number": 384,
                "hits": 2,
                "time_us": 523.0,
                "per_hit_us": 261.5,
                "line_content": "_os.mkdir(file, 0o700)"
              },
              {
                "line_number": 395,
                "hits": 2,
                "time_us": 48.0,
                "per_hit_us": 24.0,
                "line_content": "return _os.path.abspath(file)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_sanitize_params": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_sanitize_params",
            "total_time": 0.00023299999999999994,
            "total_hits": 18,
            "line_details": [
              {
                "line_number": 116,
                "hits": 2,
                "time_us": 123.0,
                "per_hit_us": 61.5,
                "line_content": "output_type = _infer_return_type(prefix, suffix, dir)"
              },
              {
                "line_number": 117,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if suffix is None:"
              },
              {
                "line_number": 118,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "suffix = output_type()"
              },
              {
                "line_number": 119,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "if prefix is None:"
              },
              {
                "line_number": 120,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if output_type is str:"
              },
              {
                "line_number": 121,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "prefix = template"
              },
              {
                "line_number": 124,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if dir is None:"
              },
              {
                "line_number": 125,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if output_type is str:"
              },
              {
                "line_number": 126,
                "hits": 2,
                "time_us": 94.0,
                "per_hit_us": 47.0,
                "line_content": "dir = gettempdir()"
              },
              {
                "line_number": 129,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "return prefix, suffix, dir, output_type"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_infer_return_type": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_infer_return_type",
            "total_time": 4.0999999999999994e-05,
            "total_hits": 30,
            "line_details": [
              {
                "line_number": 87,
                "hits": 2,
                "time_us": 6.0,
                "per_hit_us": 3.0,
                "line_content": "return_type = None"
              },
              {
                "line_number": 88,
                "hits": 8,
                "time_us": 9.0,
                "per_hit_us": 1.125,
                "line_content": "for arg in args:"
              },
              {
                "line_number": 89,
                "hits": 6,
                "time_us": 5.0,
                "per_hit_us": 0.8333333333333334,
                "line_content": "if arg is None:"
              },
              {
                "line_number": 90,
                "hits": 5,
                "time_us": 5.0,
                "per_hit_us": 1.0,
                "line_content": "continue"
              },
              {
                "line_number": 92,
                "hits": 1,
                "time_us": 5.0,
                "per_hit_us": 5.0,
                "line_content": "if isinstance(arg, _os.PathLike):"
              },
              {
                "line_number": 95,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if isinstance(arg, bytes):"
              },
              {
                "line_number": 101,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if return_type is bytes:"
              },
              {
                "line_number": 104,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return_type = str"
              },
              {
                "line_number": 105,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if return_type is None:"
              },
              {
                "line_number": 106,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "if tempdir is None or isinstance(tempdir, str):"
              },
              {
                "line_number": 107,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "return str  # tempfile APIs return a str by default."
              },
              {
                "line_number": 111,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return return_type"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:gettempdir": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "gettempdir",
            "total_time": 6.6e-05,
            "total_hits": 2,
            "line_details": [
              {
                "line_number": 315,
                "hits": 2,
                "time_us": 66.0,
                "per_hit_us": 33.0,
                "line_content": "return _os.fsdecode(_gettempdir())"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_gettempdir": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_gettempdir",
            "total_time": 4.9999999999999996e-06,
            "total_hits": 4,
            "line_details": [
              {
                "line_number": 304,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "if tempdir is None:"
              },
              {
                "line_number": 311,
                "hits": 2,
                "time_us": 3.0,
                "per_hit_us": 1.5,
                "line_content": "return tempdir"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:_get_candidate_names": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py",
            "function": "_get_candidate_names",
            "total_time": 3e-06,
            "total_hits": 2,
            "line_details": [
              {
                "line_number": 233,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "if _name_sequence is None:"
              },
              {
                "line_number": 240,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return _name_sequence"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:RLock": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "RLock",
            "total_time": 2e-06,
            "total_hits": 2,
            "line_details": [
              {
                "line_number": 133,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if _CRLock is None:"
              },
              {
                "line_number": 135,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return _CRLock(*args, **kwargs)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:_newname": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "_newname",
            "total_time": 2e-06,
            "total_hits": 1,
            "line_details": [
              {
                "line_number": 840,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "return name_template % _counter()"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:_make_invoke_excepthook": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "_make_invoke_excepthook",
            "total_time": 8e-06,
            "total_hits": 9,
            "line_details": [
              {
                "line_number": 1361,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "old_excepthook = excepthook"
              },
              {
                "line_number": 1362,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "old_sys_excepthook = _sys.excepthook"
              },
              {
                "line_number": 1363,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if old_excepthook is None:"
              },
              {
                "line_number": 1365,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if old_sys_excepthook is None:"
              },
              {
                "line_number": 1368,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "sys_exc_info = _sys.exc_info"
              },
              {
                "line_number": 1369,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "local_print = print"
              },
              {
                "line_number": 1370,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "local_sys = _sys"
              },
              {
                "line_number": 1372,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def invoke_excepthook(thread):"
              },
              {
                "line_number": 1404,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return invoke_excepthook"
              }
            ]
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py:register_trace_function": {
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py",
            "function": "register_trace_function",
            "total_time": 4.5e-05,
            "total_hits": 1,
            "line_details": [
              {
                "line_number": 124,
                "hits": 1,
                "time_us": 45.0,
                "per_hit_us": 45.0,
                "line_content": "_trace_multiplexer.register_profiler(profiler_name, trace_func)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:run_sample_workload": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "function": "run_sample_workload",
            "total_time": 21.455605000000002,
            "total_hits": 6,
            "line_details": [
              {
                "line_number": 43,
                "hits": 1,
                "time_us": 3491.0,
                "per_hit_us": 3491.0,
                "line_content": "from sample_workload import mixed_workload"
              },
              {
                "line_number": 45,
                "hits": 1,
                "time_us": 9.0,
                "per_hit_us": 9.0,
                "line_content": "print(\"\ud83c\udfaf Executing workload to be profiled...\")"
              },
              {
                "line_number": 46,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "print(\"   (Replace this section with your own code)\")"
              },
              {
                "line_number": 47,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "print()"
              },
              {
                "line_number": 50,
                "hits": 1,
                "time_us": 21452093.0,
                "per_hit_us": 21452093.0,
                "line_content": "results = mixed_workload()"
              },
              {
                "line_number": 52,
                "hits": 1,
                "time_us": 8.0,
                "per_hit_us": 8.0,
                "line_content": "return results"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:_type_check": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "function": "_type_check",
            "total_time": 0.000119,
            "total_hits": 36,
            "line_details": [
              {
                "line_number": 187,
                "hits": 3,
                "time_us": 4.0,
                "per_hit_us": 1.3333333333333333,
                "line_content": "invalid_generic_forms = (Generic, Protocol)"
              },
              {
                "line_number": 188,
                "hits": 3,
                "time_us": 3.0,
                "per_hit_us": 1.0,
                "line_content": "if not allow_special_forms:"
              },
              {
                "line_number": 189,
                "hits": 3,
                "time_us": 3.0,
                "per_hit_us": 1.0,
                "line_content": "invalid_generic_forms += (ClassVar,)"
              },
              {
                "line_number": 190,
                "hits": 3,
                "time_us": 3.0,
                "per_hit_us": 1.0,
                "line_content": "if is_argument:"
              },
              {
                "line_number": 191,
                "hits": 3,
                "time_us": 3.0,
                "per_hit_us": 1.0,
                "line_content": "invalid_generic_forms += (Final,)"
              },
              {
                "line_number": 193,
                "hits": 3,
                "time_us": 80.0,
                "per_hit_us": 26.666666666666668,
                "line_content": "arg = _type_convert(arg, module=module, allow_special_forms=allow_special_forms)"
              },
              {
                "line_number": 194,
                "hits": 3,
                "time_us": 3.0,
                "per_hit_us": 1.0,
                "line_content": "if (isinstance(arg, _GenericAlias) and"
              },
              {
                "line_number": 197,
                "hits": 3,
                "time_us": 4.0,
                "per_hit_us": 1.3333333333333333,
                "line_content": "if arg in (Any, LiteralString, NoReturn, Never, Self, TypeAlias):"
              },
              {
                "line_number": 199,
                "hits": 3,
                "time_us": 2.0,
                "per_hit_us": 0.6666666666666666,
                "line_content": "if allow_special_forms and arg in (ClassVar, Final):"
              },
              {
                "line_number": 201,
                "hits": 3,
                "time_us": 4.0,
                "per_hit_us": 1.3333333333333333,
                "line_content": "if isinstance(arg, _SpecialForm) or arg in (Generic, Protocol):"
              },
              {
                "line_number": 203,
                "hits": 3,
                "time_us": 3.0,
                "per_hit_us": 1.0,
                "line_content": "if type(arg) is tuple:"
              },
              {
                "line_number": 205,
                "hits": 3,
                "time_us": 7.0,
                "per_hit_us": 2.3333333333333335,
                "line_content": "return arg"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:_type_convert": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "function": "_type_convert",
            "total_time": 2e-05,
            "total_hits": 9,
            "line_details": [
              {
                "line_number": 168,
                "hits": 3,
                "time_us": 9.0,
                "per_hit_us": 3.0,
                "line_content": "if arg is None:"
              },
              {
                "line_number": 170,
                "hits": 3,
                "time_us": 4.0,
                "per_hit_us": 1.3333333333333333,
                "line_content": "if isinstance(arg, str):"
              },
              {
                "line_number": 172,
                "hits": 3,
                "time_us": 7.0,
                "per_hit_us": 2.3333333333333335,
                "line_content": "return arg"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py:_is_dunder": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py",
            "function": "_is_dunder",
            "total_time": 1.9e-05,
            "total_hits": 12,
            "line_details": [
              {
                "line_number": 1162,
                "hits": 12,
                "time_us": 19.0,
                "per_hit_us": 1.5833333333333333,
                "line_content": "return attr.startswith('__') and attr.endswith('__')"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:mixed_workload": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "mixed_workload",
            "total_time": 21.43889,
            "total_hits": 34,
            "line_details": [
              {
                "line_number": 339,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "print(\"\ud83d\ude80 Running mixed workload demonstration...\")"
              },
              {
                "line_number": 341,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results = {}"
              },
              {
                "line_number": 344,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 345,
                "hits": 1,
                "time_us": 17407133.0,
                "per_hit_us": 17407133.0,
                "line_content": "cpu_result = cpu_intensive_calculation()"
              },
              {
                "line_number": 346,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "results[\"cpu_time\"] = time.time() - start_time"
              },
              {
                "line_number": 347,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"cpu_result_sample\"] = cpu_result"
              },
              {
                "line_number": 350,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 351,
                "hits": 1,
                "time_us": 1710393.0,
                "per_hit_us": 1710393.0,
                "line_content": "memory_data = memory_intensive_operations()"
              },
              {
                "line_number": 352,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"memory_time\"] = time.time() - start_time"
              },
              {
                "line_number": 353,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"memory_objects_created\"] = len(memory_data)"
              },
              {
                "line_number": 356,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 357,
                "hits": 1,
                "time_us": 400954.0,
                "per_hit_us": 400954.0,
                "line_content": "io_result = file_io_operations()"
              },
              {
                "line_number": 358,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "results[\"io_time\"] = time.time() - start_time"
              },
              {
                "line_number": 359,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"io_operations\"] = io_result"
              },
              {
                "line_number": 362,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 363,
                "hits": 1,
                "time_us": 156.0,
                "per_hit_us": 156.0,
                "line_content": "call_result = nested_function_calls()"
              },
              {
                "line_number": 364,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"call_time\"] = time.time() - start_time"
              },
              {
                "line_number": 365,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"call_result\"] = call_result"
              },
              {
                "line_number": 368,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 369,
                "hits": 1,
                "time_us": 70197.0,
                "per_hit_us": 70197.0,
                "line_content": "processing_result = data_processing_pipeline()"
              },
              {
                "line_number": 370,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "results[\"processing_time\"] = time.time() - start_time"
              },
              {
                "line_number": 371,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"processing_stats\"] = processing_result"
              },
              {
                "line_number": 374,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 375,
                "hits": 1,
                "time_us": 2455.0,
                "per_hit_us": 2455.0,
                "line_content": "antipattern_result = demonstrate_anti_patterns()"
              },
              {
                "line_number": 376,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"antipattern_time\"] = time.time() - start_time"
              },
              {
                "line_number": 377,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "results[\"antipattern_stats\"] = antipattern_result"
              },
              {
                "line_number": 380,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 381,
                "hits": 1,
                "time_us": 1847291.0,
                "per_hit_us": 1847291.0,
                "line_content": "fib_recursive = fibonacci_recursive(25)  # Small enough to not take forever"
              },
              {
                "line_number": 382,
                "hits": 1,
                "time_us": 6.0,
                "per_hit_us": 6.0,
                "line_content": "results[\"fib_recursive_time\"] = time.time() - start_time"
              },
              {
                "line_number": 384,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 385,
                "hits": 1,
                "time_us": 261.0,
                "per_hit_us": 261.0,
                "line_content": "fib_iterative = fibonacci_iterative(25)"
              },
              {
                "line_number": 386,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "results[\"fib_iterative_time\"] = time.time() - start_time"
              },
              {
                "line_number": 388,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "results[\"fib_results_match\"] = fib_recursive == fib_iterative"
              },
              {
                "line_number": 390,
                "hits": 1,
                "time_us": 4.0,
                "per_hit_us": 4.0,
                "line_content": "return results"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:cpu_intensive_calculation": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "cpu_intensive_calculation",
            "total_time": 14.844223,
            "total_hits": 16100408,
            "line_details": [
              {
                "line_number": 134,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "print(\"\ud83d\udd25 Running CPU-intensive calculations...\")"
              },
              {
                "line_number": 137,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "size = 200"
              },
              {
                "line_number": 138,
                "hits": 1,
                "time_us": 23409.0,
                "per_hit_us": 23409.0,
                "line_content": "matrix_a = [[random.random() for _ in range(size)] for _ in range(size)]"
              },
              {
                "line_number": 139,
                "hits": 1,
                "time_us": 24450.0,
                "per_hit_us": 24450.0,
                "line_content": "matrix_b = [[random.random() for _ in range(size)] for _ in range(size)]"
              },
              {
                "line_number": 141,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "result = 0.0"
              },
              {
                "line_number": 142,
                "hits": 201,
                "time_us": 207.0,
                "per_hit_us": 1.0298507462686566,
                "line_content": "for i in range(size):"
              },
              {
                "line_number": 143,
                "hits": 40200,
                "time_us": 36169.0,
                "per_hit_us": 0.8997263681592039,
                "line_content": "for j in range(size):"
              },
              {
                "line_number": 144,
                "hits": 8040000,
                "time_us": 7269199.0,
                "per_hit_us": 0.9041292288557214,
                "line_content": "for k in range(size):"
              },
              {
                "line_number": 145,
                "hits": 8000000,
                "time_us": 7470750.0,
                "per_hit_us": 0.93384375,
                "line_content": "result += matrix_a[i][k] * matrix_b[k][j]"
              },
              {
                "line_number": 148,
                "hits": 10001,
                "time_us": 9516.0,
                "per_hit_us": 0.9515048495150484,
                "line_content": "for i in range(10000):"
              },
              {
                "line_number": 149,
                "hits": 10000,
                "time_us": 10506.0,
                "per_hit_us": 1.0506,
                "line_content": "result += math.sin(i) * math.cos(i) * math.sqrt(i + 1)"
              },
              {
                "line_number": 151,
                "hits": 1,
                "time_us": 12.0,
                "per_hit_us": 12.0,
                "line_content": "return result"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:memory_intensive_operations": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "memory_intensive_operations",
            "total_time": 1.5927850000000001,
            "total_hits": 700508,
            "line_details": [
              {
                "line_number": 156,
                "hits": 1,
                "time_us": 6.0,
                "per_hit_us": 6.0,
                "line_content": "print(\"\ud83d\udcbe Running memory-intensive operations...\")"
              },
              {
                "line_number": 159,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "large_list = []"
              },
              {
                "line_number": 160,
                "hits": 50001,
                "time_us": 46229.0,
                "per_hit_us": 0.9245615087698247,
                "line_content": "for i in range(50000):"
              },
              {
                "line_number": 161,
                "hits": 100000,
                "time_us": 92517.0,
                "per_hit_us": 0.9251699999999999,
                "line_content": "large_list.append("
              },
              {
                "line_number": 162,
                "hits": 50000,
                "time_us": 70092.0,
                "per_hit_us": 1.40184,
                "line_content": "{"
              },
              {
                "line_number": 163,
                "hits": 50000,
                "time_us": 43087.0,
                "per_hit_us": 0.8617400000000001,
                "line_content": "\"id\": i,"
              },
              {
                "line_number": 164,
                "hits": 50000,
                "time_us": 689497.0,
                "per_hit_us": 13.78994,
                "line_content": "\"data\": [random.random() for _ in range(20)],"
              },
              {
                "line_number": 165,
                "hits": 50000,
                "time_us": 58571.0,
                "per_hit_us": 1.1714200000000001,
                "line_content": "\"metadata\": {"
              },
              {
                "line_number": 166,
                "hits": 50000,
                "time_us": 49503.0,
                "per_hit_us": 0.9900599999999999,
                "line_content": "\"timestamp\": time.time(),"
              },
              {
                "line_number": 167,
                "hits": 50000,
                "time_us": 51160.0,
                "per_hit_us": 1.0232,
                "line_content": "\"category\": f\"category_{i % 10}\","
              },
              {
                "line_number": 168,
                "hits": 50000,
                "time_us": 242194.0,
                "per_hit_us": 4.84388,
                "line_content": "\"tags\": [f\"tag_{j}\" for j in range(i % 5 + 1)],"
              },
              {
                "line_number": 174,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "lookup_dict = {}"
              },
              {
                "line_number": 175,
                "hits": 50001,
                "time_us": 46195.0,
                "per_hit_us": 0.9238815223695526,
                "line_content": "for item in large_list:"
              },
              {
                "line_number": 176,
                "hits": 50000,
                "time_us": 45062.0,
                "per_hit_us": 0.90124,
                "line_content": "category = item[\"metadata\"][\"category\"]"
              },
              {
                "line_number": 177,
                "hits": 50000,
                "time_us": 46196.0,
                "per_hit_us": 0.92392,
                "line_content": "if category not in lookup_dict:"
              },
              {
                "line_number": 178,
                "hits": 10,
                "time_us": 8.0,
                "per_hit_us": 0.8,
                "line_content": "lookup_dict[category] = []"
              },
              {
                "line_number": 179,
                "hits": 50000,
                "time_us": 45679.0,
                "per_hit_us": 0.9135800000000001,
                "line_content": "lookup_dict[category].append(item)"
              },
              {
                "line_number": 182,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "temp_lists = []"
              },
              {
                "line_number": 183,
                "hits": 101,
                "time_us": 113.0,
                "per_hit_us": 1.118811881188119,
                "line_content": "for i in range(100):"
              },
              {
                "line_number": 184,
                "hits": 100,
                "time_us": 65852.0,
                "per_hit_us": 658.52,
                "line_content": "temp_list = [random.random() for _ in range(1000)]"
              },
              {
                "line_number": 185,
                "hits": 100,
                "time_us": 107.0,
                "per_hit_us": 1.07,
                "line_content": "temp_lists.append(temp_list)"
              },
              {
                "line_number": 186,
                "hits": 100,
                "time_us": 111.0,
                "per_hit_us": 1.11,
                "line_content": "if len(temp_lists) > 10:"
              },
              {
                "line_number": 187,
                "hits": 90,
                "time_us": 594.0,
                "per_hit_us": 6.6,
                "line_content": "temp_lists.pop(0)  # Remove oldest"
              },
              {
                "line_number": 189,
                "hits": 1,
                "time_us": 8.0,
                "per_hit_us": 8.0,
                "line_content": "return large_list"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:file_io_operations": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "file_io_operations",
            "total_time": 0.4003439999999999,
            "total_hits": 192,
            "line_details": [
              {
                "line_number": 194,
                "hits": 1,
                "time_us": 4.0,
                "per_hit_us": 4.0,
                "line_content": "print(\"\ud83d\udcc1 Running file I/O operations...\")"
              },
              {
                "line_number": 197,
                "hits": 1,
                "time_us": 1171.0,
                "per_hit_us": 1171.0,
                "line_content": "temp_dir = tempfile.mkdtemp()"
              },
              {
                "line_number": 199,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "try:"
              },
              {
                "line_number": 201,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "file_data = {}"
              },
              {
                "line_number": 202,
                "hits": 11,
                "time_us": 16.0,
                "per_hit_us": 1.4545454545454546,
                "line_content": "for i in range(10):"
              },
              {
                "line_number": 203,
                "hits": 10,
                "time_us": 271.0,
                "per_hit_us": 27.1,
                "line_content": "filename = os.path.join(temp_dir, f\"test_file_{i}.json\")"
              },
              {
                "line_number": 204,
                "hits": 10,
                "time_us": 13.0,
                "per_hit_us": 1.3,
                "line_content": "data = {"
              },
              {
                "line_number": 205,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "\"file_id\": i,"
              },
              {
                "line_number": 206,
                "hits": 10,
                "time_us": 6014.0,
                "per_hit_us": 601.4,
                "line_content": "\"content\": [random.random() for _ in range(1000)],"
              },
              {
                "line_number": 207,
                "hits": 10,
                "time_us": 22.0,
                "per_hit_us": 2.2,
                "line_content": "\"metadata\": {\"created\": time.time()},"
              },
              {
                "line_number": 210,
                "hits": 20,
                "time_us": 3171.0,
                "per_hit_us": 158.55,
                "line_content": "with open(filename, \"w\") as f:"
              },
              {
                "line_number": 211,
                "hits": 10,
                "time_us": 385205.0,
                "per_hit_us": 38520.5,
                "line_content": "json.dump(data, f)"
              },
              {
                "line_number": 213,
                "hits": 10,
                "time_us": 19.0,
                "per_hit_us": 1.9,
                "line_content": "file_data[filename] = data"
              },
              {
                "line_number": 216,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "read_data = {}"
              },
              {
                "line_number": 217,
                "hits": 11,
                "time_us": 12.0,
                "per_hit_us": 1.090909090909091,
                "line_content": "for filename in file_data:"
              },
              {
                "line_number": 218,
                "hits": 20,
                "time_us": 387.0,
                "per_hit_us": 19.35,
                "line_content": "with open(filename, \"r\") as f:"
              },
              {
                "line_number": 219,
                "hits": 10,
                "time_us": 3221.0,
                "per_hit_us": 322.1,
                "line_content": "read_data[filename] = json.load(f)"
              },
              {
                "line_number": 222,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "total_values = 0"
              },
              {
                "line_number": 223,
                "hits": 11,
                "time_us": 12.0,
                "per_hit_us": 1.090909090909091,
                "line_content": "for data in read_data.values():"
              },
              {
                "line_number": 224,
                "hits": 10,
                "time_us": 12.0,
                "per_hit_us": 1.2,
                "line_content": "total_values += len(data[\"content\"])"
              },
              {
                "line_number": 226,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "return {\"files_processed\": len(read_data), \"total_values\": total_values}"
              },
              {
                "line_number": 230,
                "hits": 11,
                "time_us": 39.0,
                "per_hit_us": 3.5454545454545454,
                "line_content": "for filename in os.listdir(temp_dir):"
              },
              {
                "line_number": 231,
                "hits": 10,
                "time_us": 694.0,
                "per_hit_us": 69.4,
                "line_content": "os.remove(os.path.join(temp_dir, filename))"
              },
              {
                "line_number": 232,
                "hits": 1,
                "time_us": 46.0,
                "per_hit_us": 46.0,
                "line_content": "os.rmdir(temp_dir)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:dump": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "dump",
            "total_time": 0.379691,
            "total_hits": 20400,
            "line_details": [
              {
                "line_number": 165,
                "hits": 10,
                "time_us": 12.0,
                "per_hit_us": 1.2,
                "line_content": "if (not skipkeys and ensure_ascii and"
              },
              {
                "line_number": 166,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "check_circular and allow_nan and"
              },
              {
                "line_number": 167,
                "hits": 10,
                "time_us": 9.0,
                "per_hit_us": 0.9,
                "line_content": "cls is None and indent is None and separators is None and"
              },
              {
                "line_number": 168,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "default is None and not sort_keys and not kw):"
              },
              {
                "line_number": 169,
                "hits": 10,
                "time_us": 503.0,
                "per_hit_us": 50.3,
                "line_content": "iterable = _default_encoder.iterencode(obj)"
              },
              {
                "line_number": 179,
                "hits": 10180,
                "time_us": 367224.0,
                "per_hit_us": 36.07308447937132,
                "line_content": "for chunk in iterable:"
              },
              {
                "line_number": 180,
                "hits": 10170,
                "time_us": 11923.0,
                "per_hit_us": 1.1723697148475911,
                "line_content": "fp.write(chunk)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:_make_iterencode": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_make_iterencode",
            "total_time": 6.9e-05,
            "total_hits": 50,
            "line_details": [
              {
                "line_number": 275,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "if _indent is not None and not isinstance(_indent, str):"
              },
              {
                "line_number": 278,
                "hits": 10,
                "time_us": 13.0,
                "per_hit_us": 1.3,
                "line_content": "def _iterencode_list(lst, _current_indent_level):"
              },
              {
                "line_number": 334,
                "hits": 10,
                "time_us": 17.0,
                "per_hit_us": 1.7,
                "line_content": "def _iterencode_dict(dct, _current_indent_level):"
              },
              {
                "line_number": 414,
                "hits": 10,
                "time_us": 11.0,
                "per_hit_us": 1.1,
                "line_content": "def _iterencode(o, _current_indent_level):"
              },
              {
                "line_number": 443,
                "hits": 10,
                "time_us": 18.0,
                "per_hit_us": 1.8,
                "line_content": "return _iterencode"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:load": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "load",
            "total_time": 0.0029519999999999998,
            "total_hits": 70,
            "line_details": [
              {
                "line_number": 293,
                "hits": 30,
                "time_us": 2897.0,
                "per_hit_us": 96.56666666666668,
                "line_content": "return loads(fp.read(),"
              },
              {
                "line_number": 294,
                "hits": 10,
                "time_us": 15.0,
                "per_hit_us": 1.5,
                "line_content": "cls=cls, object_hook=object_hook,"
              },
              {
                "line_number": 295,
                "hits": 10,
                "time_us": 9.0,
                "per_hit_us": 0.9,
                "line_content": "parse_float=parse_float, parse_int=parse_int,"
              },
              {
                "line_number": 296,
                "hits": 20,
                "time_us": 31.0,
                "per_hit_us": 1.55,
                "line_content": "parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)"
              }
            ]
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:loads": {
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "loads",
            "total_time": 0.0022559999999999998,
            "total_hits": 60,
            "line_details": [
              {
                "line_number": 333,
                "hits": 10,
                "time_us": 11.0,
                "per_hit_us": 1.1,
                "line_content": "if isinstance(s, str):"
              },
              {
                "line_number": 334,
                "hits": 10,
                "time_us": 13.0,
                "per_hit_us": 1.3,
                "line_content": "if s.startswith('\\ufeff'):"
              },
              {
                "line_number": 343,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "if (cls is None and object_hook is None and"
              },
              {
                "line_number": 344,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "parse_int is None and parse_float is None and"
              },
              {
                "line_number": 345,
                "hits": 10,
                "time_us": 10.0,
                "per_hit_us": 1.0,
                "line_content": "parse_constant is None and object_pairs_hook is None and not kw):"
              },
              {
                "line_number": 346,
                "hits": 10,
                "time_us": 2202.0,
                "per_hit_us": 220.2,
                "line_content": "return _default_decoder.decode(s)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:nested_function_calls": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "nested_function_calls",
            "total_time": 7.8e-05,
            "total_hits": 7,
            "line_details": [
              {
                "line_number": 237,
                "hits": 1,
                "time_us": 4.0,
                "per_hit_us": 4.0,
                "line_content": "print(\"\ud83c\udf33 Running nested function calls...\")"
              },
              {
                "line_number": 239,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_1(n: int) -> int:"
              },
              {
                "line_number": 244,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_2(n: int) -> int:"
              },
              {
                "line_number": 249,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_3(n: int) -> int:"
              },
              {
                "line_number": 254,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_4(n: int) -> int:"
              },
              {
                "line_number": 259,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "def level_5(n: int) -> int:"
              },
              {
                "line_number": 262,
                "hits": 1,
                "time_us": 69.0,
                "per_hit_us": 69.0,
                "line_content": "return level_1(8)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:data_processing_pipeline": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "data_processing_pipeline",
            "total_time": 0.06992800000000002,
            "total_hits": 19,
            "line_details": [
              {
                "line_number": 267,
                "hits": 1,
                "time_us": 4.0,
                "per_hit_us": 4.0,
                "line_content": "print(\"\u2699\ufe0f  Running data processing pipeline...\")"
              },
              {
                "line_number": 270,
                "hits": 1,
                "time_us": 6540.0,
                "per_hit_us": 6540.0,
                "line_content": "raw_data = [random.random() * 1000 for _ in range(10000)]"
              },
              {
                "line_number": 273,
                "hits": 1,
                "time_us": 6271.0,
                "per_hit_us": 6271.0,
                "line_content": "filtered_data = [x for x in raw_data if x > 100]"
              },
              {
                "line_number": 276,
                "hits": 1,
                "time_us": 5531.0,
                "per_hit_us": 5531.0,
                "line_content": "transformed_data = [math.log(x) if x > 1 else 0 for x in filtered_data]"
              },
              {
                "line_number": 279,
                "hits": 1,
                "time_us": 30.0,
                "per_hit_us": 30.0,
                "line_content": "sum_data = sum(transformed_data)"
              },
              {
                "line_number": 280,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "avg_data = sum_data / len(transformed_data) if transformed_data else 0"
              },
              {
                "line_number": 281,
                "hits": 1,
                "time_us": 71.0,
                "per_hit_us": 71.0,
                "line_content": "max_data = max(transformed_data) if transformed_data else 0"
              },
              {
                "line_number": 282,
                "hits": 1,
                "time_us": 66.0,
                "per_hit_us": 66.0,
                "line_content": "min_data = min(transformed_data) if transformed_data else 0"
              },
              {
                "line_number": 285,
                "hits": 2,
                "time_us": 51401.0,
                "per_hit_us": 25700.5,
                "line_content": "variance = sum((x - avg_data) ** 2 for x in transformed_data) / len("
              },
              {
                "line_number": 286,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "transformed_data"
              },
              {
                "line_number": 288,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "std_dev = math.sqrt(variance)"
              },
              {
                "line_number": 290,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "return {"
              },
              {
                "line_number": 291,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"count\": len(transformed_data),"
              },
              {
                "line_number": 292,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"sum\": sum_data,"
              },
              {
                "line_number": 293,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"average\": avg_data,"
              },
              {
                "line_number": 294,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"maximum\": max_data,"
              },
              {
                "line_number": 295,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"minimum\": min_data,"
              },
              {
                "line_number": 296,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "\"std_dev\": std_dev,"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:demonstrate_anti_patterns": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "demonstrate_anti_patterns",
            "total_time": 0.0022790000000000006,
            "total_hits": 20,
            "line_details": [
              {
                "line_number": 305,
                "hits": 1,
                "time_us": 4.0,
                "per_hit_us": 4.0,
                "line_content": "print(\"\ud83c\udfaf Running anti-pattern demonstrations...\")"
              },
              {
                "line_number": 308,
                "hits": 1,
                "time_us": 4.0,
                "per_hit_us": 4.0,
                "line_content": "test_data = list(range(100))"
              },
              {
                "line_number": 309,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "search_targets = [10, 25, 50, 75, 90]"
              },
              {
                "line_number": 310,
                "hits": 1,
                "time_us": 178.0,
                "per_hit_us": 178.0,
                "line_content": "string_data = [f\"item_{i}\" for i in range(200)]"
              },
              {
                "line_number": 313,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 314,
                "hits": 1,
                "time_us": 666.0,
                "per_hit_us": 666.0,
                "line_content": "nested_results = inefficient_nested_search(test_data, search_targets)"
              },
              {
                "line_number": 315,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "nested_time = time.time() - start_time"
              },
              {
                "line_number": 318,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 319,
                "hits": 1,
                "time_us": 416.0,
                "per_hit_us": 416.0,
                "line_content": "complex_result = overly_complex_function(1, 2, 3, 4, 5, 6, 7)"
              },
              {
                "line_number": 320,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "complex_time = time.time() - start_time"
              },
              {
                "line_number": 323,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "start_time = time.time()"
              },
              {
                "line_number": 324,
                "hits": 1,
                "time_us": 991.0,
                "per_hit_us": 991.0,
                "line_content": "inefficient_results = inefficient_data_operations(string_data)"
              },
              {
                "line_number": 325,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "inefficient_time = time.time() - start_time"
              },
              {
                "line_number": 327,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "return {"
              },
              {
                "line_number": 328,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "\"nested_search_results\": len(nested_results),"
              },
              {
                "line_number": 329,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"nested_search_time\": nested_time,"
              },
              {
                "line_number": 330,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"complex_function_result\": complex_result,"
              },
              {
                "line_number": 331,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"complex_function_time\": complex_time,"
              },
              {
                "line_number": 332,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"inefficient_processing_results\": len(inefficient_results),"
              },
              {
                "line_number": 333,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "\"inefficient_processing_time\": inefficient_time,"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:inefficient_nested_search": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "inefficient_nested_search",
            "total_time": 0.00048400000000000006,
            "total_hits": 528,
            "line_details": [
              {
                "line_number": 47,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "found_items = []"
              },
              {
                "line_number": 50,
                "hits": 6,
                "time_us": 5.0,
                "per_hit_us": 0.8333333333333334,
                "line_content": "for target in targets:"
              },
              {
                "line_number": 51,
                "hits": 255,
                "time_us": 231.0,
                "per_hit_us": 0.9058823529411765,
                "line_content": "for item in data_list:"
              },
              {
                "line_number": 52,
                "hits": 255,
                "time_us": 234.0,
                "per_hit_us": 0.9176470588235294,
                "line_content": "if item == target:"
              },
              {
                "line_number": 53,
                "hits": 5,
                "time_us": 5.0,
                "per_hit_us": 1.0,
                "line_content": "found_items.append(item)"
              },
              {
                "line_number": 54,
                "hits": 5,
                "time_us": 5.0,
                "per_hit_us": 1.0,
                "line_content": "break  # At least we break early"
              },
              {
                "line_number": 56,
                "hits": 1,
                "time_us": 3.0,
                "per_hit_us": 3.0,
                "line_content": "return found_items"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:overly_complex_function": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "overly_complex_function",
            "total_time": 0.000225,
            "total_hits": 246,
            "line_details": [
              {
                "line_number": 64,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "result = 0"
              },
              {
                "line_number": 67,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if param1 > 0:"
              },
              {
                "line_number": 68,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "if param2 > 0:"
              },
              {
                "line_number": 69,
                "hits": 1,
                "time_us": 0.0,
                "per_hit_us": 0.0,
                "line_content": "if param3 > 0:"
              },
              {
                "line_number": 70,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if param4 > 0:"
              },
              {
                "line_number": 71,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if param5 > 0:"
              },
              {
                "line_number": 72,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if param6 > 0:"
              },
              {
                "line_number": 73,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "if param7 > 0:"
              },
              {
                "line_number": 74,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "result = ("
              },
              {
                "line_number": 75,
                "hits": 7,
                "time_us": 7.0,
                "per_hit_us": 1.0,
                "line_content": "param1"
              },
              {
                "line_number": 76,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "+ param2"
              },
              {
                "line_number": 77,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "+ param3"
              },
              {
                "line_number": 78,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "+ param4"
              },
              {
                "line_number": 79,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "+ param5"
              },
              {
                "line_number": 80,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "+ param6"
              },
              {
                "line_number": 81,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "+ param7"
              },
              {
                "line_number": 99,
                "hits": 11,
                "time_us": 8.0,
                "per_hit_us": 0.7272727272727273,
                "line_content": "for i in range(10):"
              },
              {
                "line_number": 100,
                "hits": 110,
                "time_us": 104.0,
                "per_hit_us": 0.9454545454545455,
                "line_content": "for j in range(10):"
              },
              {
                "line_number": 101,
                "hits": 100,
                "time_us": 89.0,
                "per_hit_us": 0.89,
                "line_content": "if i + j == result % 10:"
              },
              {
                "line_number": 102,
                "hits": 2,
                "time_us": 2.0,
                "per_hit_us": 1.0,
                "line_content": "result += 1"
              },
              {
                "line_number": 104,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "return result"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:inefficient_data_operations": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "inefficient_data_operations",
            "total_time": 0.0008240000000000001,
            "total_hits": 804,
            "line_details": [
              {
                "line_number": 113,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "processed_items = []"
              },
              {
                "line_number": 114,
                "hits": 1,
                "time_us": 1.0,
                "per_hit_us": 1.0,
                "line_content": "unique_items = []"
              },
              {
                "line_number": 116,
                "hits": 201,
                "time_us": 166.0,
                "per_hit_us": 0.8258706467661691,
                "line_content": "for item in items:"
              },
              {
                "line_number": 117,
                "hits": 200,
                "time_us": 311.0,
                "per_hit_us": 1.555,
                "line_content": "if item not in processed_items:  # O(n) operation - should use set"
              },
              {
                "line_number": 118,
                "hits": 200,
                "time_us": 164.0,
                "per_hit_us": 0.82,
                "line_content": "processed_items.append(item)"
              },
              {
                "line_number": 119,
                "hits": 200,
                "time_us": 179.0,
                "per_hit_us": 0.895,
                "line_content": "unique_items.append(f\"processed_{item}\")"
              },
              {
                "line_number": 121,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "return unique_items"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:fibonacci_recursive": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "fibonacci_recursive",
            "total_time": 0.9855119999999999,
            "total_hits": 485570,
            "line_details": [
              {
                "line_number": 27,
                "hits": 242785,
                "time_us": 223865.0,
                "per_hit_us": 0.9220709681405359,
                "line_content": "if n <= 1:"
              },
              {
                "line_number": 28,
                "hits": 121393,
                "time_us": 165787.0,
                "per_hit_us": 1.3657047770464523,
                "line_content": "return n"
              },
              {
                "line_number": 29,
                "hits": 121392,
                "time_us": 595860.0,
                "per_hit_us": 4.908560695927243,
                "line_content": "return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"
              }
            ]
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:fibonacci_iterative": {
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "fibonacci_iterative",
            "total_time": 5.4000000000000005e-05,
            "total_hits": 52,
            "line_details": [
              {
                "line_number": 34,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "if n <= 1:"
              },
              {
                "line_number": 36,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "a, b = 0, 1"
              },
              {
                "line_number": 37,
                "hits": 25,
                "time_us": 25.0,
                "per_hit_us": 1.0,
                "line_content": "for _ in range(2, n + 1):"
              },
              {
                "line_number": 38,
                "hits": 24,
                "time_us": 23.0,
                "per_hit_us": 0.9583333333333334,
                "line_content": "a, b = b, a + b"
              },
              {
                "line_number": 39,
                "hits": 1,
                "time_us": 2.0,
                "per_hit_us": 2.0,
                "line_content": "return b"
              }
            ]
          }
        },
        "total_lines": 276,
        "total_hits": 17309120,
        "total_time": 61.17853200000001,
        "stats_output": "Timer unit: 1e-09 s\n\nTotal time: 0.985512 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: fibonacci_recursive at line 25\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    25                                           def fibonacci_recursive(n: int) -> int:\n    26                                               \"\"\"Recursive fibonacci - creates deep call stack for call profiling.\"\"\"\n    27    242785  223865000.0    922.1     22.7      if n <= 1:\n    28    121393  165787000.0   1365.7     16.8          return n\n    29    121392  595860000.0   4908.6     60.5      return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\nTotal time: 5.4e-05 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: fibonacci_iterative at line 32\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    32                                           def fibonacci_iterative(n: int) -> int:\n    33                                               \"\"\"Iterative fibonacci - more efficient, shows different call pattern.\"\"\"\n    34         1       2000.0   2000.0      3.7      if n <= 1:\n    35                                                   return n\n    36         1       2000.0   2000.0      3.7      a, b = 0, 1\n    37        25      25000.0   1000.0     46.3      for _ in range(2, n + 1):\n    38        24      23000.0    958.3     42.6          a, b = b, a + b\n    39         1       2000.0   2000.0      3.7      return b\n\nTotal time: 0.000484 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: inefficient_nested_search at line 42\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    42                                           def inefficient_nested_search(data_list: List[int], targets: List[int]) -> List[int]:\n    43                                               \"\"\"\n    44                                               Example of O(n\u00b2) complexity - will be detected by pattern analysis.\n    45                                               This shows a nested loop anti-pattern.\n    46                                               \"\"\"\n    47         1       1000.0   1000.0      0.2      found_items = []\n    48                                           \n    49                                               # Nested loops create O(n\u00b2) complexity - pattern analysis will detect this\n    50         6       5000.0    833.3      1.0      for target in targets:\n    51       255     231000.0    905.9     47.7          for item in data_list:\n    52       255     234000.0    917.6     48.3              if item == target:\n    53         5       5000.0   1000.0      1.0                  found_items.append(item)\n    54         5       5000.0   1000.0      1.0                  break  # At least we break early\n    55                                           \n    56         1       3000.0   3000.0      0.6      return found_items\n\nTotal time: 0.000225 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: overly_complex_function at line 59\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    59                                           def overly_complex_function(param1, param2, param3, param4, param5, param6, param7):\n    60                                               \"\"\"\n    61                                               Function with too many parameters and high cyclomatic complexity.\n    62                                               Pattern analysis will detect both issues.\n    63                                               \"\"\"\n    64         1       1000.0   1000.0      0.4      result = 0\n    65                                           \n    66                                               # High cyclomatic complexity - deeply nested conditions\n    67         1       1000.0   1000.0      0.4      if param1 > 0:\n    68         1          0.0      0.0      0.0          if param2 > 0:\n    69         1          0.0      0.0      0.0              if param3 > 0:\n    70         1       1000.0   1000.0      0.4                  if param4 > 0:\n    71         1       1000.0   1000.0      0.4                      if param5 > 0:\n    72         1       1000.0   1000.0      0.4                          if param6 > 0:\n    73         1       1000.0   1000.0      0.4                              if param7 > 0:\n    74         1       1000.0   1000.0      0.4                                  result = (\n    75         7       7000.0   1000.0      3.1                                      param1\n    76         1       1000.0   1000.0      0.4                                      + param2\n    77         1       1000.0   1000.0      0.4                                      + param3\n    78         1       1000.0   1000.0      0.4                                      + param4\n    79         1       1000.0   1000.0      0.4                                      + param5\n    80         1       1000.0   1000.0      0.4                                      + param6\n    81         1       1000.0   1000.0      0.4                                      + param7\n    82                                                                           )\n    83                                                                       else:\n    84                                                                           result = (\n    85                                                                               param1 + param2 + param3 + param4 + param5 + param6\n    86                                                                           )\n    87                                                                   else:\n    88                                                                       result = param1 + param2 + param3 + param4 + param5\n    89                                                               else:\n    90                                                                   result = param1 + param2 + param3 + param4\n    91                                                           else:\n    92                                                               result = param1 + param2 + param3\n    93                                                       else:\n    94                                                           result = param1 + param2\n    95                                                   else:\n    96                                                       result = param1\n    97                                           \n    98                                               # More unnecessary complexity\n    99        11       8000.0    727.3      3.6      for i in range(10):\n   100       110     104000.0    945.5     46.2          for j in range(10):\n   101       100      89000.0    890.0     39.6              if i + j == result % 10:\n   102         2       2000.0   1000.0      0.9                  result += 1\n   103                                           \n   104         1       2000.0   2000.0      0.9      return result\n\nTotal time: 0.000824 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: inefficient_data_operations at line 107\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   107                                           def inefficient_data_operations(items: List[str]) -> List[str]:\n   108                                               \"\"\"\n   109                                               Example of inefficient data structure usage.\n   110                                               Using list for membership testing instead of set.\n   111                                               \"\"\"\n   112                                               # Inefficient: using list for membership testing (O(n) per lookup)\n   113         1       1000.0   1000.0      0.1      processed_items = []\n   114         1       1000.0   1000.0      0.1      unique_items = []\n   115                                           \n   116       201     166000.0    825.9     20.1      for item in items:\n   117       200     311000.0   1555.0     37.7          if item not in processed_items:  # O(n) operation - should use set\n   118       200     164000.0    820.0     19.9              processed_items.append(item)\n   119       200     179000.0    895.0     21.7              unique_items.append(f\"processed_{item}\")\n   120                                           \n   121         1       2000.0   2000.0      0.2      return unique_items\n\nTotal time: 14.8442 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: cpu_intensive_calculation at line 132\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   132                                           def cpu_intensive_calculation() -> float:\n   133                                               \"\"\"CPU-bound task - good for sampling profiler hotspot detection.\"\"\"\n   134         1       3000.0   3000.0      0.0      print(\"\ud83d\udd25 Running CPU-intensive calculations...\")\n   135                                           \n   136                                               # Matrix multiplication simulation\n   137         1       1000.0   1000.0      0.0      size = 200\n   138         1   23409000.0 2.34e+07      0.2      matrix_a = [[random.random() for _ in range(size)] for _ in range(size)]\n   139         1   24450000.0 2.44e+07      0.2      matrix_b = [[random.random() for _ in range(size)] for _ in range(size)]\n   140                                           \n   141         1       1000.0   1000.0      0.0      result = 0.0\n   142       201     207000.0   1029.9      0.0      for i in range(size):\n   143     40200   36169000.0    899.7      0.2          for j in range(size):\n   144   8040000 7269199000.0    904.1     49.0              for k in range(size):\n   145   8000000 7470750000.0    933.8     50.3                  result += matrix_a[i][k] * matrix_b[k][j]\n   146                                           \n   147                                               # Mathematical computations\n   148     10001    9516000.0    951.5      0.1      for i in range(10000):\n   149     10000   10506000.0   1050.6      0.1          result += math.sin(i) * math.cos(i) * math.sqrt(i + 1)\n   150                                           \n   151         1      12000.0  12000.0      0.0      return result\n\nTotal time: 1.59279 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: memory_intensive_operations at line 154\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   154                                           def memory_intensive_operations() -> List[Dict[str, Any]]:\n   155                                               \"\"\"Memory allocation patterns - good for memory profiler.\"\"\"\n   156         1       6000.0   6000.0      0.0      print(\"\ud83d\udcbe Running memory-intensive operations...\")\n   157                                           \n   158                                               # Large list allocation\n   159         1       1000.0   1000.0      0.0      large_list = []\n   160     50001   46229000.0    924.6      2.9      for i in range(50000):\n   161    100000   92517000.0    925.2      5.8          large_list.append(\n   162     50000   70092000.0   1401.8      4.4              {\n   163     50000   43087000.0    861.7      2.7                  \"id\": i,\n   164     50000  689497000.0  13789.9     43.3                  \"data\": [random.random() for _ in range(20)],\n   165     50000   58571000.0   1171.4      3.7                  \"metadata\": {\n   166     50000   49503000.0    990.1      3.1                      \"timestamp\": time.time(),\n   167     50000   51160000.0   1023.2      3.2                      \"category\": f\"category_{i % 10}\",\n   168     50000  242194000.0   4843.9     15.2                      \"tags\": [f\"tag_{j}\" for j in range(i % 5 + 1)],\n   169                                                           },\n   170                                                       }\n   171                                                   )\n   172                                           \n   173                                               # Dictionary operations\n   174         1       1000.0   1000.0      0.0      lookup_dict = {}\n   175     50001   46195000.0    923.9      2.9      for item in large_list:\n   176     50000   45062000.0    901.2      2.8          category = item[\"metadata\"][\"category\"]\n   177     50000   46196000.0    923.9      2.9          if category not in lookup_dict:\n   178        10       8000.0    800.0      0.0              lookup_dict[category] = []\n   179     50000   45679000.0    913.6      2.9          lookup_dict[category].append(item)\n   180                                           \n   181                                               # Memory churn - allocate and deallocate\n   182         1       2000.0   2000.0      0.0      temp_lists = []\n   183       101     113000.0   1118.8      0.0      for i in range(100):\n   184       100   65852000.0 658520.0      4.1          temp_list = [random.random() for _ in range(1000)]\n   185       100     107000.0   1070.0      0.0          temp_lists.append(temp_list)\n   186       100     111000.0   1110.0      0.0          if len(temp_lists) > 10:\n   187        90     594000.0   6600.0      0.0              temp_lists.pop(0)  # Remove oldest\n   188                                           \n   189         1       8000.0   8000.0      0.0      return large_list\n\nTotal time: 0.400344 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: file_io_operations at line 192\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   192                                           def file_io_operations() -> Dict[str, Any]:\n   193                                               \"\"\"File I/O operations - shows I/O patterns.\"\"\"\n   194         1       4000.0   4000.0      0.0      print(\"\ud83d\udcc1 Running file I/O operations...\")\n   195                                           \n   196                                               # Create temporary files for I/O testing\n   197         1    1171000.0 1.17e+06      0.3      temp_dir = tempfile.mkdtemp()\n   198                                           \n   199         1       1000.0   1000.0      0.0      try:\n   200                                                   # Write multiple files\n   201         1       1000.0   1000.0      0.0          file_data = {}\n   202        11      16000.0   1454.5      0.0          for i in range(10):\n   203        10     271000.0  27100.0      0.1              filename = os.path.join(temp_dir, f\"test_file_{i}.json\")\n   204        10      13000.0   1300.0      0.0              data = {\n   205        10      10000.0   1000.0      0.0                  \"file_id\": i,\n   206        10    6014000.0 601400.0      1.5                  \"content\": [random.random() for _ in range(1000)],\n   207        10      22000.0   2200.0      0.0                  \"metadata\": {\"created\": time.time()},\n   208                                                       }\n   209                                           \n   210        20    3171000.0 158550.0      0.8              with open(filename, \"w\") as f:\n   211        10  385205000.0 3.85e+07     96.2                  json.dump(data, f)\n   212                                           \n   213        10      19000.0   1900.0      0.0              file_data[filename] = data\n   214                                           \n   215                                                   # Read files back\n   216         1       1000.0   1000.0      0.0          read_data = {}\n   217        11      12000.0   1090.9      0.0          for filename in file_data:\n   218        20     387000.0  19350.0      0.1              with open(filename, \"r\") as f:\n   219        10    3221000.0 322100.0      0.8                  read_data[filename] = json.load(f)\n   220                                           \n   221                                                   # Process data\n   222         1       1000.0   1000.0      0.0          total_values = 0\n   223        11      12000.0   1090.9      0.0          for data in read_data.values():\n   224        10      12000.0   1200.0      0.0              total_values += len(data[\"content\"])\n   225                                           \n   226         1       1000.0   1000.0      0.0          return {\"files_processed\": len(read_data), \"total_values\": total_values}\n   227                                           \n   228                                               finally:\n   229                                                   # Cleanup\n   230        11      39000.0   3545.5      0.0          for filename in os.listdir(temp_dir):\n   231        10     694000.0  69400.0      0.2              os.remove(os.path.join(temp_dir, filename))\n   232         1      46000.0  46000.0      0.0          os.rmdir(temp_dir)\n\nTotal time: 7.8e-05 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: nested_function_calls at line 235\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   235                                           def nested_function_calls() -> int:\n   236                                               \"\"\"Complex function call hierarchy - good for call profiler.\"\"\"\n   237         1       4000.0   4000.0      5.1      print(\"\ud83c\udf33 Running nested function calls...\")\n   238                                           \n   239         1       1000.0   1000.0      1.3      def level_1(n: int) -> int:\n   240                                                   if n <= 0:\n   241                                                       return 1\n   242                                                   return level_2(n - 1) + level_3(n - 1)\n   243                                           \n   244         1       1000.0   1000.0      1.3      def level_2(n: int) -> int:\n   245                                                   if n <= 0:\n   246                                                       return 2\n   247                                                   return level_4(n - 1) * 2\n   248                                           \n   249         1       1000.0   1000.0      1.3      def level_3(n: int) -> int:\n   250                                                   if n <= 0:\n   251                                                       return 3\n   252                                                   return level_4(n - 1) + level_5(n - 1)\n   253                                           \n   254         1       1000.0   1000.0      1.3      def level_4(n: int) -> int:\n   255                                                   if n <= 0:\n   256                                                       return 4\n   257                                                   return level_5(n - 1) + 1\n   258                                           \n   259         1       1000.0   1000.0      1.3      def level_5(n: int) -> int:\n   260                                                   return 5 + (n * 2 if n > 0 else 0)\n   261                                           \n   262         1      69000.0  69000.0     88.5      return level_1(8)\n\nTotal time: 0.069928 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: data_processing_pipeline at line 265\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   265                                           def data_processing_pipeline() -> Dict[str, float]:\n   266                                               \"\"\"Data processing with multiple stages - shows line-by-line execution.\"\"\"\n   267         1       4000.0   4000.0      0.0      print(\"\u2699\ufe0f  Running data processing pipeline...\")\n   268                                           \n   269                                               # Stage 1: Generate raw data\n   270         1    6540000.0 6.54e+06      9.4      raw_data = [random.random() * 1000 for _ in range(10000)]\n   271                                           \n   272                                               # Stage 2: Filter data\n   273         1    6271000.0 6.27e+06      9.0      filtered_data = [x for x in raw_data if x > 100]\n   274                                           \n   275                                               # Stage 3: Transform data\n   276         1    5531000.0 5.53e+06      7.9      transformed_data = [math.log(x) if x > 1 else 0 for x in filtered_data]\n   277                                           \n   278                                               # Stage 4: Aggregate data\n   279         1      30000.0  30000.0      0.0      sum_data = sum(transformed_data)\n   280         1       3000.0   3000.0      0.0      avg_data = sum_data / len(transformed_data) if transformed_data else 0\n   281         1      71000.0  71000.0      0.1      max_data = max(transformed_data) if transformed_data else 0\n   282         1      66000.0  66000.0      0.1      min_data = min(transformed_data) if transformed_data else 0\n   283                                           \n   284                                               # Stage 5: Statistical calculations\n   285         2   51401000.0 2.57e+07     73.5      variance = sum((x - avg_data) ** 2 for x in transformed_data) / len(\n   286         1       1000.0   1000.0      0.0          transformed_data\n   287                                               )\n   288         1       2000.0   2000.0      0.0      std_dev = math.sqrt(variance)\n   289                                           \n   290         1       3000.0   3000.0      0.0      return {\n   291         1       1000.0   1000.0      0.0          \"count\": len(transformed_data),\n   292         1       1000.0   1000.0      0.0          \"sum\": sum_data,\n   293         1       1000.0   1000.0      0.0          \"average\": avg_data,\n   294         1       1000.0   1000.0      0.0          \"maximum\": max_data,\n   295         1       1000.0   1000.0      0.0          \"minimum\": min_data,\n   296         1          0.0      0.0      0.0          \"std_dev\": std_dev,\n   297                                               }\n\nTotal time: 0.002279 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: demonstrate_anti_patterns at line 300\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   300                                           def demonstrate_anti_patterns() -> Dict[str, Any]:\n   301                                               \"\"\"\n   302                                               Function that exercises the anti-patterns for pattern analysis detection.\n   303                                               This shows real examples of code issues that Pycroscope will identify.\n   304                                               \"\"\"\n   305         1       4000.0   4000.0      0.2      print(\"\ud83c\udfaf Running anti-pattern demonstrations...\")\n   306                                           \n   307                                               # Test data\n   308         1       4000.0   4000.0      0.2      test_data = list(range(100))\n   309         1       2000.0   2000.0      0.1      search_targets = [10, 25, 50, 75, 90]\n   310         1     178000.0 178000.0      7.8      string_data = [f\"item_{i}\" for i in range(200)]\n   311                                           \n   312                                               # This will be detected as O(n\u00b2) complexity\n   313         1       2000.0   2000.0      0.1      start_time = time.time()\n   314         1     666000.0 666000.0     29.2      nested_results = inefficient_nested_search(test_data, search_targets)\n   315         1       2000.0   2000.0      0.1      nested_time = time.time() - start_time\n   316                                           \n   317                                               # This will be detected as too many parameters and high complexity\n   318         1       1000.0   1000.0      0.0      start_time = time.time()\n   319         1     416000.0 416000.0     18.3      complex_result = overly_complex_function(1, 2, 3, 4, 5, 6, 7)\n   320         1       1000.0   1000.0      0.0      complex_time = time.time() - start_time\n   321                                           \n   322                                               # This will be detected as inefficient data structure usage\n   323         1       1000.0   1000.0      0.0      start_time = time.time()\n   324         1     991000.0 991000.0     43.5      inefficient_results = inefficient_data_operations(string_data)\n   325         1       1000.0   1000.0      0.0      inefficient_time = time.time() - start_time\n   326                                           \n   327         1       3000.0   3000.0      0.1      return {\n   328         1       2000.0   2000.0      0.1          \"nested_search_results\": len(nested_results),\n   329         1       1000.0   1000.0      0.0          \"nested_search_time\": nested_time,\n   330         1       1000.0   1000.0      0.0          \"complex_function_result\": complex_result,\n   331         1       1000.0   1000.0      0.0          \"complex_function_time\": complex_time,\n   332         1       1000.0   1000.0      0.0          \"inefficient_processing_results\": len(inefficient_results),\n   333         1       1000.0   1000.0      0.0          \"inefficient_processing_time\": inefficient_time,\n   334                                               }\n\nTotal time: 21.4389 s\nFile: /Users/Adam/Pycroscope/docs/examples/sample_workload.py\nFunction: mixed_workload at line 337\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   337                                           def mixed_workload() -> Dict[str, Any]:\n   338                                               \"\"\"Combined workload showing all patterns together.\"\"\"\n   339         1       3000.0   3000.0      0.0      print(\"\ud83d\ude80 Running mixed workload demonstration...\")\n   340                                           \n   341         1       1000.0   1000.0      0.0      results = {}\n   342                                           \n   343                                               # CPU work\n   344         1       2000.0   2000.0      0.0      start_time = time.time()\n   345         1     1.74e+10 1.74e+10     81.2      cpu_result = cpu_intensive_calculation()\n   346         1       3000.0   3000.0      0.0      results[\"cpu_time\"] = time.time() - start_time\n   347         1       1000.0   1000.0      0.0      results[\"cpu_result_sample\"] = cpu_result\n   348                                           \n   349                                               # Memory work\n   350         1       1000.0   1000.0      0.0      start_time = time.time()\n   351         1 1710393000.0 1.71e+09      8.0      memory_data = memory_intensive_operations()\n   352         1       2000.0   2000.0      0.0      results[\"memory_time\"] = time.time() - start_time\n   353         1       1000.0   1000.0      0.0      results[\"memory_objects_created\"] = len(memory_data)\n   354                                           \n   355                                               # I/O work\n   356         1       2000.0   2000.0      0.0      start_time = time.time()\n   357         1  400954000.0 4.01e+08      1.9      io_result = file_io_operations()\n   358         1       3000.0   3000.0      0.0      results[\"io_time\"] = time.time() - start_time\n   359         1       2000.0   2000.0      0.0      results[\"io_operations\"] = io_result\n   360                                           \n   361                                               # Function calls\n   362         1       1000.0   1000.0      0.0      start_time = time.time()\n   363         1     156000.0 156000.0      0.0      call_result = nested_function_calls()\n   364         1       1000.0   1000.0      0.0      results[\"call_time\"] = time.time() - start_time\n   365         1       1000.0   1000.0      0.0      results[\"call_result\"] = call_result\n   366                                           \n   367                                               # Data processing\n   368         1       1000.0   1000.0      0.0      start_time = time.time()\n   369         1   70197000.0 7.02e+07      0.3      processing_result = data_processing_pipeline()\n   370         1       3000.0   3000.0      0.0      results[\"processing_time\"] = time.time() - start_time\n   371         1       1000.0   1000.0      0.0      results[\"processing_stats\"] = processing_result\n   372                                           \n   373                                               # Anti-pattern demonstrations (new)\n   374         1       1000.0   1000.0      0.0      start_time = time.time()\n   375         1    2455000.0 2.46e+06      0.0      antipattern_result = demonstrate_anti_patterns()\n   376         1       2000.0   2000.0      0.0      results[\"antipattern_time\"] = time.time() - start_time\n   377         1       1000.0   1000.0      0.0      results[\"antipattern_stats\"] = antipattern_result\n   378                                           \n   379                                               # Fibonacci comparison\n   380         1       1000.0   1000.0      0.0      start_time = time.time()\n   381         1 1847291000.0 1.85e+09      8.6      fib_recursive = fibonacci_recursive(25)  # Small enough to not take forever\n   382         1       6000.0   6000.0      0.0      results[\"fib_recursive_time\"] = time.time() - start_time\n   383                                           \n   384         1       1000.0   1000.0      0.0      start_time = time.time()\n   385         1     261000.0 261000.0      0.0      fib_iterative = fibonacci_iterative(25)\n   386         1       3000.0   3000.0      0.0      results[\"fib_iterative_time\"] = time.time() - start_time\n   387                                           \n   388         1       2000.0   2000.0      0.0      results[\"fib_results_match\"] = fib_recursive == fib_iterative\n   389                                           \n   390         1       4000.0   4000.0      0.0      return results\n\nTotal time: 21.4556 s\nFile: /Users/Adam/Pycroscope/docs/examples/usage_example.py\nFunction: run_sample_workload at line 28\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    28                                           def run_sample_workload():\n    29                                               \"\"\"\n    30                                               REPLACE THIS SECTION WITH YOUR OWN CODE\n    31                                           \n    32                                               This function runs our sample workload script.\n    33                                               Users should replace this with their own code to profile.\n    34                                           \n    35                                               Examples of what you might put here:\n    36                                               - Import and call your own functions\n    37                                               - Run your data processing pipeline\n    38                                               - Execute your machine learning training\n    39                                               - Run your web scraping script\n    40                                               - Call your API processing logic\n    41                                               \"\"\"\n    42                                               # Import the sample workload (replace this with your own imports)\n    43         1    3491000.0 3.49e+06      0.0      from sample_workload import mixed_workload\n    44                                           \n    45         1       9000.0   9000.0      0.0      print(\"\ud83c\udfaf Executing workload to be profiled...\")\n    46         1       2000.0   2000.0      0.0      print(\"   (Replace this section with your own code)\")\n    47         1       2000.0   2000.0      0.0      print()\n    48                                           \n    49                                               # Execute the workload (replace this with your own function calls)\n    50         1     2.15e+10 2.15e+10    100.0      results = mixed_workload()\n    51                                           \n    52         1       8000.0   8000.0      0.0      return results\n\nTotal time: 4.5e-05 s\nFile: /Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py\nFunction: register_trace_function at line 122\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   122                                           def register_trace_function(profiler_name: str, trace_func: Callable):\n   123                                               \"\"\"Register a trace function with the global multiplexer.\"\"\"\n   124         1      45000.0  45000.0    100.0      _trace_multiplexer.register_profiler(profiler_name, trace_func)\n\nTotal time: 0 s\nFile: /Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py\nFunction: unregister_trace_function at line 127\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   127                                           def unregister_trace_function(profiler_name: str):\n   128                                               \"\"\"Unregister a trace function from the global multiplexer.\"\"\"\n   129                                               _trace_multiplexer.unregister_profiler(profiler_name)\n\nTotal time: 0.379691 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py\nFunction: dump at line 120\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   120                                           def dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True,\n   121                                                   allow_nan=True, cls=None, indent=None, separators=None,\n   122                                                   default=None, sort_keys=False, **kw):\n   123                                               \"\"\"Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n   124                                               ``.write()``-supporting file-like object).\n   125                                           \n   126                                               If ``skipkeys`` is true then ``dict`` keys that are not basic types\n   127                                               (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n   128                                               instead of raising a ``TypeError``.\n   129                                           \n   130                                               If ``ensure_ascii`` is false, then the strings written to ``fp`` can\n   131                                               contain non-ASCII characters if they appear in strings contained in\n   132                                               ``obj``. Otherwise, all such characters are escaped in JSON strings.\n   133                                           \n   134                                               If ``check_circular`` is false, then the circular reference check\n   135                                               for container types will be skipped and a circular reference will\n   136                                               result in an ``RecursionError`` (or worse).\n   137                                           \n   138                                               If ``allow_nan`` is false, then it will be a ``ValueError`` to\n   139                                               serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)\n   140                                               in strict compliance of the JSON specification, instead of using the\n   141                                               JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n   142                                           \n   143                                               If ``indent`` is a non-negative integer, then JSON array elements and\n   144                                               object members will be pretty-printed with that indent level. An indent\n   145                                               level of 0 will only insert newlines. ``None`` is the most compact\n   146                                               representation.\n   147                                           \n   148                                               If specified, ``separators`` should be an ``(item_separator, key_separator)``\n   149                                               tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n   150                                               ``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n   151                                               you should specify ``(',', ':')`` to eliminate whitespace.\n   152                                           \n   153                                               ``default(obj)`` is a function that should return a serializable version\n   154                                               of obj or raise TypeError. The default simply raises TypeError.\n   155                                           \n   156                                               If *sort_keys* is true (default: ``False``), then the output of\n   157                                               dictionaries will be sorted by key.\n   158                                           \n   159                                               To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n   160                                               ``.default()`` method to serialize additional types), specify it with\n   161                                               the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n   162                                           \n   163                                               \"\"\"\n   164                                               # cached encoder\n   165        10      12000.0   1200.0      0.0      if (not skipkeys and ensure_ascii and\n   166        10      10000.0   1000.0      0.0          check_circular and allow_nan and\n   167        10       9000.0    900.0      0.0          cls is None and indent is None and separators is None and\n   168        10      10000.0   1000.0      0.0          default is None and not sort_keys and not kw):\n   169        10     503000.0  50300.0      0.1          iterable = _default_encoder.iterencode(obj)\n   170                                               else:\n   171                                                   if cls is None:\n   172                                                       cls = JSONEncoder\n   173                                                   iterable = cls(skipkeys=skipkeys, ensure_ascii=ensure_ascii,\n   174                                                       check_circular=check_circular, allow_nan=allow_nan, indent=indent,\n   175                                                       separators=separators,\n   176                                                       default=default, sort_keys=sort_keys, **kw).iterencode(obj)\n   177                                               # could accelerate with writelines in some versions of Python, at\n   178                                               # a debuggability cost\n   179     10180  367224000.0  36073.1     96.7      for chunk in iterable:\n   180     10170   11923000.0   1172.4      3.1          fp.write(chunk)\n\nTotal time: 0.002952 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py\nFunction: load at line 274\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   274                                           def load(fp, *, cls=None, object_hook=None, parse_float=None,\n   275                                                   parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n   276                                               \"\"\"Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n   277                                               a JSON document) to a Python object.\n   278                                           \n   279                                               ``object_hook`` is an optional function that will be called with the\n   280                                               result of any object literal decode (a ``dict``). The return value of\n   281                                               ``object_hook`` will be used instead of the ``dict``. This feature\n   282                                               can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n   283                                           \n   284                                               ``object_pairs_hook`` is an optional function that will be called with the\n   285                                               result of any object literal decoded with an ordered list of pairs.  The\n   286                                               return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n   287                                               This feature can be used to implement custom decoders.  If ``object_hook``\n   288                                               is also defined, the ``object_pairs_hook`` takes priority.\n   289                                           \n   290                                               To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n   291                                               kwarg; otherwise ``JSONDecoder`` is used.\n   292                                               \"\"\"\n   293        30    2897000.0  96566.7     98.1      return loads(fp.read(),\n   294        10      15000.0   1500.0      0.5          cls=cls, object_hook=object_hook,\n   295        10       9000.0    900.0      0.3          parse_float=parse_float, parse_int=parse_int,\n   296        20      31000.0   1550.0      1.1          parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)\n\nTotal time: 0.002256 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py\nFunction: loads at line 299\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   299                                           def loads(s, *, cls=None, object_hook=None, parse_float=None,\n   300                                                   parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n   301                                               \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n   302                                               containing a JSON document) to a Python object.\n   303                                           \n   304                                               ``object_hook`` is an optional function that will be called with the\n   305                                               result of any object literal decode (a ``dict``). The return value of\n   306                                               ``object_hook`` will be used instead of the ``dict``. This feature\n   307                                               can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n   308                                           \n   309                                               ``object_pairs_hook`` is an optional function that will be called with the\n   310                                               result of any object literal decoded with an ordered list of pairs.  The\n   311                                               return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n   312                                               This feature can be used to implement custom decoders.  If ``object_hook``\n   313                                               is also defined, the ``object_pairs_hook`` takes priority.\n   314                                           \n   315                                               ``parse_float``, if specified, will be called with the string\n   316                                               of every JSON float to be decoded. By default this is equivalent to\n   317                                               float(num_str). This can be used to use another datatype or parser\n   318                                               for JSON floats (e.g. decimal.Decimal).\n   319                                           \n   320                                               ``parse_int``, if specified, will be called with the string\n   321                                               of every JSON int to be decoded. By default this is equivalent to\n   322                                               int(num_str). This can be used to use another datatype or parser\n   323                                               for JSON integers (e.g. float).\n   324                                           \n   325                                               ``parse_constant``, if specified, will be called with one of the\n   326                                               following strings: -Infinity, Infinity, NaN.\n   327                                               This can be used to raise an exception if invalid JSON numbers\n   328                                               are encountered.\n   329                                           \n   330                                               To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n   331                                               kwarg; otherwise ``JSONDecoder`` is used.\n   332                                               \"\"\"\n   333        10      11000.0   1100.0      0.5      if isinstance(s, str):\n   334        10      13000.0   1300.0      0.6          if s.startswith('\\ufeff'):\n   335                                                       raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n   336                                                                             s, 0)\n   337                                               else:\n   338                                                   if not isinstance(s, (bytes, bytearray)):\n   339                                                       raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n   340                                                                       f'not {s.__class__.__name__}')\n   341                                                   s = s.decode(detect_encoding(s), 'surrogatepass')\n   342                                           \n   343        10      10000.0   1000.0      0.4      if (cls is None and object_hook is None and\n   344        10      10000.0   1000.0      0.4              parse_int is None and parse_float is None and\n   345        10      10000.0   1000.0      0.4              parse_constant is None and object_pairs_hook is None and not kw):\n   346        10    2202000.0 220200.0     97.6          return _default_decoder.decode(s)\n   347                                               if cls is None:\n   348                                                   cls = JSONDecoder\n   349                                               if object_hook is not None:\n   350                                                   kw['object_hook'] = object_hook\n   351                                               if object_pairs_hook is not None:\n   352                                                   kw['object_pairs_hook'] = object_pairs_hook\n   353                                               if parse_float is not None:\n   354                                                   kw['parse_float'] = parse_float\n   355                                               if parse_int is not None:\n   356                                                   kw['parse_int'] = parse_int\n   357                                               if parse_constant is not None:\n   358                                                   kw['parse_constant'] = parse_constant\n   359                                               return cls(**kw).decode(s)\n\nTotal time: 6.9e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py\nFunction: _make_iterencode at line 260\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   260                                           def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n   261                                                   _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot,\n   262                                                   ## HACK: hand-optimized bytecode; turn globals into locals\n   263                                                   ValueError=ValueError,\n   264                                                   dict=dict,\n   265                                                   float=float,\n   266                                                   id=id,\n   267                                                   int=int,\n   268                                                   isinstance=isinstance,\n   269                                                   list=list,\n   270                                                   str=str,\n   271                                                   tuple=tuple,\n   272                                                   _intstr=int.__repr__,\n   273                                               ):\n   274                                           \n   275        10      10000.0   1000.0     14.5      if _indent is not None and not isinstance(_indent, str):\n   276                                                   _indent = ' ' * _indent\n   277                                           \n   278        10      13000.0   1300.0     18.8      def _iterencode_list(lst, _current_indent_level):\n   279                                                   if not lst:\n   280                                                       yield '[]'\n   281                                                       return\n   282                                                   if markers is not None:\n   283                                                       markerid = id(lst)\n   284                                                       if markerid in markers:\n   285                                                           raise ValueError(\"Circular reference detected\")\n   286                                                       markers[markerid] = lst\n   287                                                   buf = '['\n   288                                                   if _indent is not None:\n   289                                                       _current_indent_level += 1\n   290                                                       newline_indent = '\\n' + _indent * _current_indent_level\n   291                                                       separator = _item_separator + newline_indent\n   292                                                       buf += newline_indent\n   293                                                   else:\n   294                                                       newline_indent = None\n   295                                                       separator = _item_separator\n   296                                                   first = True\n   297                                                   for value in lst:\n   298                                                       if first:\n   299                                                           first = False\n   300                                                       else:\n   301                                                           buf = separator\n   302                                                       if isinstance(value, str):\n   303                                                           yield buf + _encoder(value)\n   304                                                       elif value is None:\n   305                                                           yield buf + 'null'\n   306                                                       elif value is True:\n   307                                                           yield buf + 'true'\n   308                                                       elif value is False:\n   309                                                           yield buf + 'false'\n   310                                                       elif isinstance(value, int):\n   311                                                           # Subclasses of int/float may override __repr__, but we still\n   312                                                           # want to encode them as integers/floats in JSON. One example\n   313                                                           # within the standard library is IntEnum.\n   314                                                           yield buf + _intstr(value)\n   315                                                       elif isinstance(value, float):\n   316                                                           # see comment above for int\n   317                                                           yield buf + _floatstr(value)\n   318                                                       else:\n   319                                                           yield buf\n   320                                                           if isinstance(value, (list, tuple)):\n   321                                                               chunks = _iterencode_list(value, _current_indent_level)\n   322                                                           elif isinstance(value, dict):\n   323                                                               chunks = _iterencode_dict(value, _current_indent_level)\n   324                                                           else:\n   325                                                               chunks = _iterencode(value, _current_indent_level)\n   326                                                           yield from chunks\n   327                                                   if newline_indent is not None:\n   328                                                       _current_indent_level -= 1\n   329                                                       yield '\\n' + _indent * _current_indent_level\n   330                                                   yield ']'\n   331                                                   if markers is not None:\n   332                                                       del markers[markerid]\n   333                                           \n   334        10      17000.0   1700.0     24.6      def _iterencode_dict(dct, _current_indent_level):\n   335                                                   if not dct:\n   336                                                       yield '{}'\n   337                                                       return\n   338                                                   if markers is not None:\n   339                                                       markerid = id(dct)\n   340                                                       if markerid in markers:\n   341                                                           raise ValueError(\"Circular reference detected\")\n   342                                                       markers[markerid] = dct\n   343                                                   yield '{'\n   344                                                   if _indent is not None:\n   345                                                       _current_indent_level += 1\n   346                                                       newline_indent = '\\n' + _indent * _current_indent_level\n   347                                                       item_separator = _item_separator + newline_indent\n   348                                                       yield newline_indent\n   349                                                   else:\n   350                                                       newline_indent = None\n   351                                                       item_separator = _item_separator\n   352                                                   first = True\n   353                                                   if _sort_keys:\n   354                                                       items = sorted(dct.items())\n   355                                                   else:\n   356                                                       items = dct.items()\n   357                                                   for key, value in items:\n   358                                                       if isinstance(key, str):\n   359                                                           pass\n   360                                                       # JavaScript is weakly typed for these, so it makes sense to\n   361                                                       # also allow them.  Many encoders seem to do something like this.\n   362                                                       elif isinstance(key, float):\n   363                                                           # see comment for int/float in _make_iterencode\n   364                                                           key = _floatstr(key)\n   365                                                       elif key is True:\n   366                                                           key = 'true'\n   367                                                       elif key is False:\n   368                                                           key = 'false'\n   369                                                       elif key is None:\n   370                                                           key = 'null'\n   371                                                       elif isinstance(key, int):\n   372                                                           # see comment for int/float in _make_iterencode\n   373                                                           key = _intstr(key)\n   374                                                       elif _skipkeys:\n   375                                                           continue\n   376                                                       else:\n   377                                                           raise TypeError(f'keys must be str, int, float, bool or None, '\n   378                                                                           f'not {key.__class__.__name__}')\n   379                                                       if first:\n   380                                                           first = False\n   381                                                       else:\n   382                                                           yield item_separator\n   383                                                       yield _encoder(key)\n   384                                                       yield _key_separator\n   385                                                       if isinstance(value, str):\n   386                                                           yield _encoder(value)\n   387                                                       elif value is None:\n   388                                                           yield 'null'\n   389                                                       elif value is True:\n   390                                                           yield 'true'\n   391                                                       elif value is False:\n   392                                                           yield 'false'\n   393                                                       elif isinstance(value, int):\n   394                                                           # see comment for int/float in _make_iterencode\n   395                                                           yield _intstr(value)\n   396                                                       elif isinstance(value, float):\n   397                                                           # see comment for int/float in _make_iterencode\n   398                                                           yield _floatstr(value)\n   399                                                       else:\n   400                                                           if isinstance(value, (list, tuple)):\n   401                                                               chunks = _iterencode_list(value, _current_indent_level)\n   402                                                           elif isinstance(value, dict):\n   403                                                               chunks = _iterencode_dict(value, _current_indent_level)\n   404                                                           else:\n   405                                                               chunks = _iterencode(value, _current_indent_level)\n   406                                                           yield from chunks\n   407                                                   if newline_indent is not None:\n   408                                                       _current_indent_level -= 1\n   409                                                       yield '\\n' + _indent * _current_indent_level\n   410                                                   yield '}'\n   411                                                   if markers is not None:\n   412                                                       del markers[markerid]\n   413                                           \n   414        10      11000.0   1100.0     15.9      def _iterencode(o, _current_indent_level):\n   415                                                   if isinstance(o, str):\n   416                                                       yield _encoder(o)\n   417                                                   elif o is None:\n   418                                                       yield 'null'\n   419                                                   elif o is True:\n   420                                                       yield 'true'\n   421                                                   elif o is False:\n   422                                                       yield 'false'\n   423                                                   elif isinstance(o, int):\n   424                                                       # see comment for int/float in _make_iterencode\n   425                                                       yield _intstr(o)\n   426                                                   elif isinstance(o, float):\n   427                                                       # see comment for int/float in _make_iterencode\n   428                                                       yield _floatstr(o)\n   429                                                   elif isinstance(o, (list, tuple)):\n   430                                                       yield from _iterencode_list(o, _current_indent_level)\n   431                                                   elif isinstance(o, dict):\n   432                                                       yield from _iterencode_dict(o, _current_indent_level)\n   433                                                   else:\n   434                                                       if markers is not None:\n   435                                                           markerid = id(o)\n   436                                                           if markerid in markers:\n   437                                                               raise ValueError(\"Circular reference detected\")\n   438                                                           markers[markerid] = o\n   439                                                       o = _default(o)\n   440                                                       yield from _iterencode(o, _current_indent_level)\n   441                                                       if markers is not None:\n   442                                                           del markers[markerid]\n   443        10      18000.0   1800.0     26.1      return _iterencode\n\nTotal time: 3e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/random.py\nFunction: Random.choices at line 454\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   454                                               def choices(self, population, weights=None, *, cum_weights=None, k=1):\n   455                                                   \"\"\"Return a k sized list of population elements chosen with replacement.\n   456                                           \n   457                                                   If the relative weights or cumulative weights are not specified,\n   458                                                   the selections are made with equal probability.\n   459                                           \n   460                                                   \"\"\"\n   461         2       3000.0   1500.0     10.0          random = self.random\n   462         2       3000.0   1500.0     10.0          n = len(population)\n   463         2       2000.0   1000.0      6.7          if cum_weights is None:\n   464         2       3000.0   1500.0     10.0              if weights is None:\n   465         2       1000.0    500.0      3.3                  floor = _floor\n   466         2       2000.0   1000.0      6.7                  n += 0.0    # convert to float for a small speed improvement\n   467         2      16000.0   8000.0     53.3                  return [population[floor(random() * n)] for i in _repeat(None, k)]\n   468                                                       try:\n   469                                                           cum_weights = list(_accumulate(weights))\n   470                                                       except TypeError:\n   471                                                           if not isinstance(weights, int):\n   472                                                               raise\n   473                                                           k = weights\n   474                                                           raise TypeError(\n   475                                                               f'The number of choices must be a keyword argument: {k=}'\n   476                                                           ) from None\n   477                                                   elif weights is not None:\n   478                                                       raise TypeError('Cannot specify both weights and cumulative weights')\n   479                                                   if len(cum_weights) != n:\n   480                                                       raise ValueError('The number of weights does not match the population')\n   481                                                   total = cum_weights[-1] + 0.0   # convert to float\n   482                                                   if total <= 0.0:\n   483                                                       raise ValueError('Total of weights must be greater than zero')\n   484                                                   if not _isfinite(total):\n   485                                                       raise ValueError('Total of weights must be finite')\n   486                                                   bisect = _bisect\n   487                                                   hi = n - 1\n   488                                                   return [population[bisect(cum_weights, random() * total, 0, hi)]\n   489                                                           for i in _repeat(None, k)]\n\nTotal time: 4.1e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _infer_return_type at line 85\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    85                                           def _infer_return_type(*args):\n    86                                               \"\"\"Look at the type of all args and divine their implied return type.\"\"\"\n    87         2       6000.0   3000.0     14.6      return_type = None\n    88         8       9000.0   1125.0     22.0      for arg in args:\n    89         6       5000.0    833.3     12.2          if arg is None:\n    90         5       5000.0   1000.0     12.2              continue\n    91                                           \n    92         1       5000.0   5000.0     12.2          if isinstance(arg, _os.PathLike):\n    93                                                       arg = _os.fspath(arg)\n    94                                           \n    95         1       1000.0   1000.0      2.4          if isinstance(arg, bytes):\n    96                                                       if return_type is str:\n    97                                                           raise TypeError(\"Can't mix bytes and non-bytes in \"\n    98                                                                           \"path components.\")\n    99                                                       return_type = bytes\n   100                                                   else:\n   101         1       1000.0   1000.0      2.4              if return_type is bytes:\n   102                                                           raise TypeError(\"Can't mix bytes and non-bytes in \"\n   103                                                                           \"path components.\")\n   104         1       1000.0   1000.0      2.4              return_type = str\n   105         2       2000.0   1000.0      4.9      if return_type is None:\n   106         1       2000.0   2000.0      4.9          if tempdir is None or isinstance(tempdir, str):\n   107         1       3000.0   3000.0      7.3              return str  # tempfile APIs return a str by default.\n   108                                                   else:\n   109                                                       # we could check for bytes but it'll fail later on anyway\n   110                                                       return bytes\n   111         1       1000.0   1000.0      2.4      return return_type\n\nTotal time: 0.000233 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _sanitize_params at line 114\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   114                                           def _sanitize_params(prefix, suffix, dir):\n   115                                               \"\"\"Common parameter processing for most APIs in this module.\"\"\"\n   116         2     123000.0  61500.0     52.8      output_type = _infer_return_type(prefix, suffix, dir)\n   117         2       2000.0   1000.0      0.9      if suffix is None:\n   118         2       2000.0   1000.0      0.9          suffix = output_type()\n   119         2       3000.0   1500.0      1.3      if prefix is None:\n   120         1       1000.0   1000.0      0.4          if output_type is str:\n   121         1       1000.0   1000.0      0.4              prefix = template\n   122                                                   else:\n   123                                                       prefix = _os.fsencode(template)\n   124         2       2000.0   1000.0      0.9      if dir is None:\n   125         2       2000.0   1000.0      0.9          if output_type is str:\n   126         2      94000.0  47000.0     40.3              dir = gettempdir()\n   127                                                   else:\n   128                                                       dir = gettempdirb()\n   129         2       3000.0   1500.0      1.3      return prefix, suffix, dir, output_type\n\nTotal time: 3e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _get_candidate_names at line 229\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   229                                           def _get_candidate_names():\n   230                                               \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\n   231                                           \n   232                                               global _name_sequence\n   233         1       2000.0   2000.0     66.7      if _name_sequence is None:\n   234                                                   _once_lock.acquire()\n   235                                                   try:\n   236                                                       if _name_sequence is None:\n   237                                                           _name_sequence = _RandomNameSequence()\n   238                                                   finally:\n   239                                                       _once_lock.release()\n   240         1       1000.0   1000.0     33.3      return _name_sequence\n\nTotal time: 5e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: _gettempdir at line 301\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   301                                           def _gettempdir():\n   302                                               \"\"\"Private accessor for tempfile.tempdir.\"\"\"\n   303                                               global tempdir\n   304         2       2000.0   1000.0     40.0      if tempdir is None:\n   305                                                   _once_lock.acquire()\n   306                                                   try:\n   307                                                       if tempdir is None:\n   308                                                           tempdir = _get_default_tempdir()\n   309                                                   finally:\n   310                                                       _once_lock.release()\n   311         2       3000.0   1500.0     60.0      return tempdir\n\nTotal time: 6.6e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: gettempdir at line 313\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   313                                           def gettempdir():\n   314                                               \"\"\"Returns tempfile.tempdir as str.\"\"\"\n   315         2      66000.0  33000.0    100.0      return _os.fsdecode(_gettempdir())\n\nTotal time: 0.00177 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py\nFunction: mkdtemp at line 360\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   360                                           def mkdtemp(suffix=None, prefix=None, dir=None):\n   361                                               \"\"\"User-callable function to create and return a unique temporary\n   362                                               directory.  The return value is the pathname of the directory.\n   363                                           \n   364                                               Arguments are as for mkstemp, except that the 'text' argument is\n   365                                               not accepted.\n   366                                           \n   367                                               The directory is readable, writable, and searchable only by the\n   368                                               creating user.\n   369                                           \n   370                                               Caller is responsible for deleting the directory when done with it.\n   371                                               \"\"\"\n   372                                           \n   373         2     355000.0 177500.0     20.1      prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n   374                                           \n   375         2      69000.0  34500.0      3.9      names = _get_candidate_names()\n   376         2       2000.0   1000.0      0.1      if output_type is bytes:\n   377                                                   names = map(_os.fsencode, names)\n   378                                           \n   379         2       3000.0   1500.0      0.2      for seq in range(TMP_MAX):\n   380         2     724000.0 362000.0     40.9          name = next(names)\n   381         2      42000.0  21000.0      2.4          file = _os.path.join(dir, prefix + name + suffix)\n   382         2       2000.0   1000.0      0.1          _sys.audit(\"tempfile.mkdtemp\", file)\n   383         2       2000.0   1000.0      0.1          try:\n   384         2     523000.0 261500.0     29.5              _os.mkdir(file, 0o700)\n   385                                                   except FileExistsError:\n   386                                                       continue    # try again\n   387                                                   except PermissionError:\n   388                                                       # This exception is thrown when a directory with the chosen name\n   389                                                       # already exists on windows.\n   390                                                       if (_os.name == 'nt' and _os.path.isdir(dir) and\n   391                                                           _os.access(dir, _os.W_OK)):\n   392                                                           continue\n   393                                                       else:\n   394                                                           raise\n   395         2      48000.0  24000.0      2.7          return _os.path.abspath(file)\n   396                                           \n   397                                               raise FileExistsError(_errno.EEXIST,\n   398                                                                     \"No usable temporary directory name found\")\n\nTotal time: 2e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py\nFunction: RLock at line 124\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   124                                           def RLock(*args, **kwargs):\n   125                                               \"\"\"Factory function that returns a new reentrant lock.\n   126                                           \n   127                                               A reentrant lock must be released by the thread that acquired it. Once a\n   128                                               thread has acquired a reentrant lock, the same thread may acquire it again\n   129                                               without blocking; the thread must release it once for each time it has\n   130                                               acquired it.\n   131                                           \n   132                                               \"\"\"\n   133         1       1000.0   1000.0     50.0      if _CRLock is None:\n   134                                                   return _PyRLock(*args, **kwargs)\n   135         1       1000.0   1000.0     50.0      return _CRLock(*args, **kwargs)\n\nTotal time: 2e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py\nFunction: _newname at line 839\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   839                                           def _newname(name_template):\n   840         1       2000.0   2000.0    100.0      return name_template % _counter()\n\nTotal time: 8e-06 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py\nFunction: _make_invoke_excepthook at line 1356\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  1356                                           def _make_invoke_excepthook():\n  1357                                               # Create a local namespace to ensure that variables remain alive\n  1358                                               # when _invoke_excepthook() is called, even if it is called late during\n  1359                                               # Python shutdown. It is mostly needed for daemon threads.\n  1360                                           \n  1361         1       2000.0   2000.0     25.0      old_excepthook = excepthook\n  1362         1       1000.0   1000.0     12.5      old_sys_excepthook = _sys.excepthook\n  1363         1       1000.0   1000.0     12.5      if old_excepthook is None:\n  1364                                                   raise RuntimeError(\"threading.excepthook is None\")\n  1365         1       1000.0   1000.0     12.5      if old_sys_excepthook is None:\n  1366                                                   raise RuntimeError(\"sys.excepthook is None\")\n  1367                                           \n  1368         1       1000.0   1000.0     12.5      sys_exc_info = _sys.exc_info\n  1369         1          0.0      0.0      0.0      local_print = print\n  1370         1          0.0      0.0      0.0      local_sys = _sys\n  1371                                           \n  1372         1       1000.0   1000.0     12.5      def invoke_excepthook(thread):\n  1373                                                   global excepthook\n  1374                                                   try:\n  1375                                                       hook = excepthook\n  1376                                                       if hook is None:\n  1377                                                           hook = old_excepthook\n  1378                                           \n  1379                                                       args = ExceptHookArgs([*sys_exc_info(), thread])\n  1380                                           \n  1381                                                       hook(args)\n  1382                                                   except Exception as exc:\n  1383                                                       exc.__suppress_context__ = True\n  1384                                                       del exc\n  1385                                           \n  1386                                                       if local_sys is not None and local_sys.stderr is not None:\n  1387                                                           stderr = local_sys.stderr\n  1388                                                       else:\n  1389                                                           stderr = thread._stderr\n  1390                                           \n  1391                                                       local_print(\"Exception in threading.excepthook:\",\n  1392                                                                   file=stderr, flush=True)\n  1393                                           \n  1394                                                       if local_sys is not None and local_sys.excepthook is not None:\n  1395                                                           sys_excepthook = local_sys.excepthook\n  1396                                                       else:\n  1397                                                           sys_excepthook = old_sys_excepthook\n  1398                                           \n  1399                                                       sys_excepthook(*sys_exc_info())\n  1400                                                   finally:\n  1401                                                       # Break reference cycle (exception stored in a variable)\n  1402                                                       args = None\n  1403                                           \n  1404         1       1000.0   1000.0     12.5      return invoke_excepthook\n\nTotal time: 2e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py\nFunction: _type_convert at line 166\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   166                                           def _type_convert(arg, module=None, *, allow_special_forms=False):\n   167                                               \"\"\"For converting None to type(None), and strings to ForwardRef.\"\"\"\n   168         3       9000.0   3000.0     45.0      if arg is None:\n   169                                                   return type(None)\n   170         3       4000.0   1333.3     20.0      if isinstance(arg, str):\n   171                                                   return ForwardRef(arg, module=module, is_class=allow_special_forms)\n   172         3       7000.0   2333.3     35.0      return arg\n\nTotal time: 0.000119 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py\nFunction: _type_check at line 175\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   175                                           def _type_check(arg, msg, is_argument=True, module=None, *, allow_special_forms=False):\n   176                                               \"\"\"Check that the argument is a type, and return it (internal helper).\n   177                                           \n   178                                               As a special case, accept None and return type(None) instead. Also wrap strings\n   179                                               into ForwardRef instances. Consider several corner cases, for example plain\n   180                                               special forms like Union are not valid, while Union[int, str] is OK, etc.\n   181                                               The msg argument is a human-readable error message, e.g.::\n   182                                           \n   183                                                   \"Union[arg, ...]: arg should be a type.\"\n   184                                           \n   185                                               We append the repr() of the actual value (truncated to 100 chars).\n   186                                               \"\"\"\n   187         3       4000.0   1333.3      3.4      invalid_generic_forms = (Generic, Protocol)\n   188         3       3000.0   1000.0      2.5      if not allow_special_forms:\n   189         3       3000.0   1000.0      2.5          invalid_generic_forms += (ClassVar,)\n   190         3       3000.0   1000.0      2.5          if is_argument:\n   191         3       3000.0   1000.0      2.5              invalid_generic_forms += (Final,)\n   192                                           \n   193         3      80000.0  26666.7     67.2      arg = _type_convert(arg, module=module, allow_special_forms=allow_special_forms)\n   194         3       3000.0   1000.0      2.5      if (isinstance(arg, _GenericAlias) and\n   195                                                       arg.__origin__ in invalid_generic_forms):\n   196                                                   raise TypeError(f\"{arg} is not valid as type argument\")\n   197         3       4000.0   1333.3      3.4      if arg in (Any, LiteralString, NoReturn, Never, Self, TypeAlias):\n   198                                                   return arg\n   199         3       2000.0    666.7      1.7      if allow_special_forms and arg in (ClassVar, Final):\n   200                                                   return arg\n   201         3       4000.0   1333.3      3.4      if isinstance(arg, _SpecialForm) or arg in (Generic, Protocol):\n   202                                                   raise TypeError(f\"Plain {arg} is not valid as type argument\")\n   203         3       3000.0   1000.0      2.5      if type(arg) is tuple:\n   204                                                   raise TypeError(f\"{msg} Got {arg!r:.100}.\")\n   205         3       7000.0   2333.3      5.9      return arg\n\nTotal time: 1.9e-05 s\nFile: /opt/homebrew/Caskroom/miniconda/base/lib/python3.12/typing.py\nFunction: _is_dunder at line 1161\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  1161                                           def _is_dunder(attr):\n  1162        12      19000.0   1583.3    100.0      return attr.startswith('__') and attr.endswith('__')\n\n",
        "duration": 21.458313791983528,
        "metadata": {
          "profiler": "line_profiler",
          "status": "completed",
          "functions_profiled": 30,
          "lines_profiled": 276,
          "note": "Automatic tracing of all executed code"
        }
      },
      "start_time": "2025-07-27T12:25:21.364645",
      "end_time": "2025-07-27T12:25:42.822820",
      "duration": 21.458175,
      "success": true,
      "error_message": null
    },
    "memory": {
      "profiler_type": "memory",
      "data": {
        "samples": [
          {
            "timestamp": 1753644321.366229,
            "rss_mb": 109.828125,
            "vms_mb": 402185.859375,
            "percent": 0.33516883850097656
          },
          {
            "timestamp": 1753644321.3666492,
            "rss_mb": 109.890625,
            "vms_mb": 402201.921875,
            "percent": 0.3353595733642578
          },
          {
            "timestamp": 1753644321.383053,
            "rss_mb": 110.84375,
            "vms_mb": 402202.921875,
            "percent": 0.3382682800292969
          },
          {
            "timestamp": 1753644321.400807,
            "rss_mb": 112.015625,
            "vms_mb": 402203.921875,
            "percent": 0.3418445587158203
          },
          {
            "timestamp": 1753644321.4174368,
            "rss_mb": 113.125,
            "vms_mb": 402203.921875,
            "percent": 0.3452301025390625
          },
          {
            "timestamp": 1753644321.434092,
            "rss_mb": 113.21875,
            "vms_mb": 402203.921875,
            "percent": 0.3455162048339844
          },
          {
            "timestamp": 1753644321.452926,
            "rss_mb": 113.21875,
            "vms_mb": 402203.921875,
            "percent": 0.3455162048339844
          },
          {
            "timestamp": 1753644321.471759,
            "rss_mb": 113.21875,
            "vms_mb": 402203.921875,
            "percent": 0.3455162048339844
          },
          {
            "timestamp": 1753644321.4905899,
            "rss_mb": 113.21875,
            "vms_mb": 402203.921875,
            "percent": 0.3455162048339844
          },
          {
            "timestamp": 1753644321.509454,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.5282922,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.547126,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.565978,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.584806,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.603643,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.622473,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.641365,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.660224,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.679116,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.697956,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.7153358,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.732821,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.7494469,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.768229,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.7870872,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.805922,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.824449,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.8418298,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.860684,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.879582,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.898467,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.917342,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.9355881,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.9544241,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.9732742,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644321.991821,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.009968,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.028838,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.0476842,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.064647,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.0827641,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.099424,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.11655,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.134866,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.153739,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.1716459,
            "rss_mb": 113.234375,
            "vms_mb": 402203.921875,
            "percent": 0.3455638885498047
          },
          {
            "timestamp": 1753644322.189512,
            "rss_mb": 113.25,
            "vms_mb": 402203.921875,
            "percent": 0.345611572265625
          },
          {
            "timestamp": 1753644322.207757,
            "rss_mb": 113.25,
            "vms_mb": 402203.921875,
            "percent": 0.345611572265625
          },
          {
            "timestamp": 1753644322.224434,
            "rss_mb": 113.25,
            "vms_mb": 402203.921875,
            "percent": 0.345611572265625
          },
          {
            "timestamp": 1753644322.24114,
            "rss_mb": 113.25,
            "vms_mb": 402203.921875,
            "percent": 0.345611572265625
          },
          {
            "timestamp": 1753644322.257649,
            "rss_mb": 113.25,
            "vms_mb": 402203.921875,
            "percent": 0.345611572265625
          },
          {
            "timestamp": 1753644322.2765498,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.295435,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.314263,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.333187,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.350146,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.368201,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.3870342,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.405925,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.424474,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.441998,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.458905,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.475981,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.494842,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.513668,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.5324879,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.551331,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.57021,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.587264,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.606105,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.6244678,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.6411462,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.657928,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.6757069,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.6924648,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.71223,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.731196,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.747763,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.766078,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.784845,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.803234,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.8221068,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.840984,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.8597178,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.878612,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.895637,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.914528,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.932775,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.9516082,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.9704661,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644322.989305,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.008173,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.026552,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.0454028,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.0642402,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.0831082,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.10197,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.120851,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.1397,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.158557,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.1774158,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.1962602,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.215128,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.232796,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.2496462,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.268542,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.287401,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.305512,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.324352,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.3431838,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.362015,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.379734,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.397812,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.416661,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.434531,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.4523609,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.471232,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.4898539,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.507277,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.524435,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.543214,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.5621068,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.580985,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.599481,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.6176598,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.636564,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.655425,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.674272,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.693099,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.709606,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.727139,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.744925,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.7637792,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.781617,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.7994502,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.816294,
            "rss_mb": 113.28125,
            "vms_mb": 402204.921875,
            "percent": 0.3457069396972656
          },
          {
            "timestamp": 1753644323.835077,
            "rss_mb": 113.296875,
            "vms_mb": 402205.921875,
            "percent": 0.34575462341308594
          },
          {
            "timestamp": 1753644323.853933,
            "rss_mb": 113.296875,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.871182,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.890076,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.908559,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.926455,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.942958,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.9618618,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.979701,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644323.998552,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.017388,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.036256,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.055125,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.073972,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.0928059,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.1116679,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.130547,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.1484091,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.165889,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.184764,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.2035992,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.2224472,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.241184,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.259901,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.278781,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.297643,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.315579,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.3327339,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.3494458,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.3682811,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.386501,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.40538,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.4242618,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.4416351,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.460481,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.479358,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.497845,
            "rss_mb": 113.3125,
            "vms_mb": 402205.921875,
            "percent": 0.34580230712890625
          },
          {
            "timestamp": 1753644324.516141,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.532779,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.5503612,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.568535,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.5873659,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.605251,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.6241071,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.642975,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.661828,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.677558,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.6964061,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.71525,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.7340858,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.752943,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.7717981,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.790619,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.809454,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.828295,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.8471591,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.866035,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.884753,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.903604,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.9224808,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.941355,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.960212,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.979039,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644324.997749,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.0166159,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.035475,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.0543208,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.07314,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.0919502,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.109895,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.128747,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.147587,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.166421,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.183554,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.202425,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.2212648,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.240103,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.258463,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.275132,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.293202,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.312051,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.33087,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.349684,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.368269,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.387104,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.40599,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.424843,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.443692,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.462519,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.4813561,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.500175,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.5190039,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.537846,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.55659,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.575257,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.5930932,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.6119199,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.630771,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.64946,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.6661701,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.682653,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.6994612,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.71617,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.7348878,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.753752,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.772588,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.791446,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.809742,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.828631,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.846402,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.8652859,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.882365,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.9012449,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.92013,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.939008,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.9578571,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.9766731,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644325.995614,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.014475,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.032814,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.049463,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.06821,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.0870788,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.1059132,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.1245818,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.1411781,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.1599412,
            "rss_mb": 113.328125,
            "vms_mb": 402205.921875,
            "percent": 0.34584999084472656
          },
          {
            "timestamp": 1753644326.178838,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.196407,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.215227,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.233985,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.252822,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.271723,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.290227,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.3088078,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.326565,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.345441,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.363617,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.381869,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.4005492,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.419202,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.438089,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.456981,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.474498,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.49239,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.5112362,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.530095,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.5489652,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.566139,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.5849001,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.603762,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.6226408,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.641251,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.6598458,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.677546,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.6964102,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.7152572,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.732726,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.751487,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.77038,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.789247,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.808107,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.826525,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.845388,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.8642602,
            "rss_mb": 113.34375,
            "vms_mb": 402205.921875,
            "percent": 0.3458976745605469
          },
          {
            "timestamp": 1753644326.8831098,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644326.901948,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644326.9208388,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644326.9397068,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644326.95779,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644326.975064,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644326.993033,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.011892,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.0307672,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.0494988,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.066127,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.084565,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.103424,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.122302,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.139304,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.15774,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.175134,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.193244,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.2121348,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.231002,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.249026,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.2661152,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.2828958,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.301727,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.3206,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.339443,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.3582668,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.376035,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.394898,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.4137259,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.43261,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.451497,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.470379,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.4892411,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.5080802,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.5265439,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.545414,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.564289,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.582771,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.601644,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.620511,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.6382148,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.657089,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.6759412,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.694782,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.713613,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.7315872,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.749485,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.766997,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.784876,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.8037279,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.8226008,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.8414662,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.86032,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.879197,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.898078,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.914437,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.9314198,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.950304,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.968267,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644327.9871612,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.0060349,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.024988,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.041666,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.0600488,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.078447,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.09731,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.115232,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.1329,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.149894,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.168185,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.1849222,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.20381,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.2214458,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.240217,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.258074,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.2748291,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.293687,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.31257,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.331462,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.349459,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.366661,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.38554,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.404403,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.4232361,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.442122,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.458553,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.4764569,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.4929721,
            "rss_mb": 113.359375,
            "vms_mb": 402205.921875,
            "percent": 0.3459453582763672
          },
          {
            "timestamp": 1753644328.511807,
            "rss_mb": 113.375,
            "vms_mb": 402205.921875,
            "percent": 0.3459930419921875
          },
          {
            "timestamp": 1753644328.5306711,
            "rss_mb": 113.375,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.5495281,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.568192,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.586716,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.6055932,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.624442,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.643285,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.661155,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.680022,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.698863,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.717729,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.736191,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.755024,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.7738938,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.7919471,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.809917,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.8288388,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.847712,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.866581,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.884953,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.90385,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.9227169,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.9412081,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.958861,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.976562,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644328.995432,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.014294,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.03318,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.052026,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.0709178,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.089817,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.108521,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.126566,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.145407,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.16424,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.183063,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.201886,
            "rss_mb": 113.390625,
            "vms_mb": 402205.921875,
            "percent": 0.3460407257080078
          },
          {
            "timestamp": 1753644329.220732,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.239609,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.257826,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.2766788,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.295518,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.314351,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.333198,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.3520482,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.3708968,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.38849,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.407327,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.425845,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.4446862,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.462707,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.481531,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.500191,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.5190122,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.537834,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.556693,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.574475,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.591459,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.6081338,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.62698,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.645836,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.664536,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.68335,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.7012749,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.720135,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.738981,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.7578409,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.774436,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.793198,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.812027,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.8308659,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.847881,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.8667278,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.8855839,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.9044569,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.922998,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.9405959,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.958715,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.976989,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644329.995851,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.014734,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.032795,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.049462,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.068241,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.087122,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.104758,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.12287,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.1410282,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.157491,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.1763341,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.195164,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.2140312,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.232992,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.251538,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.269932,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.288793,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.306313,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.324204,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.343103,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.361963,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.3808079,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.399628,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.418476,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.437332,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.456206,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.4750662,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.4933052,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.512186,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.531011,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.549841,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.566237,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.58436,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.60322,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.6220632,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.6408992,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.659598,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.678476,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.69731,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.716186,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.735007,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.7514188,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.7702389,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.7882082,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.807081,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.825015,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.8437219,
            "rss_mb": 113.40625,
            "vms_mb": 402205.921875,
            "percent": 0.3460884094238281
          },
          {
            "timestamp": 1753644330.862583,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644330.881433,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644330.899894,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644330.918732,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644330.937597,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644330.956467,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644330.974505,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644330.993244,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.012118,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.03074,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.049592,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.0664692,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.0852969,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.1041348,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.122981,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.1414962,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.1599061,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.178763,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.19762,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.2161431,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.233797,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.251698,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.2705321,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.289357,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.3062558,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.325023,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.3433049,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.362157,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.3809931,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.3979342,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.416149,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.432956,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.449467,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.467725,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.484475,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.501334,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.520191,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.539037,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.5578601,
            "rss_mb": 113.421875,
            "vms_mb": 402205.921875,
            "percent": 0.34613609313964844
          },
          {
            "timestamp": 1753644331.576606,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.5954409,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.614272,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.631454,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.649416,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.668256,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.687123,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.704163,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.722402,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.741132,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.759826,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.776656,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.795647,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.814487,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.831671,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.849521,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.866142,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.884898,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.903755,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.921961,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.940802,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.958269,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.9774988,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644331.9966269,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.015612,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.032136,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.05002,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.0683289,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.087183,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.1060102,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.124867,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.1427279,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.1615832,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.180424,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.198117,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.2169979,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.2354739,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.254327,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.2731671,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.2917602,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.309639,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.3284621,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.347278,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.366121,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.384979,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.403838,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.422657,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.441515,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.46035,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.479191,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.498013,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.516845,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.5340228,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.55298,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.57191,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.59077,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.60967,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.628296,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.644943,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.663811,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.682703,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.699528,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.7176828,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.736369,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.7552729,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.7741451,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.7930539,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.811892,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.830743,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.849591,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.866463,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.8853602,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.901579,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.920476,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.938648,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.957524,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.975717,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644332.994624,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.013509,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.032405,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.049515,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.068249,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.0871239,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.106003,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.124507,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.141186,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.159971,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.178848,
            "rss_mb": 113.4375,
            "vms_mb": 402205.921875,
            "percent": 0.34618377685546875
          },
          {
            "timestamp": 1753644333.1977012,
            "rss_mb": 113.453125,
            "vms_mb": 402205.921875,
            "percent": 0.34623146057128906
          },
          {
            "timestamp": 1753644333.216546,
            "rss_mb": 113.453125,
            "vms_mb": 402205.921875,
            "percent": 0.34623146057128906
          },
          {
            "timestamp": 1753644333.2348878,
            "rss_mb": 113.453125,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.2536051,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.272465,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.291345,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.3078542,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.324545,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.341202,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.3578508,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.3744981,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.390917,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.409371,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.427422,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.446702,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.463905,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.482774,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.5016441,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.519351,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.537059,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.555291,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.574181,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.592065,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.609921,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.627834,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.646521,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.665154,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.682872,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.7006981,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.7195892,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.738456,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.757321,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.7762089,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.795104,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.8131342,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.832003,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.85076,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.869637,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.888154,
            "rss_mb": 113.46875,
            "vms_mb": 402205.921875,
            "percent": 0.3462791442871094
          },
          {
            "timestamp": 1753644333.907059,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644333.925243,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644333.943155,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644333.962136,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644333.981127,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644333.999491,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.0183182,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.036366,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.053236,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.072106,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.090959,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.108809,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.126574,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.1454358,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.16432,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.182881,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.1986141,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.2172968,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.234912,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.2535071,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.272359,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.2911801,
            "rss_mb": 113.484375,
            "vms_mb": 402205.921875,
            "percent": 0.3463268280029297
          },
          {
            "timestamp": 1753644334.307859,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.325403,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.343316,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.359937,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.3778298,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.394259,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.413107,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.431963,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.449902,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.468788,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.486757,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.505615,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.523635,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.5421288,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.559954,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.578372,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.597261,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.616135,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.633672,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.651579,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.6704462,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.689156,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.708056,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.724892,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.743274,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.759935,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.7788029,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.7976582,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.8165061,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.8335092,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.8519418,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.870862,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.88864,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.907449,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.9263701,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.94424,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.963152,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.981434,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644334.998633,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.015358,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.033768,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.0515919,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.070192,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.0889332,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.1055412,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.124429,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.1432488,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.160943,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.1793091,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.1982222,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.214946,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.233717,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.251466,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.2703218,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.2878568,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.3067389,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.324509,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.343286,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.362158,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.3803031,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.399154,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.417344,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.435474,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.454376,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.473013,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.488669,
            "rss_mb": 113.5,
            "vms_mb": 402205.921875,
            "percent": 0.34637451171875
          },
          {
            "timestamp": 1753644335.506426,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.525125,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.541653,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.558948,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.5768142,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.59457,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.6134882,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.632388,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.649539,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.666311,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.682559,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.7014642,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.7203908,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.738123,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.756379,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.774795,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.793302,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.8122501,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.831116,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.849997,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.868736,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.8865569,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.9054122,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.924306,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.9420118,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.959947,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.9788082,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644335.997675,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.016588,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.035381,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.053251,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.072132,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.091008,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.109691,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.1278641,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.145768,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.1653252,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.1832309,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.201643,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.220545,
            "rss_mb": 113.515625,
            "vms_mb": 402205.921875,
            "percent": 0.3464221954345703
          },
          {
            "timestamp": 1753644336.238862,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.2577841,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.2763479,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.295237,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.314123,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.332993,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.351449,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.370351,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.3892212,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.406602,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.425483,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.44434,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.4631171,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.481966,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.5000262,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.516997,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.533565,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.551579,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.570475,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.589355,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.607829,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.6266398,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.64554,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.664381,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.683264,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.700128,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.7168698,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.733887,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.752604,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.771515,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.790219,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.8090959,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.8276339,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.846525,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.865417,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.884035,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.902933,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.921824,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.938654,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.95754,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.976427,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644336.995316,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.014217,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.032864,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.051596,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.069661,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.088532,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.1068642,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.125429,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.1438441,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.162913,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.1817741,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.2006478,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.219527,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.238391,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.2572732,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.274511,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.293391,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.3122718,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.3311648,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.350065,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.3682492,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.3865962,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.405461,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.424395,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.443369,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.462275,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.481121,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.49914,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.518037,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.53689,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.5552928,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.5741818,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.5913532,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.608513,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.6251898,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.6440609,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.662921,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.681775,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.70068,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.719507,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.7381608,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.756702,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.7753558,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.7922182,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.8111098,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.829974,
            "rss_mb": 113.53125,
            "vms_mb": 402205.921875,
            "percent": 0.3464698791503906
          },
          {
            "timestamp": 1753644337.848834,
            "rss_mb": 113.546875,
            "vms_mb": 402205.921875,
            "percent": 0.34651756286621094
          },
          {
            "timestamp": 1753644337.8677142,
            "rss_mb": 113.546875,
            "vms_mb": 402205.921875,
            "percent": 0.34651756286621094
          },
          {
            "timestamp": 1753644337.885785,
            "rss_mb": 113.546875,
            "vms_mb": 402205.921875,
            "percent": 0.34651756286621094
          },
          {
            "timestamp": 1753644337.904128,
            "rss_mb": 113.546875,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644337.923007,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644337.9419131,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644337.9598029,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644337.977922,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644337.9967868,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.014486,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.033382,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.051169,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.070051,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.0889568,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.107836,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.124894,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.1424599,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.161324,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.180205,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.199069,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.217937,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.236845,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.255341,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.271778,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.2902389,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.307025,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.325307,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.343345,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.36225,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.3805928,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.399473,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.4162078,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.4346821,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.45356,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.472416,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.491266,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.509027,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.5258172,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.544699,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.56357,
            "rss_mb": 113.5625,
            "vms_mb": 402205.921875,
            "percent": 0.34656524658203125
          },
          {
            "timestamp": 1753644338.582436,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.6013062,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.620167,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.6390111,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.657622,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.675748,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.6940851,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.712961,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.731511,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.7485702,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.76617,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.7849479,
            "rss_mb": 113.578125,
            "vms_mb": 402205.921875,
            "percent": 0.34661293029785156
          },
          {
            "timestamp": 1753644338.8034198,
            "rss_mb": 114.296875,
            "vms_mb": 402205.921875,
            "percent": 0.34880638122558594
          },
          {
            "timestamp": 1753644338.833398,
            "rss_mb": 114.296875,
            "vms_mb": 402205.921875,
            "percent": 0.34880638122558594
          },
          {
            "timestamp": 1753644338.8513951,
            "rss_mb": 114.359375,
            "vms_mb": 402206.921875,
            "percent": 0.3489971160888672
          },
          {
            "timestamp": 1753644338.870272,
            "rss_mb": 115.46875,
            "vms_mb": 402207.921875,
            "percent": 0.3523826599121094
          },
          {
            "timestamp": 1753644338.889142,
            "rss_mb": 116.515625,
            "vms_mb": 402208.921875,
            "percent": 0.3555774688720703
          },
          {
            "timestamp": 1753644338.908036,
            "rss_mb": 117.609375,
            "vms_mb": 402209.921875,
            "percent": 0.3589153289794922
          },
          {
            "timestamp": 1753644338.927329,
            "rss_mb": 118.453125,
            "vms_mb": 402210.921875,
            "percent": 0.36149024963378906
          },
          {
            "timestamp": 1753644338.946653,
            "rss_mb": 119.25,
            "vms_mb": 402210.921875,
            "percent": 0.363922119140625
          },
          {
            "timestamp": 1753644338.96558,
            "rss_mb": 120.125,
            "vms_mb": 402211.921875,
            "percent": 0.3665924072265625
          },
          {
            "timestamp": 1753644338.984491,
            "rss_mb": 121.203125,
            "vms_mb": 402212.921875,
            "percent": 0.36988258361816406
          },
          {
            "timestamp": 1753644339.0033631,
            "rss_mb": 122.375,
            "vms_mb": 402214.921875,
            "percent": 0.3734588623046875
          },
          {
            "timestamp": 1753644339.022221,
            "rss_mb": 123.46875,
            "vms_mb": 402215.921875,
            "percent": 0.3767967224121094
          },
          {
            "timestamp": 1753644339.040256,
            "rss_mb": 124.578125,
            "vms_mb": 402216.921875,
            "percent": 0.38018226623535156
          },
          {
            "timestamp": 1753644339.058557,
            "rss_mb": 125.71875,
            "vms_mb": 402217.921875,
            "percent": 0.3836631774902344
          },
          {
            "timestamp": 1753644339.075007,
            "rss_mb": 126.703125,
            "vms_mb": 402218.921875,
            "percent": 0.38666725158691406
          },
          {
            "timestamp": 1753644339.093868,
            "rss_mb": 127.828125,
            "vms_mb": 402219.921875,
            "percent": 0.39010047912597656
          },
          {
            "timestamp": 1753644339.11273,
            "rss_mb": 128.984375,
            "vms_mb": 402220.921875,
            "percent": 0.3936290740966797
          },
          {
            "timestamp": 1753644339.131618,
            "rss_mb": 130.125,
            "vms_mb": 402221.921875,
            "percent": 0.3971099853515625
          },
          {
            "timestamp": 1753644339.150021,
            "rss_mb": 131.265625,
            "vms_mb": 402222.921875,
            "percent": 0.4005908966064453
          },
          {
            "timestamp": 1753644339.167872,
            "rss_mb": 132.28125,
            "vms_mb": 402223.921875,
            "percent": 0.4036903381347656
          },
          {
            "timestamp": 1753644339.186592,
            "rss_mb": 133.390625,
            "vms_mb": 402224.921875,
            "percent": 0.4070758819580078
          },
          {
            "timestamp": 1753644339.205458,
            "rss_mb": 134.59375,
            "vms_mb": 402226.921875,
            "percent": 0.4107475280761719
          },
          {
            "timestamp": 1753644339.223922,
            "rss_mb": 135.71875,
            "vms_mb": 402227.921875,
            "percent": 0.4141807556152344
          },
          {
            "timestamp": 1753644339.2411761,
            "rss_mb": 136.703125,
            "vms_mb": 402228.921875,
            "percent": 0.41718482971191406
          },
          {
            "timestamp": 1753644339.258803,
            "rss_mb": 137.796875,
            "vms_mb": 402229.921875,
            "percent": 0.42052268981933594
          },
          {
            "timestamp": 1753644339.2755961,
            "rss_mb": 138.84375,
            "vms_mb": 402230.921875,
            "percent": 0.4237651824951172
          },
          {
            "timestamp": 1753644339.2933261,
            "rss_mb": 139.96875,
            "vms_mb": 402231.921875,
            "percent": 0.4271507263183594
          },
          {
            "timestamp": 1753644339.312234,
            "rss_mb": 141.015625,
            "vms_mb": 402232.921875,
            "percent": 0.4303455352783203
          },
          {
            "timestamp": 1753644339.3310862,
            "rss_mb": 142.203125,
            "vms_mb": 402233.921875,
            "percent": 0.43396949768066406
          },
          {
            "timestamp": 1753644339.3500092,
            "rss_mb": 143.375,
            "vms_mb": 402234.921875,
            "percent": 0.4375934600830078
          },
          {
            "timestamp": 1753644339.368869,
            "rss_mb": 144.515625,
            "vms_mb": 402236.921875,
            "percent": 0.4410266876220703
          },
          {
            "timestamp": 1753644339.387744,
            "rss_mb": 145.671875,
            "vms_mb": 402237.921875,
            "percent": 0.44455528259277344
          },
          {
            "timestamp": 1753644339.406595,
            "rss_mb": 146.828125,
            "vms_mb": 402238.921875,
            "percent": 0.44808387756347656
          },
          {
            "timestamp": 1753644339.425445,
            "rss_mb": 148.015625,
            "vms_mb": 402239.921875,
            "percent": 0.4517078399658203
          },
          {
            "timestamp": 1753644339.444342,
            "rss_mb": 149.15625,
            "vms_mb": 402240.921875,
            "percent": 0.4551887512207031
          },
          {
            "timestamp": 1753644339.46325,
            "rss_mb": 150.28125,
            "vms_mb": 402241.921875,
            "percent": 0.4586219787597656
          },
          {
            "timestamp": 1753644339.491748,
            "rss_mb": 150.34375,
            "vms_mb": 402241.921875,
            "percent": 0.4588127136230469
          },
          {
            "timestamp": 1753644339.509015,
            "rss_mb": 151.3125,
            "vms_mb": 402242.921875,
            "percent": 0.46176910400390625
          },
          {
            "timestamp": 1753644339.526664,
            "rss_mb": 152.390625,
            "vms_mb": 402243.921875,
            "percent": 0.4650592803955078
          },
          {
            "timestamp": 1753644339.545544,
            "rss_mb": 153.578125,
            "vms_mb": 402245.921875,
            "percent": 0.46868324279785156
          },
          {
            "timestamp": 1753644339.564411,
            "rss_mb": 154.71875,
            "vms_mb": 402246.921875,
            "percent": 0.4721641540527344
          },
          {
            "timestamp": 1753644339.581082,
            "rss_mb": 155.671875,
            "vms_mb": 402247.921875,
            "percent": 0.47507286071777344
          },
          {
            "timestamp": 1753644339.599518,
            "rss_mb": 156.828125,
            "vms_mb": 402248.921875,
            "percent": 0.47860145568847656
          },
          {
            "timestamp": 1753644339.618252,
            "rss_mb": 157.953125,
            "vms_mb": 402249.921875,
            "percent": 0.48203468322753906
          },
          {
            "timestamp": 1753644339.637146,
            "rss_mb": 159.140625,
            "vms_mb": 402250.921875,
            "percent": 0.4856586456298828
          },
          {
            "timestamp": 1753644339.655464,
            "rss_mb": 160.21875,
            "vms_mb": 402251.921875,
            "percent": 0.4889488220214844
          },
          {
            "timestamp": 1753644339.674325,
            "rss_mb": 161.375,
            "vms_mb": 402252.921875,
            "percent": 0.4924774169921875
          },
          {
            "timestamp": 1753644339.692328,
            "rss_mb": 162.515625,
            "vms_mb": 402253.921875,
            "percent": 0.4959583282470703
          },
          {
            "timestamp": 1753644339.7115679,
            "rss_mb": 163.703125,
            "vms_mb": 402255.921875,
            "percent": 0.49958229064941406
          },
          {
            "timestamp": 1753644339.7304478,
            "rss_mb": 164.8125,
            "vms_mb": 402256.921875,
            "percent": 0.5029678344726562
          },
          {
            "timestamp": 1753644339.7484071,
            "rss_mb": 165.90625,
            "vms_mb": 402257.921875,
            "percent": 0.5063056945800781
          },
          {
            "timestamp": 1753644339.767297,
            "rss_mb": 167.0,
            "vms_mb": 402258.921875,
            "percent": 0.5096912384033203
          },
          {
            "timestamp": 1753644339.785741,
            "rss_mb": 168.0625,
            "vms_mb": 402259.921875,
            "percent": 0.5128860473632812
          },
          {
            "timestamp": 1753644339.80463,
            "rss_mb": 169.140625,
            "vms_mb": 402260.921875,
            "percent": 0.5161762237548828
          },
          {
            "timestamp": 1753644339.82353,
            "rss_mb": 170.234375,
            "vms_mb": 402261.921875,
            "percent": 0.5195140838623047
          },
          {
            "timestamp": 1753644339.840447,
            "rss_mb": 171.1875,
            "vms_mb": 402262.921875,
            "percent": 0.5224704742431641
          },
          {
            "timestamp": 1753644339.859355,
            "rss_mb": 172.34375,
            "vms_mb": 402263.921875,
            "percent": 0.5259513854980469
          },
          {
            "timestamp": 1753644339.87824,
            "rss_mb": 173.296875,
            "vms_mb": 402264.921875,
            "percent": 0.5288600921630859
          },
          {
            "timestamp": 1753644339.897119,
            "rss_mb": 174.34375,
            "vms_mb": 402265.921875,
            "percent": 0.5320549011230469
          },
          {
            "timestamp": 1753644339.915524,
            "rss_mb": 175.4375,
            "vms_mb": 402266.921875,
            "percent": 0.5353927612304688
          },
          {
            "timestamp": 1753644339.934039,
            "rss_mb": 176.578125,
            "vms_mb": 402267.921875,
            "percent": 0.5388736724853516
          },
          {
            "timestamp": 1753644339.9529228,
            "rss_mb": 177.65625,
            "vms_mb": 402269.921875,
            "percent": 0.5421638488769531
          },
          {
            "timestamp": 1753644339.971787,
            "rss_mb": 178.828125,
            "vms_mb": 402270.921875,
            "percent": 0.5457401275634766
          },
          {
            "timestamp": 1753644339.9900491,
            "rss_mb": 179.96875,
            "vms_mb": 402271.921875,
            "percent": 0.5492210388183594
          },
          {
            "timestamp": 1753644340.00788,
            "rss_mb": 181.0625,
            "vms_mb": 402272.921875,
            "percent": 0.5525588989257812
          },
          {
            "timestamp": 1753644340.024545,
            "rss_mb": 182.03125,
            "vms_mb": 402273.921875,
            "percent": 0.5555152893066406
          },
          {
            "timestamp": 1753644340.0401978,
            "rss_mb": 183.0,
            "vms_mb": 402274.921875,
            "percent": 0.5584716796875
          },
          {
            "timestamp": 1753644340.056957,
            "rss_mb": 184.03125,
            "vms_mb": 402275.921875,
            "percent": 0.5616188049316406
          },
          {
            "timestamp": 1753644340.075881,
            "rss_mb": 185.1875,
            "vms_mb": 402276.921875,
            "percent": 0.5651473999023438
          },
          {
            "timestamp": 1753644340.094753,
            "rss_mb": 186.328125,
            "vms_mb": 402277.921875,
            "percent": 0.5686283111572266
          },
          {
            "timestamp": 1753644340.150665,
            "rss_mb": 187.375,
            "vms_mb": 402278.921875,
            "percent": 0.5718231201171875
          },
          {
            "timestamp": 1753644340.169317,
            "rss_mb": 188.515625,
            "vms_mb": 402279.921875,
            "percent": 0.5753040313720703
          },
          {
            "timestamp": 1753644340.188193,
            "rss_mb": 189.703125,
            "vms_mb": 402281.921875,
            "percent": 0.5789279937744141
          },
          {
            "timestamp": 1753644340.205888,
            "rss_mb": 190.703125,
            "vms_mb": 402282.921875,
            "percent": 0.5819797515869141
          },
          {
            "timestamp": 1753644340.224747,
            "rss_mb": 190.71875,
            "vms_mb": 402282.921875,
            "percent": 0.5820274353027344
          },
          {
            "timestamp": 1753644340.243538,
            "rss_mb": 190.71875,
            "vms_mb": 402282.921875,
            "percent": 0.5820274353027344
          },
          {
            "timestamp": 1753644340.2612,
            "rss_mb": 190.78125,
            "vms_mb": 402282.921875,
            "percent": 0.5822181701660156
          },
          {
            "timestamp": 1753644340.279837,
            "rss_mb": 190.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5823612213134766
          },
          {
            "timestamp": 1753644340.298711,
            "rss_mb": 190.84375,
            "vms_mb": 402282.921875,
            "percent": 0.5824089050292969
          },
          {
            "timestamp": 1753644340.317547,
            "rss_mb": 190.921875,
            "vms_mb": 402282.921875,
            "percent": 0.5826473236083984
          },
          {
            "timestamp": 1753644340.3358421,
            "rss_mb": 190.9375,
            "vms_mb": 402282.921875,
            "percent": 0.5826950073242188
          },
          {
            "timestamp": 1753644340.35471,
            "rss_mb": 190.953125,
            "vms_mb": 402282.921875,
            "percent": 0.5827426910400391
          },
          {
            "timestamp": 1753644340.373575,
            "rss_mb": 190.984375,
            "vms_mb": 402282.921875,
            "percent": 0.5828380584716797
          },
          {
            "timestamp": 1753644340.3924658,
            "rss_mb": 191.0,
            "vms_mb": 402282.921875,
            "percent": 0.5828857421875
          },
          {
            "timestamp": 1753644340.410731,
            "rss_mb": 191.0,
            "vms_mb": 402282.921875,
            "percent": 0.5828857421875
          },
          {
            "timestamp": 1753644340.42961,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.44849,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.466205,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.484957,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.497835,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.508395,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.5214531,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.534074,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.546845,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.559637,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.571991,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.584042,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.5967,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.6094022,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.622027,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.634628,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.64723,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.659775,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.672411,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.68494,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.6975548,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.710007,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.722843,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.734974,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.747626,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.758601,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.769109,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.780312,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.792348,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.805147,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.817774,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.830393,
            "rss_mb": 191.34375,
            "vms_mb": 402282.921875,
            "percent": 0.5839347839355469
          },
          {
            "timestamp": 1753644340.843164,
            "rss_mb": 191.375,
            "vms_mb": 402282.921875,
            "percent": 0.5840301513671875
          },
          {
            "timestamp": 1753644340.856874,
            "rss_mb": 191.375,
            "vms_mb": 402282.921875,
            "percent": 0.5840301513671875
          },
          {
            "timestamp": 1753644340.869497,
            "rss_mb": 191.375,
            "vms_mb": 402282.921875,
            "percent": 0.5840301513671875
          },
          {
            "timestamp": 1753644340.882232,
            "rss_mb": 191.375,
            "vms_mb": 402282.921875,
            "percent": 0.5840301513671875
          },
          {
            "timestamp": 1753644340.901134,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.9137988,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.925718,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.938427,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.948662,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.962332,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.9749382,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.985558,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644340.998176,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.010221,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.022175,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.034286,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.046886,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.057326,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.068778,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.081377,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.093431,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.1060889,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.117908,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.1305192,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.143168,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.155361,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.167357,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.1798348,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.1903841,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.201625,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.214238,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.2267652,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.239407,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.2516322,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.264439,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.27708,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.289688,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.301619,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.314267,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.325932,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.338546,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.3508868,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.363476,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.3760839,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.390701,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.403306,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.4135702,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.426251,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.438951,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.4502552,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.461484,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.473973,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.484193,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.496655,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.507357,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.519284,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.5319319,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.543634,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.5562491,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.567376,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.579984,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.592723,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.605359,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.618038,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.630639,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.643313,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.65647,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.6691918,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.681796,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.6920059,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.704617,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.717241,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.7299001,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.7425349,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.75514,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.767745,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.780444,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.790619,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.803743,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.81637,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.826668,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.839412,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.851674,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.8643808,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.876595,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.889327,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.9015858,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.9143229,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.9260979,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.938715,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.951387,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.964023,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.976659,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644341.989401,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.0013871,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.014197,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.026665,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.039385,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.05166,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.0644321,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.0770628,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.089704,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.100706,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.113438,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.125342,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.136008,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.1486452,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.160067,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.1720011,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.184672,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.197031,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.2090182,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.221645,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.234011,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.246635,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.2590258,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.2715251,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.2841868,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.296854,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.3090508,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.321686,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.3324769,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.343881,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.356521,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.369189,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.3818119,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.393898,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.406552,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.418871,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.430078,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.4413939,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.4516711,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.464328,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.476943,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.488224,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.500848,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.5134661,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.5260959,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.538274,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.550951,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.5635781,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.576179,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.588864,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.601515,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.614159,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.625858,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.638488,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.650749,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.663174,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.6750772,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.685792,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.6970172,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.70964,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.722274,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.7324932,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.74511,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.757341,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.7678552,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.780384,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.792995,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.805334,
            "rss_mb": 191.828125,
            "vms_mb": 402282.921875,
            "percent": 0.5854129791259766
          },
          {
            "timestamp": 1753644342.8225121,
            "rss_mb": 188.828125,
            "vms_mb": 402279.921875,
            "percent": 0.5762577056884766
          },
          {
            "timestamp": 1753644342.83987,
            "rss_mb": 188.84375,
            "vms_mb": 402279.921875,
            "percent": 0.5763053894042969
          },
          {
            "timestamp": 1753644342.8575082,
            "rss_mb": 188.84375,
            "vms_mb": 402279.921875,
            "percent": 0.5763053894042969
          },
          {
            "timestamp": 1753644342.873108,
            "rss_mb": 188.875,
            "vms_mb": 402279.921875,
            "percent": 0.5764007568359375
          },
          {
            "timestamp": 1753644342.887912,
            "rss_mb": 188.90625,
            "vms_mb": 402279.921875,
            "percent": 0.5764961242675781
          },
          {
            "timestamp": 1753644342.9034271,
            "rss_mb": 188.953125,
            "vms_mb": 402279.921875,
            "percent": 0.5766391754150391
          },
          {
            "timestamp": 1753644342.917622,
            "rss_mb": 188.953125,
            "vms_mb": 402279.921875,
            "percent": 0.5766391754150391
          },
          {
            "timestamp": 1753644342.936455,
            "rss_mb": 188.953125,
            "vms_mb": 402279.921875,
            "percent": 0.5766391754150391
          },
          {
            "timestamp": 1753644342.947642,
            "rss_mb": 188.953125,
            "vms_mb": 402279.921875,
            "percent": 0.5766391754150391
          },
          {
            "timestamp": 1753644342.9604712,
            "rss_mb": 189.015625,
            "vms_mb": 402287.921875,
            "percent": 0.5768299102783203
          },
          {
            "timestamp": 1753644342.9731982,
            "rss_mb": 189.03125,
            "vms_mb": 402287.921875,
            "percent": 0.5768775939941406
          },
          {
            "timestamp": 1753644342.985941,
            "rss_mb": 189.03125,
            "vms_mb": 402287.921875,
            "percent": 0.5768775939941406
          },
          {
            "timestamp": 1753644342.9986088,
            "rss_mb": 189.0,
            "vms_mb": 402271.859375,
            "percent": 0.5767822265625
          }
        ],
        "peak_memory_mb": 191.828125,
        "avg_memory_mb": 129.3170074536664,
        "memory_delta_mb": 79.171875,
        "sample_count": 1241,
        "initial_memory_mb": 109.828125,
        "final_memory_mb": 189.0,
        "duration": 21.6322470419982,
        "metadata": {
          "profiler": "psutil",
          "precision": 1,
          "status": "completed",
          "sampling_rate": "100 Hz"
        }
      },
      "start_time": "2025-07-27T12:25:21.366295",
      "end_time": "2025-07-27T12:25:42.991106",
      "duration": 21.624811,
      "success": true,
      "error_message": null
    },
    "call": {
      "profiler_type": "call",
      "data": {
        "total_calls": 322091,
        "total_time": 86.8027617505868,
        "stats": {
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_profiling_session)": {
            "ncalls": 1,
            "tottime": 21.45557566700154,
            "cumtime": 21.45557566700154,
            "percall": 21.45557566700154,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "function": "run_profiling_session",
            "line": 0,
            "callers": {},
            "callees": {
              "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_sample_workload)": 1
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_sample_workload)": {
            "ncalls": 1,
            "tottime": 21.4554967089789,
            "cumtime": 21.4554967089789,
            "percall": 21.4554967089789,
            "filename": "/Users/Adam/Pycroscope/docs/examples/usage_example.py",
            "function": "run_sample_workload",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_profiling_session)": 1
            },
            "callees": {
              "<frozen importlib._bootstrap>:0(_find_and_load)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": {
            "ncalls": 1,
            "tottime": 21.438788874977035,
            "cumtime": 21.438788874977035,
            "percall": 21.438788874977035,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "mixed_workload",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_sample_workload)": 1
            },
            "callees": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(cpu_intensive_calculation)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(memory_intensive_operations)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(nested_function_calls)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(data_processing_pipeline)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(demonstrate_anti_patterns)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_iterative)": 1
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(cpu_intensive_calculation)": {
            "ncalls": 1,
            "tottime": 17.406441792001715,
            "cumtime": 17.406441792001715,
            "percall": 17.406441792001715,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "cpu_intensive_calculation",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {}
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(memory_intensive_operations)": {
            "ncalls": 1,
            "tottime": 1.7096657080110162,
            "cumtime": 1.7096657080110162,
            "percall": 1.7096657080110162,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "memory_intensive_operations",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {}
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": {
            "ncalls": 242785,
            "tottime": 0.40331066455109976,
            "cumtime": 0.40331066455109976,
            "percall": 1.6611844411767604e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "fibonacci_recursive",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1,
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": 242784
            },
            "callees": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(fibonacci_recursive)": 242784
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": {
            "ncalls": 1,
            "tottime": 0.4004107499786187,
            "cumtime": 0.4004107499786187,
            "percall": 0.4004107499786187,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "file_io_operations",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tempfile.py:0(mkdtemp)": 1,
              "<frozen posixpath>:0(join)": 20,
              "<frozen codecs>:0(__init__)": 20,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(dump)": 10,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(load)": 10
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(dump)": {
            "ncalls": 10,
            "tottime": 0.3849367080256343,
            "cumtime": 0.3849367080256343,
            "percall": 0.038493670802563426,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "dump",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": 10
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(iterencode)": 10,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode)": 10180
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode)": {
            "ncalls": 10180,
            "tottime": 0.30968231963925064,
            "cumtime": 0.30968231963925064,
            "percall": 3.0420660082441123e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_iterencode",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(dump)": 10180
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 10180
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": {
            "ncalls": 10240,
            "tottime": 0.24948655391926877,
            "cumtime": 0.24948655391926877,
            "percall": 2.436392128117859e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_iterencode_dict",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode)": 10180,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 60
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_list)": 10020,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 60,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(floatstr)": 10
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_list)": {
            "ncalls": 10020,
            "tottime": 0.19252786581637338,
            "cumtime": 0.19252786581637338,
            "percall": 1.921435786590553e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "_iterencode_list",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 10020
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(floatstr)": 10000
            }
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(stop)": {
            "ncalls": 1,
            "tottime": 0.1682043749897275,
            "cumtime": 0.1682043749897275,
            "percall": 0.1682043749897275,
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py",
            "function": "stop",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/orchestra.py:0(stop_profiling)": 1
            },
            "callees": {
              "<frozen importlib._bootstrap>:0(parent)": 1,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/trace_multiplexer.py:0(unregister_trace_function)": 1,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/base.py:0(_mark_end)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(print_stats)": 1,
              "<frozen genericpath>:0(exists)": 32,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(_extract_function_data)": 32,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/base.py:0(duration)": 2
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(print_stats)": {
            "ncalls": 1,
            "tottime": 0.14931575002265163,
            "cumtime": 0.14931575002265163,
            "percall": 0.14931575002265163,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "print_stats",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(stop)": 1
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": {
            "ncalls": 1,
            "tottime": 0.1489744579885155,
            "cumtime": 0.1489744579885155,
            "percall": 0.1489744579885155,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "show_text",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(print_stats)": 1
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": 32
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": {
            "ncalls": 32,
            "tottime": 0.1323005829763133,
            "cumtime": 0.1323005829763133,
            "percall": 0.004134393218009791,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "show_func",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": 32
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(<genexpr>)": 1572,
              "<frozen genericpath>:0(exists)": 64,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(clearcache)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__hash__)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_column_widths)": 2
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": {
            "ncalls": 32,
            "tottime": 0.09718825106392615,
            "cumtime": 0.09718825106392615,
            "percall": 0.003037132845747692,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "get_code_block",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": 32
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": 32
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": {
            "ncalls": 32,
            "tottime": 0.08880008390406147,
            "cumtime": 0.08880008390406147,
            "percall": 0.002775002622001921,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py",
            "function": "getblock",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 32
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(__init__)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(generate_tokens)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": 5503,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(tokeneater)": 5503
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(data_processing_pipeline)": {
            "ncalls": 1,
            "tottime": 0.06994270798168145,
            "cumtime": 0.06994270798168145,
            "percall": 0.06994270798168145,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "data_processing_pipeline",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(mixed_workload)": 1
            },
            "callees": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(<genexpr>)": 8997
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(floatstr)": {
            "ncalls": 10010,
            "tottime": 0.05003438741550781,
            "cumtime": 0.05003438741550781,
            "percall": 4.9984403012495315e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py",
            "function": "floatstr",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_list)": 10000,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/encoder.py:0(_iterencode_dict)": 10
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(tokeneater)": {
            "ncalls": 5503,
            "tottime": 0.03906050091609359,
            "cumtime": 0.03906050091609359,
            "percall": 7.098037600598508e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "tokeneater",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": 5503
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(tokeneater)": 5503
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": {
            "ncalls": 3,
            "tottime": 0.03250408300664276,
            "cumtime": 0.03250408300664276,
            "percall": 0.010834694335547587,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py",
            "function": "from_config",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_text)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_column_widths)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_default)": 3,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(find_and_read_config_file)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(iter_configs)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(get_headers)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(get_subtable)": 20,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(merge)": 2,
              "<string>:0(__init__)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__eq__)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__new__)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__init__)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": {
            "ncalls": 5535,
            "tottime": 0.03227592268376611,
            "cumtime": 0.03227592268376611,
            "percall": 5.8312416772838505e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py",
            "function": "_generate_tokens_from_c_tokenizer",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(getblock)": 5503,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 32
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/collections/__init__.py:0(_make)": 5503
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(find_and_read_config_file)": {
            "ncalls": 2,
            "tottime": 0.029066417017020285,
            "cumtime": 0.029066417017020285,
            "percall": 0.014533208508510143,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py",
            "function": "find_and_read_config_file",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": 2
            },
            "callees": {
              "<frozen _collections_abc>:0(get)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(cwd)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(absolute)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(iter_configs)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(open)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(load)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__new__)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/pathlib.py:0(__init__)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(load)": {
            "ncalls": 2,
            "tottime": 0.02786170702893287,
            "cumtime": 0.02786170702893287,
            "percall": 0.013930853514466435,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "load",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(find_and_read_config_file)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": 2
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": {
            "ncalls": 2,
            "tottime": 0.02781258398317732,
            "cumtime": 0.02781258398317732,
            "percall": 0.01390629199158866,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "loads",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(load)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(__init__)": 4,
              "<string>:0(<lambda>)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(make_safe_parse_float)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 234,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(finalize_pending)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(create_dict_rule)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comment)": 104,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(key_value_rule)": 78
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(key_value_rule)": {
            "ncalls": 78,
            "tottime": 0.023051710886647925,
            "cumtime": 0.023051710886647925,
            "percall": 0.00029553475495702465,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "key_value_rule",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": 78
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(<genexpr>)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(is_)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(get_or_create_nest)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(set)": 36
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py:0(tokeneater)": {
            "ncalls": 5503,
            "tottime": 0.02221183167421259,
            "cumtime": 0.02221183167421259,
            "percall": 4.036313224461674e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/inspect.py",
            "function": "tokeneater",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(tokeneater)": 5503
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": {
            "ncalls": 82,
            "tottime": 0.020064498850842938,
            "cumtime": 0.020064498850842938,
            "percall": 0.0002446890103761334,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_key_value_pair",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(key_value_rule)": 78,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_inline_table)": 4
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 82
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_column_widths)": {
            "ncalls": 2,
            "tottime": 0.016184708016226068,
            "cumtime": 0.016184708016226068,
            "percall": 0.008092354008113034,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py",
            "function": "get_column_widths",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(show_func)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(from_config)": 2,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/toml_config.py:0(get_subconfig)": 2
            }
          },
          "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(<genexpr>)": {
            "ncalls": 8997,
            "tottime": 0.015982734184945002,
            "cumtime": 0.015982734184945002,
            "percall": 1.7764515043842395e-06,
            "filename": "/Users/Adam/Pycroscope/docs/examples/sample_workload.py",
            "function": "<genexpr>",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(data_processing_pipeline)": 8997
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": {
            "ncalls": 34,
            "tottime": 0.014172705123201013,
            "cumtime": 0.014172705123201013,
            "percall": 0.00041684426832944155,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_array",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 34
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comments_and_array_ws)": 252,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 120
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/collections/__init__.py:0(_make)": {
            "ncalls": 5503,
            "tottime": 0.014148325804853812,
            "cumtime": 0.014148325804853812,
            "percall": 2.571020498792261e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/collections/__init__.py",
            "function": "_make",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(_generate_tokens_from_c_tokenizer)": 5503
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": {
            "ncalls": 202,
            "tottime": 0.011426883022068068,
            "cumtime": 0.011426883022068068,
            "percall": 5.656872783202014e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_value",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": 120
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": 34,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_one_line_basic_str)": 148,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_inline_table)": 4,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_re.py:0(match_to_number)": 6,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_literal_str)": 2
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_one_line_basic_str)": {
            "ncalls": 150,
            "tottime": 0.010687833128031343,
            "cumtime": 0.010687833128031343,
            "percall": 7.125222085354228e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_one_line_basic_str",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_value)": 148,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_part)": 2
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_basic_str)": 150
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": {
            "ncalls": 308,
            "tottime": 0.01029626396484673,
            "cumtime": 0.01029626396484673,
            "percall": 3.342942845729458e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py",
            "function": "getlines",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/line_profiler/line_profiler.py:0(get_code_block)": 32,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getline)": 276
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(updatecache)": 39
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_basic_str)": {
            "ncalls": 150,
            "tottime": 0.01021375393611379,
            "cumtime": 0.01021375393611379,
            "percall": 6.809169290742527e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_basic_str",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_one_line_basic_str)": 150
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(updatecache)": {
            "ncalls": 39,
            "tottime": 0.009253412048565224,
            "cumtime": 0.009253412048565224,
            "percall": 0.0002372669756042365,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py",
            "function": "updatecache",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": 39
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(open)": 39,
              "<frozen codecs>:0(decode)": 223
            }
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(_extract_function_data)": {
            "ncalls": 32,
            "tottime": 0.008921584027120844,
            "cumtime": 0.008921584027120844,
            "percall": 0.00027879950084752636,
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py",
            "function": "_extract_function_data",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(stop)": 32
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getline)": 276,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(<lambda>)": 276
            }
          },
          "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/memory_profiler.py:0(stop)": {
            "ncalls": 1,
            "tottime": 0.008347916009370238,
            "cumtime": 0.008347916009370238,
            "percall": 0.008347916009370238,
            "filename": "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/memory_profiler.py",
            "function": "stop",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/orchestra.py:0(stop_profiling)": 1
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(is_alive)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(join)": 1,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/base.py:0(_mark_end)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/psutil/_common.py:0(wrapper)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/site-packages/psutil/__init__.py:0(memory_percent)": 1,
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/base.py:0(duration)": 2
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(join)": {
            "ncalls": 1,
            "tottime": 0.007394040992949158,
            "cumtime": 0.007394040992949158,
            "percall": 0.007394040992949158,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "join",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/memory_profiler.py:0(stop)": 1
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(is_set)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(current_thread)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(_wait_for_tstate_lock)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(_wait_for_tstate_lock)": {
            "ncalls": 2,
            "tottime": 0.007383584015769884,
            "cumtime": 0.007383584015769884,
            "percall": 0.003691792007884942,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py",
            "function": "_wait_for_tstate_lock",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(is_alive)": 1,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(join)": 1
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/threading.py:0(_stop)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(open)": {
            "ncalls": 39,
            "tottime": 0.004471540072700009,
            "cumtime": 0.004471540072700009,
            "percall": 0.00011465487365897458,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py",
            "function": "open",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(updatecache)": 39
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tokenize.py:0(detect_encoding)": 39,
              "<frozen codecs>:0(__init__)": 39
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": {
            "ncalls": 1032,
            "tottime": 0.00436074729077518,
            "cumtime": 0.00436074729077518,
            "percall": 4.225530320518585e-06,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "skip_chars",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(loads)": 234,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(create_dict_rule)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_part)": 140,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": 176,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 82,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comments_and_array_ws)": 366,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_inline_table)": 8
            },
            "callees": {}
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comments_and_array_ws)": {
            "ncalls": 252,
            "tottime": 0.004325217072619125,
            "cumtime": 0.004325217072619125,
            "percall": 1.7163559811980654e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "skip_comments_and_array_ws",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_array)": 252
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 366,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_comment)": 366
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key)": {
            "ncalls": 108,
            "tottime": 0.003788214235100895,
            "cumtime": 0.003788214235100895,
            "percall": 3.50760577324157e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py",
            "function": "parse_key",
            "line": 0,
            "callers": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(create_dict_rule)": 26,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_value_pair)": 82
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(parse_key_part)": 142,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/tomllib/_parser.py:0(skip_chars)": 176
            }
          },
          "<frozen importlib._bootstrap>:0(_find_and_load)": {
            "ncalls": 1,
            "tottime": 0.0034811249934136868,
            "cumtime": 0.0034811249934136868,
            "percall": 0.0034811249934136868,
            "filename": "<frozen importlib._bootstrap>",
            "function": "_find_and_load",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/usage_example.py:0(run_sample_workload)": 1
            },
            "callees": {
              "<frozen importlib._bootstrap>:0(__init__)": 1,
              "<frozen importlib._bootstrap>:0(__enter__)": 1,
              "<frozen importlib._bootstrap>:0(_find_and_load_unlocked)": 1,
              "<frozen importlib._bootstrap>:0(__exit__)": 1,
              "<frozen importlib._bootstrap>:0(cb)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getline)": {
            "ncalls": 276,
            "tottime": 0.00348038284573704,
            "cumtime": 0.00348038284573704,
            "percall": 1.2610082774409566e-05,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py",
            "function": "getline",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/src/pycroscope/infrastructure/profilers/line_profiler.py:0(_extract_function_data)": 276
            },
            "callees": {
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/linecache.py:0(getlines)": 276
            }
          },
          "<frozen importlib._bootstrap>:0(_find_and_load_unlocked)": {
            "ncalls": 1,
            "tottime": 0.0032879170030355453,
            "cumtime": 0.0032879170030355453,
            "percall": 0.0032879170030355453,
            "filename": "<frozen importlib._bootstrap>",
            "function": "_find_and_load_unlocked",
            "line": 0,
            "callers": {
              "<frozen importlib._bootstrap>:0(_find_and_load)": 1
            },
            "callees": {
              "<frozen importlib._bootstrap>:0(_find_spec)": 1,
              "<frozen importlib._bootstrap>:0(_load_unlocked)": 1
            }
          },
          "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(load)": {
            "ncalls": 10,
            "tottime": 0.003027123981155455,
            "cumtime": 0.003027123981155455,
            "percall": 0.00030271239811554553,
            "filename": "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py",
            "function": "load",
            "line": 0,
            "callers": {
              "/Users/Adam/Pycroscope/docs/examples/sample_workload.py:0(file_io_operations)": 10
            },
            "callees": {
              "<frozen codecs>:0(decode)": 10,
              "/opt/homebrew/Caskroom/miniconda/base/lib/python3.12/json/__init__.py:0(loads)": 10
            }
          },
          "<frozen importlib._bootstrap>:0(_load_unlocked)": {
            "ncalls": 1,
            "tottime": 0.0027866669988725334,
            "cumtime": 0.0027866669988725334,
            "percall": 0.0027866669988725334,
            "filename": "<frozen importlib._bootstrap>",
            "function": "_load_unlocked",
            "line": 0,
            "callers": {
              "<frozen importlib._bootstrap>:0(_find_and_load_unlocked)": 1
            },
            "callees": {
              "<frozen importlib._bootstrap>:0(module_from_spec)": 1,
              "<frozen importlib._bootstrap_external>:0(exec_module)": 1,
              "<frozen importlib._bootstrap>:0(_verbose_message)": 1
            }
          }
        },
        "stats_summary": "Custom call profiler tracked 322091 function calls in 86.802762 seconds",
        "sort_key": "cumulative",
        "profiler_type": "custom_call_profiler"
      },
      "start_time": "2025-07-27T12:25:21.366933",
      "end_time": "2025-07-27T12:25:42.999514",
      "duration": 21.632581,
      "success": true,
      "error_message": null
    }
  }
}